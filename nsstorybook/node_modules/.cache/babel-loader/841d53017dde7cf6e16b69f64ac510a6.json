{"ast":null,"code":"var _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/SurveyViewer/question.js\";\n\n/**\n *\n * Question\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport globalMessages from '../../messages';\nimport { styles } from './styles';\nimport messages from './messages';\nexport function Question({\n  intl,\n  responses,\n  question,\n  context,\n  number,\n  lastQuestion,\n  rules,\n  version\n}) {\n  const classes = styles();\n  const {\n    questionVersion,\n    fieldType,\n    isRequired\n  } = question;\n  const {\n    versionNumber,\n    question: {\n      name\n    },\n    questionContexts,\n    optionValues\n  } = questionVersion;\n  const questionLabel = questionContexts.find(q => q.contextPermalink === context) || questionContexts[0];\n  const response = responses[number - 1] && responses[number - 1].sourceValue;\n\n  const getField = () => {\n    switch (fieldType) {\n      case 'short_text':\n        return 'short text';\n\n      case 'paragraph_text':\n        return 'paragraph text';\n\n      case 'number':\n        return 'number';\n\n      case 'date':\n        return 'date';\n\n      case 'time':\n        return 'time';\n\n      case 'single_select':\n        return 'single choice';\n\n      case 'multi_select':\n        return 'Multiple Choice';\n\n      case 'likert':\n        return 'Likert';\n\n      case 'photo':\n        return 'photo';\n\n      case 'audio':\n        return 'Audio';\n\n      case 'video':\n        return 'Video';\n\n      case 'coordinates':\n        return 'Coordinates';\n\n      default:\n        return null;\n    }\n  };\n\n  const field = getField();\n  const validResponse = optionValues && optionValues.filter(o => response && response.split(',').includes(o)).length === 1;\n  const notMultiOrSingle = fieldType !== 'multi_select' && fieldType !== 'single_select';\n  const multiOrSingle = fieldType === 'multi_select' || fieldType === 'single_select';\n  const multiOrSingleNoResponse = multiOrSingle && (response && !validResponse || !response);\n  const responseMsg = React.createElement(\"li\", {\n    className: \"standard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, version !== 2 && notMultiOrSingle && React.createElement(\"span\", {\n    className: clsx({\n      selected: response\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, response || intl.formatMessage(messages.noResponse)), version !== 2 && multiOrSingleNoResponse && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, intl.formatMessage(messages.noResponse)));\n  return React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    className: classes.questionSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    className: classes.questionCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, number), React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 11,\n    direction: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: clsx(classes.questionName, classes.text),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, name, isRequired && React.createElement(\"span\", {\n    className: classes.requiredQuestion,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \" *\")), React.createElement(Typography, {\n    className: clsx(classes.caption, classes.text, classes.uppercase),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, intl.formatMessage(globalMessages.version), \" \", versionNumber, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \" - \", field, \" \"), intl.formatMessage(messages.field))), React.createElement(Grid, {\n    item: true,\n    className: classes.questionContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, rules && rules.condition && rules.value && React.createElement(Typography, {\n    className: classes.condition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, `${intl.formatMessage(messages.conditionalDisplay)} \"${name.toUpperCase()}\" ${rules.condition} \"${rules.value}\" `), React.createElement(Typography, {\n    className: classes.questionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, questionLabel.label)), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: clsx(classes.questionChoices, 'question-choices', {\n      standard: notMultiOrSingle || multiOrSingleNoResponse\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, multiOrSingle && (response && validResponse || version === 2) && optionValues.map((item, idx) => {\n    let selected = false;\n\n    if (response && response.split(',').includes(item)) {\n      selected = true;\n    }\n\n    return React.createElement(\"li\", {\n      key: idx,\n      className: clsx({\n        selected\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, questionLabel.optionLabels && questionLabel.optionLabels[item]));\n  }), responseMsg))), !lastQuestion && React.createElement(\"div\", {\n    className: classes.dividerContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    className: classes.questionDivider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })));\n}\nQuestion.displayName = \"Question\";\nQuestion.propTypes = {\n  intl: intlShape.isRequired,\n  responses: PropTypes.array.isRequired,\n  question: PropTypes.object.isRequired,\n  context: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  lastQuestion: PropTypes.bool.isRequired,\n  rules: PropTypes.shape({\n    value: PropTypes.string,\n    condition: PropTypes.string\n  }),\n  version: PropTypes.oneOf([1, 2])\n};\nconst IntlQuestion = injectIntl(Question);\nexport default IntlQuestion;\nQuestion.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Question\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"responses\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"question\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"context\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"number\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"lastQuestion\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"rules\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"value\": {\n            \"name\": \"string\",\n            \"required\": false\n          },\n          \"condition\": {\n            \"name\": \"string\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"version\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"1\",\n          \"computed\": false\n        }, {\n          \"value\": \"2\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/SurveyViewer/question.js\"] = {\n    name: \"Question\",\n    docgenInfo: Question.__docgenInfo,\n    path: \"src/components/SurveyViewer/question.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/SurveyViewer/question.js"],"names":["React","PropTypes","clsx","injectIntl","intlShape","Typography","Divider","Grid","globalMessages","styles","messages","Question","intl","responses","question","context","number","lastQuestion","rules","version","classes","questionVersion","fieldType","isRequired","versionNumber","name","questionContexts","optionValues","questionLabel","find","q","contextPermalink","response","sourceValue","getField","field","validResponse","filter","o","split","includes","length","notMultiOrSingle","multiOrSingle","multiOrSingleNoResponse","responseMsg","selected","formatMessage","noResponse","questionSection","questionCount","questionName","text","requiredQuestion","caption","uppercase","questionContainer","condition","value","conditionalDisplay","toUpperCase","questionText","label","questionChoices","standard","map","item","idx","optionLabels","dividerContainer","questionDivider","propTypes","array","object","string","bool","shape","oneOf","IntlQuestion"],"mappings":"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","sourcesContent":["/**\n *\n * Question\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\n\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\n\nimport globalMessages from '../../messages';\nimport { styles } from './styles';\nimport messages from './messages';\n\nexport function Question({\n  intl,\n  responses,\n  question,\n  context,\n  number,\n  lastQuestion,\n  rules,\n  version,\n}) {\n  const classes = styles();\n  const { questionVersion, fieldType, isRequired } = question;\n  const {\n    versionNumber,\n    question: { name },\n    questionContexts,\n    optionValues,\n  } = questionVersion;\n\n  const questionLabel =\n    questionContexts.find(q => q.contextPermalink === context) ||\n    questionContexts[0];\n\n  const response = responses[number - 1] && responses[number - 1].sourceValue;\n\n  const getField = () => {\n    switch (fieldType) {\n      case 'short_text':\n        return 'short text';\n      case 'paragraph_text':\n        return 'paragraph text';\n      case 'number':\n        return 'number';\n      case 'date':\n        return 'date';\n      case 'time':\n        return 'time';\n      case 'single_select':\n        return 'single choice';\n      case 'multi_select':\n        return 'Multiple Choice';\n      case 'likert':\n        return 'Likert';\n      case 'photo':\n        return 'photo';\n      case 'audio':\n        return 'Audio';\n      case 'video':\n        return 'Video';\n      case 'coordinates':\n        return 'Coordinates';\n      default:\n        return null;\n    }\n  };\n\n  const field = getField();\n  const validResponse =\n    optionValues &&\n    optionValues.filter(o => response && response.split(',').includes(o))\n      .length === 1;\n  const notMultiOrSingle =\n    fieldType !== 'multi_select' && fieldType !== 'single_select';\n  const multiOrSingle =\n    fieldType === 'multi_select' || fieldType === 'single_select';\n  const multiOrSingleNoResponse =\n    multiOrSingle && ((response && !validResponse) || !response);\n\n  const responseMsg = (\n    <li className=\"standard\">\n      {version !== 2 && notMultiOrSingle && (\n        <span\n          className={clsx({\n            selected: response,\n          })}\n        >\n          {response || intl.formatMessage(messages.noResponse)}\n        </span>\n      )}\n      {version !== 2 && multiOrSingleNoResponse && (\n        <span>{intl.formatMessage(messages.noResponse)}</span>\n      )}\n    </li>\n  );\n\n  return (\n    <Grid item container direction=\"row\" className={classes.questionSection}>\n      <Grid item className={classes.questionCount}>\n        {number}\n      </Grid>\n      <Grid container item xs={11} direction=\"column\">\n        <Grid item>\n          <Typography className={clsx(classes.questionName, classes.text)}>\n            {name}\n            {isRequired && <span className={classes.requiredQuestion}> *</span>}\n          </Typography>\n          <Typography\n            className={clsx(classes.caption, classes.text, classes.uppercase)}\n          >\n            {intl.formatMessage(globalMessages.version)} {versionNumber}\n            <span> - {field} </span>\n            {intl.formatMessage(messages.field)}\n          </Typography>\n        </Grid>\n\n        <Grid item className={classes.questionContainer}>\n          {rules && rules.condition && rules.value && (\n            <Typography className={classes.condition}>\n              {`${intl.formatMessage(\n                messages.conditionalDisplay\n              )} \"${name.toUpperCase()}\" ${rules.condition} \"${rules.value}\" `}\n            </Typography>\n          )}\n\n          <Typography className={classes.questionText}>\n            {questionLabel.label}\n          </Typography>\n        </Grid>\n\n        <Grid item>\n          <ul\n            className={clsx(classes.questionChoices, 'question-choices', {\n              standard: notMultiOrSingle || multiOrSingleNoResponse,\n            })}\n          >\n            {multiOrSingle &&\n              ((response && validResponse) || version === 2) &&\n              optionValues.map((item, idx) => {\n                let selected = false;\n\n                if (response && response.split(',').includes(item)) {\n                  selected = true;\n                }\n\n                return (\n                  <li\n                    key={idx}\n                    className={clsx({\n                      selected,\n                    })}\n                  >\n                    <span>\n                      {questionLabel.optionLabels &&\n                        questionLabel.optionLabels[item]}\n                    </span>\n                  </li>\n                );\n              })}\n            {responseMsg}\n          </ul>\n        </Grid>\n      </Grid>\n      {!lastQuestion && (\n        <div className={classes.dividerContainer}>\n          <Divider className={classes.questionDivider} />\n        </div>\n      )}\n    </Grid>\n  );\n}\n\nQuestion.propTypes = {\n  intl: intlShape.isRequired,\n  responses: PropTypes.array.isRequired,\n  question: PropTypes.object.isRequired,\n  context: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  lastQuestion: PropTypes.bool.isRequired,\n  rules: PropTypes.shape({\n    value: PropTypes.string,\n    condition: PropTypes.string,\n  }),\n  version: PropTypes.oneOf([1, 2]),\n};\n\nconst IntlQuestion = injectIntl(Question);\n\nexport default IntlQuestion;\n"]},"metadata":{},"sourceType":"module"}