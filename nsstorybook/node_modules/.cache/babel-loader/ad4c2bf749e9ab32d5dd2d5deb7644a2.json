{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nimport _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/stories/2-ActionPanel.stories.js\";\nimport React, { Component, useState } from 'react';\nimport { action } from '@storybook/addon-actions';\nimport { BrowserRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport ActionPanel from '../components/ActionPanel/index';\nimport { actionPanelStyles } from '../components/ActionPanel/styles';\nexport default {\n  title: 'ActionPanel',\n  component: ActionPanel\n};\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"h3\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, \"Action Panel Loading\");\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}, \"Button\");\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, \"An Action Panel usually consists of a button and when clicked will have some loading state before delivering a message\");\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}, \"Hello\"));\n\nexport function ActionPanelContainer({\n  formId,\n  type,\n  resetForm,\n  disabled,\n  loading\n}) {\n  const classes = actionPanelStyles();\n  const [loadingState, setloadingState] = useState(false);\n  const [messageState, setmessageState] = useState({\n    message: '',\n    open: false,\n    type: 'success'\n  });\n\n  const loadingAction = (message, loading) => {\n    const timeOut = setTimeout(() => {\n      message(state => _objectSpread({}, state, {\n        open: false,\n        message: 'loading'\n      }));\n    }, 3000);\n    loading(false);\n    return timeOut;\n  };\n\n  return React.createElement(BrowserRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, _ref, React.createElement(ActionPanel, {\n    action: \"\",\n    type: \"\",\n    formId: \"\",\n    resetForm: action(\"I've been clicked\"),\n    loading: messageState,\n    disabled: messageState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, _ref2), _ref3, React.createElement(ActionPanel, {\n    loading: messageState,\n    disabled: messageState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, _ref4));\n}\nActionPanelContainer.displayName = \"ActionPanelContainer\";\nActionPanelContainer.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ActionPanelContainer\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/stories/2-ActionPanel.stories.js\"] = {\n    name: \"ActionPanelContainer\",\n    docgenInfo: ActionPanelContainer.__docgenInfo,\n    path: \"src/stories/2-ActionPanel.stories.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/stories/2-ActionPanel.stories.js"],"names":["React","Component","useState","action","BrowserRouter","PropTypes","ActionPanel","actionPanelStyles","title","component","ActionPanelContainer","formId","type","resetForm","disabled","loading","classes","loadingState","setloadingState","messageState","setmessageState","message","open","loadingAction","timeOut","setTimeout","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AAIA,eAAe;AACbC,EAAAA,KAAK,EAAE,aADM;AAEbC,EAAAA,SAAS,EAAEH;AAFE,CAAf;;;;AAmCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0B;;;;AAQQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,Y;;;;AAER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4H;;;;AAIQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,C;;AA5CZ,OAAO,SAASI,oBAAT,CAA8B;AACnCC,EAAAA,MADmC;AAEnCC,EAAAA,IAFmC;AAGnCC,EAAAA,SAHmC;AAInCC,EAAAA,QAJmC;AAKnCC,EAAAA;AALmC,CAA9B,EAMJ;AAED,QAAMC,OAAO,GAAGT,iBAAiB,EAAjC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC;AAC/CmB,IAAAA,OAAO,EAAE,EADsC;AAE/CC,IAAAA,IAAI,EAAE,KAFyC;AAG/CV,IAAAA,IAAI,EAAE;AAHyC,GAAD,CAAhD;;AAMA,QAAMW,aAAa,GAAG,CAACF,OAAD,EAAUN,OAAV,KAAsB;AAC1C,UAAMS,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BJ,MAAAA,OAAO,CAACK,KAAK,sBACRA,KADQ;AAEXJ,QAAAA,IAAI,EAAE,KAFK;AAGXD,QAAAA,OAAO,EAAE;AAHE,QAAN,CAAP;AAKD,KANyB,EAMvB,IANuB,CAA1B;AAOAN,IAAAA,OAAO,CAAC,KAAD,CAAP;AACA,WAAOS,OAAP;AACD,GAVD;;AAYA,SACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEE,oBAAC,WAAD;AACM,IAAA,MAAM,EAAC,EADb;AAEM,IAAA,IAAI,EAAC,EAFX;AAGM,IAAA,MAAM,EAAC,EAHb;AAIM,IAAA,SAAS,EAAErB,MAAM,CAAC,mBAAD,CAJvB;AAKM,IAAA,OAAO,EAAEgB,YALf;AAMM,IAAA,QAAQ,EAAEA,YANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,SAYA,oBAAC,WAAD;AACQ,IAAA,OAAO,EAAEA,YADjB;AAEQ,IAAA,QAAQ,EAAEA,YAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAZA,CADF;AAsBD;AAlDeT,oB","sourcesContent":["import React, { Component, useState } from 'react';\nimport { action } from '@storybook/addon-actions';\nimport { BrowserRouter } from 'react-router-dom'\nimport PropTypes from 'prop-types';\nimport ActionPanel from '../components/ActionPanel/index'\nimport { actionPanelStyles } from '../components/ActionPanel/styles';\n\n\n\nexport default {\n  title: 'ActionPanel',\n  component: ActionPanel,\n};\n\nexport function ActionPanelContainer({\n  formId,\n  type,\n  resetForm,\n  disabled,\n  loading,\n}) {\n\n  const classes = actionPanelStyles();\n  const [loadingState, setloadingState] = useState(false);\n  const [messageState, setmessageState] = useState({\n    message: '',\n    open: false,\n    type: 'success',\n  });\n\n  const loadingAction = (message, loading) => {\n    const timeOut = setTimeout(() => {\n      message(state => ({\n        ...state,\n        open: false,\n        message: 'loading',\n      }));\n    }, 3000);\n    loading(false);\n    return timeOut;\n  };\n\n  return (\n    <BrowserRouter>\n    <h3>Action Panel Loading</h3>\n      <ActionPanel\n            action=\"\"\n            type=\"\"\n            formId=\"\"\n            resetForm={action(\"I've been clicked\")}\n            loading={messageState}\n            disabled={messageState}>\n            <span>Button</span>\n      </ActionPanel>\n    <p>An Action Panel usually consists of a button and when clicked will have some loading state before delivering a message</p>\n    <ActionPanel\n            loading={messageState}\n            disabled={messageState}>\n            <span>\n              <button>Hello</button>\n            </span>\n      </ActionPanel>\n    </BrowserRouter>\n  );\n}"]},"metadata":{},"sourceType":"module"}