{"ast":null,"code":"import _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSFilters/multi.js\";\n\n/* eslint-disable react/prop-types */\n\n/**\n *\n * MultiSelect\n *\n */\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl } from 'react-intl';\nimport Fuse from 'fuse.js';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Search from '@material-ui/icons/Search';\nimport CheckBoxGroup from '../CheckboxGroup/index';\nimport { NSFiltersContext } from './context/filters';\nimport { SelectFilterStyles, multiSelectSearchClasses } from './styles';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(InputAdornment, {\n  position: \"start\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 100\n  },\n  __self: this\n}, React.createElement(Search, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 101\n  },\n  __self: this\n}));\n\nexport function MultiSelect({\n  label,\n  id: filterId,\n  data,\n  filterQueryTriggers\n}) {\n  const classes = SelectFilterStyles();\n  const {\n    multiSelect: {\n      multiSelectOptions: options,\n      setMultiSelectOptions: setOptions\n    },\n    handleSelected\n  } = useContext(NSFiltersContext);\n\n  if (options[filterId] && options[filterId].length === 0) {\n    setOptions(currentState => _objectSpread({}, currentState, {\n      [filterId]: data\n    }));\n  }\n\n  const searchClasses = multiSelectSearchClasses();\n  const settings = {\n    threshold: 0.0,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: ['label']\n  };\n  const fuse = new Fuse(data, settings);\n\n  const handleCheckboxChange = (status, id) => {\n    handleSelected([]);\n    setOptions(currentState => _objectSpread({}, currentState, {\n      [filterId]: options[filterId].map(option => {\n        if (option.id === id) {\n          option.selected = status;\n        }\n\n        return option;\n      })\n    }));\n\n    if (filterQueryTriggers[filterId]) {\n      filterQueryTriggers[filterId]({\n        query: options[filterId].filter(option => option.selected).map(o => o.id),\n        chips: options[filterId].filter(option => option.selected).map(o => o.label)\n      });\n    }\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"center\",\n    className: clsx(classes.multiSelectContainer, 'multi-checkbox'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    classes: searchClasses,\n    id: `${label}-search`,\n    onChange: e => {\n      const {\n        value\n      } = e.target;\n      const newList = fuse.search(value).length > 0 ? fuse.search(value) : data;\n      setOptions(currentState => _objectSpread({}, currentState, {\n        [filterId]: newList\n      }));\n    },\n    InputProps: {\n      startAdornment: _ref\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    className: classes.optionsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, options[filterId].map(({\n    label: optionLabel,\n    count,\n    id,\n    selected\n  }, idx) => React.createElement(CheckBoxGroup, {\n    key: idx,\n    shouldDisable: {\n      disable: false,\n      id: null\n    },\n    multi: true,\n    label: optionLabel,\n    show: selected,\n    id: id,\n    resultCount: count,\n    checboxChange: (e, chkBoxId) => {\n      handleCheckboxChange(e.target.checked, chkBoxId);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }))));\n}\nMultiSelect.displayName = \"MultiSelect\";\nMultiSelect.propTypes = {\n  id: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n  label: PropTypes.string.isRequired,\n  filterQueryTriggers: PropTypes.object.isRequired\n};\nconst IntlMultiSelect = injectIntl(MultiSelect);\nexport default IntlMultiSelect;\nMultiSelect.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"MultiSelect\",\n  \"props\": {\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"data\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filterQueryTriggers\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NSFilters/multi.js\"] = {\n    name: \"MultiSelect\",\n    docgenInfo: MultiSelect.__docgenInfo,\n    path: \"src/components/NSFilters/multi.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSFilters/multi.js"],"names":["React","useContext","PropTypes","clsx","injectIntl","Fuse","Grid","TextField","InputAdornment","Search","CheckBoxGroup","NSFiltersContext","SelectFilterStyles","multiSelectSearchClasses","MultiSelect","label","id","filterId","data","filterQueryTriggers","classes","multiSelect","multiSelectOptions","options","setMultiSelectOptions","setOptions","handleSelected","length","currentState","searchClasses","settings","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","fuse","handleCheckboxChange","status","map","option","selected","query","filter","o","chips","multiSelectContainer","e","value","target","newList","search","startAdornment","optionsContainer","optionLabel","count","idx","disable","chkBoxId","checked","propTypes","string","isRequired","array","object","IntlMultiSelect"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\n/**\n *\n * MultiSelect\n *\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl } from 'react-intl';\nimport Fuse from 'fuse.js';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Search from '@material-ui/icons/Search';\n\nimport CheckBoxGroup from '../CheckboxGroup/index';\nimport { NSFiltersContext } from './context/filters';\nimport { SelectFilterStyles, multiSelectSearchClasses } from './styles';\n\nexport function MultiSelect({\n  label,\n  id: filterId,\n  data,\n  filterQueryTriggers,\n}) {\n  const classes = SelectFilterStyles();\n  const {\n    multiSelect: {\n      multiSelectOptions: options,\n      setMultiSelectOptions: setOptions,\n    },\n    handleSelected,\n  } = useContext(NSFiltersContext);\n\n  if (options[filterId] && options[filterId].length === 0) {\n    setOptions(currentState => ({ ...currentState, [filterId]: data }));\n  }\n\n  const searchClasses = multiSelectSearchClasses();\n  const settings = {\n    threshold: 0.0,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: ['label'],\n  };\n  const fuse = new Fuse(data, settings);\n\n  const handleCheckboxChange = (status, id) => {\n    handleSelected([]);\n    setOptions(currentState => ({\n      ...currentState,\n      [filterId]: options[filterId].map(option => {\n        if (option.id === id) {\n          option.selected = status;\n        }\n        return option;\n      }),\n    }));\n\n    if (filterQueryTriggers[filterId]) {\n      filterQueryTriggers[filterId]({\n        query: options[filterId]\n          .filter(option => option.selected)\n          .map(o => o.id),\n        chips: options[filterId]\n          .filter(option => option.selected)\n          .map(o => o.label),\n      });\n    }\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      className={clsx(classes.multiSelectContainer, 'multi-checkbox')}\n    >\n      <TextField\n        classes={searchClasses}\n        id={`${label}-search`}\n        onChange={e => {\n          const { value } = e.target;\n          const newList =\n            fuse.search(value).length > 0 ? fuse.search(value) : data;\n\n          setOptions(currentState => ({\n            ...currentState,\n            [filterId]: newList,\n          }));\n        }}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Search />\n            </InputAdornment>\n          ),\n        }}\n      />\n      <Grid container className={classes.optionsContainer}>\n        {options[filterId].map(\n          ({ label: optionLabel, count, id, selected }, idx) => (\n            <CheckBoxGroup\n              key={idx}\n              shouldDisable={{\n                disable: false,\n                id: null,\n              }}\n              multi\n              label={optionLabel}\n              show={selected}\n              id={id}\n              resultCount={count}\n              checboxChange={(e, chkBoxId) => {\n                handleCheckboxChange(e.target.checked, chkBoxId);\n              }}\n            />\n          )\n        )}\n      </Grid>\n    </Grid>\n  );\n}\n\nMultiSelect.propTypes = {\n  id: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n  label: PropTypes.string.isRequired,\n  filterQueryTriggers: PropTypes.object.isRequired,\n};\n\nconst IntlMultiSelect = injectIntl(MultiSelect);\n\nexport default IntlMultiSelect;\n"]},"metadata":{},"sourceType":"module"}