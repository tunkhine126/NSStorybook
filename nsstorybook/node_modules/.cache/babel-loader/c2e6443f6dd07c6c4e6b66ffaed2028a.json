{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/index.js\";\n\n/* eslint-disable react/prop-types */\n\n/**\n *\n * RecipientList\n *\n */\nimport React, { useEffect, useState } from 'react';\nimport { injectIntl, intlShape } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { ExportToCsv } from 'export-to-csv';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport moment from 'moment';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Add from '@material-ui/icons/Add';\nimport OpenInNew from '@material-ui/icons/OpenInNew'; // import Edit from '@material-ui/icons/Edit';\n// import ImportExport from '@material-ui/icons/ImportExport';\n\nimport NSTable from 'components/shared/NSTable';\nimport LookUp from 'components/shared/Icons/lookup';\nimport HeaderButton from 'components/shared/HeaderButton';\nimport ViewHeader from 'components/shared/ViewHeader';\nimport tableMessages from 'components/shared/NSTable/messages';\nimport TableViews from 'components/shared/NSTable/tableViews';\nimport { makeSelectOrg } from 'containers/App/selectors';\nimport { GET_RECIPIENTS } from 'graphql/queries/recipients';\nimport { GET_ALL_RECIPIENTS, GET_ALL_FILTERED_RECIPIENTS, GET_ALL_SURVEYS } from 'graphql/queries/all-queries';\nimport colors from 'global-styles';\nimport { generalErrorHandler } from 'utils/error-handler';\nimport globalMessages from 'messages';\nimport { formattedColumns as importedFC, generateColumns } from './helper';\nimport { RecipientListStyle, helperClasses, recipientListStyles } from './styles';\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(LookUp, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 464\n  },\n  __self: this\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(Divider, {\n  light: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 493\n  },\n  __self: this\n});\n\nfunction RecipientList(_ref) {\n  let {\n    intl,\n    localOrg,\n    details,\n    preSetFilterId,\n    preSetFilterName,\n    disableHeader\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"intl\", \"localOrg\", \"details\", \"preSetFilterId\", \"preSetFilterName\", \"disableHeader\"]);\n\n  const {\n    lookUpBtn,\n    exportBtn,\n    newFamilyBtn\n  } = helperClasses;\n  const {\n    title,\n    addRecipientName,\n    columns,\n    hierarchyId,\n    recipientDefintionUuid,\n    hasParentRecipient,\n    nestedRecipientTree,\n    childRoutes\n  } = details;\n  const hasCompletedSurveys = Boolean(columns.find(c => c.id === 'completedSurveys'));\n  const defaultState = {\n    query: null,\n    chips: []\n  };\n  const classes = recipientListStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedId, setSelectedId] = useState(0);\n  const [addView, setaddView] = useState(false);\n  const [selected, setSelected] = useState([]); // TODO: Remove Hardcoded values\n\n  const [options, setOptions] = useState([{\n    name: intl.formatMessage(globalMessages.defaultView),\n    id: 0\n  }, {\n    name: 'Ahuachapan Quarterly Audit',\n    id: 1\n  }, {\n    name: 'Year-End Report',\n    id: 2\n  }]);\n  const [rowsPerPage, setRowsPerPage] = useState(15);\n  const [orderBy, setOrderBy] = useState('updated_at');\n  const [order, setOrder] = useState('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [filteredResults, setFilteredResults] = useState(0);\n  const [tableSearch, setTableSearch] = useState('');\n  const [lastUpdate, setLastUpdate] = useState(defaultState);\n  const [dateRange, setDateRange] = useState({\n    before: null,\n    after: null\n  });\n  const [completedSurveys, setCompletedSurveys] = useState(defaultState);\n  const [parentRecipients, setParentRecipient] = useState(!disableHeader ? defaultState : {\n    query: [preSetFilterId],\n    chips: [preSetFilterName]\n  });\n  const columnsToUse = columns.filter(c => {\n    if (!hasCompletedSurveys) {\n      return c.id !== 'completedSurveys';\n    }\n\n    return c;\n  }).filter(c => {\n    if (!hasParentRecipient) {\n      return c.id !== 'parentRecipients';\n    }\n\n    return c;\n  }).filter(c => {\n    if (hierarchyId === 0) {\n      return c.id !== 'childRecipients';\n    }\n\n    return c;\n  });\n  const customDate = lastUpdate.query === 'custom';\n  const userOrg = localOrg.uuid;\n  const {\n    loading,\n    error,\n    data: recipientData\n  } = useQuery(GET_RECIPIENTS, {\n    variables: {\n      resultsPerPage: rowsPerPage,\n      surveyUuids: completedSurveys.query,\n      parentUuids: parentRecipients.query,\n      skip: currentPage > 1 ? rowsPerPage * (currentPage - 1) : 0,\n      sortColumn: orderBy,\n      sortDirection: order,\n      nameContains: tableSearch,\n      internalIdContains: tableSearch,\n      organizationUuid: userOrg,\n      recipientDefinitionUuid: recipientDefintionUuid,\n      lastSyncedAt: customDate ? null : lastUpdate.query,\n      before: dateRange.before,\n      after: dateRange.after\n    },\n    skip: customDate && dateRange.before === null && dateRange.after === null,\n    fetchPolicy: 'network-only'\n  });\n  const {\n    loading: allDataLoading,\n    error: allDataError,\n    data: allData\n  } = useQuery(GET_ALL_RECIPIENTS, {\n    variables: {\n      sortColumn: orderBy,\n      sortDirection: order,\n      organizationUuid: userOrg,\n      recipientDefinitionUuid: recipientDefintionUuid\n    }\n  });\n  const {\n    loading: allFilteredDataLoading,\n    error: allFilteredDataError,\n    data: allFilteredData\n  } = useQuery(GET_ALL_FILTERED_RECIPIENTS, {\n    variables: {\n      surveyUuids: completedSurveys.query,\n      parentUuids: parentRecipients.query,\n      sortColumn: orderBy,\n      sortDirection: order,\n      nameContains: tableSearch,\n      internalIdContains: tableSearch,\n      organizationUuid: userOrg,\n      recipientDefinitionUuid: recipientDefintionUuid,\n      lastSyncedAt: customDate ? null : lastUpdate.query,\n      before: dateRange.before,\n      after: dateRange.after\n    },\n    fetchPolicy: 'network-only'\n  });\n  const {\n    loading: allSurveysLoading,\n    error: allSurveysError,\n    data: allSurveys\n  } = useQuery(GET_ALL_SURVEYS, {\n    variables: {\n      organizationUuid: userOrg\n    },\n    skip: false\n  });\n  useEffect(() => {\n    if (recipientData && Object.entries(recipientData).length > 0) {\n      const {\n        recipients,\n        _recipientsMetaData: {\n          totalCount,\n          totalPages: tp\n        }\n      } = recipientData;\n      setFilteredResults(recipients.length);\n      setTotalResults(totalCount);\n      setTotalPages(tp);\n\n      if (totalCount === 0) {\n        setCurrentPage(1);\n      }\n    }\n  }, [recipientData, loading]);\n\n  if (error || allDataError || allFilteredDataError || allSurveysError) {\n    return generalErrorHandler(error || allDataError || allFilteredDataError || allSurveysError, _objectSpread({}, rest));\n  }\n\n  const mapColumnIds = {\n    lastUpdate: 'updated_at',\n    id: 'internal_id',\n    recipientName: 'name'\n  };\n  const csvHeaders = columnsToUse.map(c => c.label);\n  const toolbarActions = [{\n    title: intl.formatMessage(tableMessages.createSurvReq),\n    disable: allDataLoading,\n    handleClick: () => {\n      // TODO: Revisit\n      console.log('Creating Survey');\n    }\n  }, {\n    title: intl.formatMessage(tableMessages.export),\n    disable: allDataLoading,\n    handleClick: () => {\n      const dataToExport = selected.map(id => dataFormatter(allData.recipients, true).find(item => item.id === id));\n      handleExport(dataToExport);\n    }\n  }];\n  const formattedColumns = importedFC(classes, columnsToUse); // const horizActions = [\n  //   {\n  //     route: '/survey-requests',\n  //     icon: Add,\n  //     text: intl.formatMessage(messages.surveyRequests),\n  //   },\n  //   {\n  //     route: '/survey-requests/edit',\n  //     icon: Edit,\n  //     text: intl.formatMessage(messages.editSurveyRequests),\n  //   },\n  //   {\n  //     route: '/update-status',\n  //     icon: ImportExport,\n  //     text: intl.formatMessage(messages.updateStatus),\n  //   },\n  // ];\n\n  const dateRangeFormat = `After ${moment(dateRange.after).format('MMM DD, YYYY')} - Before ${moment(dateRange.before).format('MMM DD, YYYY')}`;\n  const columnsData = generateColumns([{\n    id: 'completedSurveys',\n    loading: allSurveysLoading,\n    list: (allSurveys.surveys || []).map(d => ({\n      id: d.uuid,\n      label: d.name,\n      count: d.submissionUuids.length,\n      selected: false\n    })),\n    chips: completedSurveys.chips,\n    clear: () => setCompletedSurveys(defaultState)\n  }, {\n    id: 'parentRecipients',\n    loading: false,\n    list: nestedRecipientTree,\n    chips: parentRecipients.chips,\n    clear: () => setParentRecipient(defaultState)\n  }, {\n    id: 'lastUpdate',\n    chips: dateRange.before ? [dateRangeFormat] : lastUpdate.chips,\n    clear: () => {\n      setLastUpdate(defaultState);\n      setDateRange({\n        before: null,\n        after: null\n      });\n    }\n  }], columnsToUse);\n\n  function handleExport(dataToExport) {\n    const exportOptions = {\n      filename: `${title.replace(/ /g, '-')}-List`,\n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalSeparator: '.',\n      showLabels: true,\n      showTitle: false,\n      useTextFile: false,\n      useBom: true,\n      headers: csvHeaders\n    };\n    const scrubbedData = dataToExport.map(d => {\n      delete d.uuid;\n      delete d.recipientPath;\n      return d;\n    });\n    const csvExporter = new ExportToCsv(exportOptions);\n    csvExporter.generateCsv(scrubbedData);\n  }\n\n  function handleBtnClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  function handleExited() {\n    setaddView(false);\n  }\n\n  function handleMenuItemClick(event, id) {\n    setSelectedId(id);\n    setAnchorEl(null);\n  }\n\n  function handleAddViewClick() {\n    setaddView(true);\n  }\n\n  function handleCancel() {\n    setaddView(false);\n  }\n\n  function handleAddViewDelete(e, id) {\n    e.stopPropagation(); // Reset the selected view to default if the view being deleted is selected\n\n    if (selectedId === id) {\n      setSelectedId(0);\n    }\n\n    setOptions(options.filter(option => option.id !== id));\n  }\n\n  function dataFormatter(dataToFormat, exportingData) {\n    return dataToFormat.map(({\n      children,\n      parent,\n      uuid,\n      internalId,\n      name,\n      submissionUuids,\n      updatedAt\n    }) => {\n      const parentRecipientName = parent ? parent.name : null;\n      let tempObjStructure = {\n        recipientPath: childRoutes[0].path,\n        parentRecipients: parentRecipientName,\n        uuid\n      };\n      const arr = [name, internalId, submissionUuids.length, children.length, updatedAt];\n\n      if (!hasCompletedSurveys) {\n        arr.splice(2, 1);\n      }\n\n      if (hierarchyId === 0) {\n        arr.splice(arr.length - 2, 1);\n      }\n\n      columnsToUse.filter(c => !c.noColumn).map(({\n        id\n      }) => id).forEach((c, idx) => {\n        tempObjStructure = _objectSpread({}, tempObjStructure, {\n          [c === 'uuid' ? 'id' : c]: arr[idx]\n        });\n      }); // Restructure Object for exporting\n\n      if (exportingData) {\n        let newObjStructure = {};\n        columnsToUse.forEach(c => {\n          newObjStructure = _objectSpread({}, newObjStructure, {\n            [c.id]: tempObjStructure[c.id]\n          });\n        });\n        return newObjStructure;\n      }\n\n      return tempObjStructure;\n    });\n  }\n\n  let filterTitles = {};\n  columnsToUse.forEach(f => {\n    if (f.filter) {\n      filterTitles = _objectSpread({}, filterTitles, {\n        [f.id]: f.label\n      });\n    }\n  });\n  return React.createElement(RecipientListStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430\n    },\n    __self: this\n  }, !disableHeader && React.createElement(React.Fragment, null, React.createElement(Grid, {\n    className: classes.recipientListHeader,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"flex-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440\n    },\n    __self: this\n  }, React.createElement(ViewHeader, {\n    component: title,\n    body: title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443\n    },\n    __self: this\n  }, React.createElement(HeaderButton, {\n    version: 4,\n    bgColor: colors.TEXT.medium,\n    padding: lookUpBtn.padding,\n    click: handleBtnClick,\n    menu: React.createElement(TableViews, {\n      anchorEl: anchorEl,\n      addView: addView,\n      options: options,\n      selectedId: selectedId,\n      handleClose: handleClose,\n      handleExited: handleExited,\n      handleCancel: handleCancel,\n      handleMenuItemClick: handleMenuItemClick,\n      handleAddViewDelete: handleAddViewDelete,\n      handleAddViewClick: handleAddViewClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444\n    },\n    __self: this\n  }, _ref2), React.createElement(HeaderButton, {\n    version: 1,\n    id: \"export-data\",\n    bgColor: colors.TEXT.medium,\n    padding: exportBtn.padding,\n    disabled: allDataLoading,\n    onClick: () => handleExport(dataFormatter(allData.recipients, true)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466\n    },\n    __self: this\n  }, React.createElement(React.Fragment, null, React.createElement(OpenInNew, {\n    className: classes.exportBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477\n    },\n    __self: this\n  }), intl.formatMessage(tableMessages.export))), React.createElement(HeaderButton, {\n    version: 1,\n    bgColor: colors.LINKS.link,\n    padding: newFamilyBtn.padding,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481\n    },\n    __self: this\n  }, React.createElement(React.Fragment, null, React.createElement(Add, {\n    className: classes.newFamilyBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487\n    },\n    __self: this\n  }), addRecipientName)))), _ref3), React.createElement(NSTable, {\n    arialLabels: {\n      checkboxes: 'select all recipients'\n    },\n    toolbarActions: toolbarActions,\n    name: `${title}Table`,\n    columns: columnsData,\n    horizActions: [],\n    data: !loading && recipientData ? dataFormatter(recipientData.recipients) : [],\n    filiteredRecordsUuid: allFilteredDataLoading ? [] : allFilteredData.recipients.map(d => d.uuid),\n    rowsPerPageProps: {\n      rowsPerPage,\n      setRowsPerPage\n    },\n    orderByProps: {\n      orderBy,\n      setOrderBy\n    },\n    orderProps: {\n      order,\n      setOrder\n    },\n    pageProps: {\n      currentPage,\n      setCurrentPage\n    },\n    tableSearchProps: {\n      tableSearch,\n      setTableSearch\n    },\n    lastUpdateProps: {\n      lastUpdate,\n      setLastUpdate\n    },\n    dateRangeProps: {\n      dateRange,\n      setDateRange\n    },\n    filterQueryTriggers: {\n      completedSurveys: setCompletedSurveys,\n      parentRecipients: setParentRecipient\n    },\n    totalResults: totalResults,\n    totalPages: totalPages,\n    loading: loading,\n    filteredResults: filteredResults,\n    mapColumnIds: mapColumnIds,\n    selected: selected,\n    setSelected: setSelected,\n    formattedColumns: formattedColumns,\n    filterTitles: filterTitles,\n    showCheckboxes: true,\n    showTableSettings: true,\n    enableSearch: true,\n    enableFilters: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496\n    },\n    __self: this\n  }));\n}\n\nRecipientList.displayName = \"RecipientList\";\nRecipientList.propTypes = {\n  intl: intlShape.isRequired,\n  localOrg: PropTypes.object.isRequired,\n  details: PropTypes.object.isRequired,\n  disableHeader: PropTypes.bool\n};\nconst IntlRecipientList = injectIntl(RecipientList);\nconst mapStateToProps = createStructuredSelector({\n  localOrg: makeSelectOrg()\n});\nexport default connect(mapStateToProps)(IntlRecipientList);\nRecipientList.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"RecipientList\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"localOrg\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"details\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"disableHeader\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/RecipientList/index.js\"] = {\n    name: \"RecipientList\",\n    docgenInfo: RecipientList.__docgenInfo,\n    path: \"src/components/RecipientList/index.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/index.js"],"names":["React","useEffect","useState","injectIntl","intlShape","PropTypes","useQuery","ExportToCsv","connect","createStructuredSelector","moment","Grid","Divider","Add","OpenInNew","NSTable","LookUp","HeaderButton","ViewHeader","tableMessages","TableViews","makeSelectOrg","GET_RECIPIENTS","GET_ALL_RECIPIENTS","GET_ALL_FILTERED_RECIPIENTS","GET_ALL_SURVEYS","colors","generalErrorHandler","globalMessages","formattedColumns","importedFC","generateColumns","RecipientListStyle","helperClasses","recipientListStyles","RecipientList","intl","localOrg","details","preSetFilterId","preSetFilterName","disableHeader","rest","lookUpBtn","exportBtn","newFamilyBtn","title","addRecipientName","columns","hierarchyId","recipientDefintionUuid","hasParentRecipient","nestedRecipientTree","childRoutes","hasCompletedSurveys","Boolean","find","c","id","defaultState","query","chips","classes","anchorEl","setAnchorEl","selectedId","setSelectedId","addView","setaddView","selected","setSelected","options","setOptions","name","formatMessage","defaultView","rowsPerPage","setRowsPerPage","orderBy","setOrderBy","order","setOrder","currentPage","setCurrentPage","totalResults","setTotalResults","totalPages","setTotalPages","filteredResults","setFilteredResults","tableSearch","setTableSearch","lastUpdate","setLastUpdate","dateRange","setDateRange","before","after","completedSurveys","setCompletedSurveys","parentRecipients","setParentRecipient","columnsToUse","filter","customDate","userOrg","uuid","loading","error","data","recipientData","variables","resultsPerPage","surveyUuids","parentUuids","skip","sortColumn","sortDirection","nameContains","internalIdContains","organizationUuid","recipientDefinitionUuid","lastSyncedAt","fetchPolicy","allDataLoading","allDataError","allData","allFilteredDataLoading","allFilteredDataError","allFilteredData","allSurveysLoading","allSurveysError","allSurveys","Object","entries","length","recipients","_recipientsMetaData","totalCount","tp","mapColumnIds","recipientName","csvHeaders","map","label","toolbarActions","createSurvReq","disable","handleClick","console","log","export","dataToExport","dataFormatter","item","handleExport","dateRangeFormat","format","columnsData","list","surveys","d","count","submissionUuids","clear","exportOptions","filename","replace","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","useTextFile","useBom","headers","scrubbedData","recipientPath","csvExporter","generateCsv","handleBtnClick","event","currentTarget","handleClose","handleExited","handleMenuItemClick","handleAddViewClick","handleCancel","handleAddViewDelete","e","stopPropagation","option","dataToFormat","exportingData","children","parent","internalId","updatedAt","parentRecipientName","tempObjStructure","path","arr","splice","noColumn","forEach","idx","newObjStructure","filterTitles","f","recipientListHeader","TEXT","medium","padding","LINKS","link","checkboxes","propTypes","isRequired","object","bool","IntlRecipientList","mapStateToProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\n/**\n *\n * RecipientList\n *\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { injectIntl, intlShape } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { ExportToCsv } from 'export-to-csv';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport moment from 'moment';\n\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Add from '@material-ui/icons/Add';\nimport OpenInNew from '@material-ui/icons/OpenInNew';\n// import Edit from '@material-ui/icons/Edit';\n// import ImportExport from '@material-ui/icons/ImportExport';\n\nimport NSTable from 'components/shared/NSTable';\nimport LookUp from 'components/shared/Icons/lookup';\nimport HeaderButton from 'components/shared/HeaderButton';\nimport ViewHeader from 'components/shared/ViewHeader';\nimport tableMessages from 'components/shared/NSTable/messages';\nimport TableViews from 'components/shared/NSTable/tableViews';\nimport { makeSelectOrg } from 'containers/App/selectors';\nimport { GET_RECIPIENTS } from 'graphql/queries/recipients';\nimport {\n  GET_ALL_RECIPIENTS,\n  GET_ALL_FILTERED_RECIPIENTS,\n  GET_ALL_SURVEYS,\n} from 'graphql/queries/all-queries';\nimport colors from 'global-styles';\nimport { generalErrorHandler } from 'utils/error-handler';\nimport globalMessages from 'messages';\nimport { formattedColumns as importedFC, generateColumns } from './helper';\nimport {\n  RecipientListStyle,\n  helperClasses,\n  recipientListStyles,\n} from './styles';\n\nfunction RecipientList({\n  intl,\n  localOrg,\n  details,\n  preSetFilterId,\n  preSetFilterName,\n  disableHeader,\n  ...rest\n}) {\n  const { lookUpBtn, exportBtn, newFamilyBtn } = helperClasses;\n  const {\n    title,\n    addRecipientName,\n    columns,\n    hierarchyId,\n    recipientDefintionUuid,\n    hasParentRecipient,\n    nestedRecipientTree,\n    childRoutes,\n  } = details;\n\n  const hasCompletedSurveys = Boolean(\n    columns.find(c => c.id === 'completedSurveys')\n  );\n\n  const defaultState = { query: null, chips: [] };\n  const classes = recipientListStyles();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedId, setSelectedId] = useState(0);\n  const [addView, setaddView] = useState(false);\n  const [selected, setSelected] = useState([]);\n  // TODO: Remove Hardcoded values\n  const [options, setOptions] = useState([\n    { name: intl.formatMessage(globalMessages.defaultView), id: 0 },\n    { name: 'Ahuachapan Quarterly Audit', id: 1 },\n    { name: 'Year-End Report', id: 2 },\n  ]);\n\n  const [rowsPerPage, setRowsPerPage] = useState(15);\n  const [orderBy, setOrderBy] = useState('updated_at');\n  const [order, setOrder] = useState('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [filteredResults, setFilteredResults] = useState(0);\n  const [tableSearch, setTableSearch] = useState('');\n  const [lastUpdate, setLastUpdate] = useState(defaultState);\n  const [dateRange, setDateRange] = useState({ before: null, after: null });\n  const [completedSurveys, setCompletedSurveys] = useState(defaultState);\n  const [parentRecipients, setParentRecipient] = useState(\n    !disableHeader\n      ? defaultState\n      : { query: [preSetFilterId], chips: [preSetFilterName] }\n  );\n\n  const columnsToUse = columns\n    .filter(c => {\n      if (!hasCompletedSurveys) {\n        return c.id !== 'completedSurveys';\n      }\n      return c;\n    })\n    .filter(c => {\n      if (!hasParentRecipient) {\n        return c.id !== 'parentRecipients';\n      }\n      return c;\n    })\n    .filter(c => {\n      if (hierarchyId === 0) {\n        return c.id !== 'childRecipients';\n      }\n      return c;\n    });\n\n  const customDate = lastUpdate.query === 'custom';\n  const userOrg = localOrg.uuid;\n\n  const { loading, error, data: recipientData } = useQuery(GET_RECIPIENTS, {\n    variables: {\n      resultsPerPage: rowsPerPage,\n      surveyUuids: completedSurveys.query,\n      parentUuids: parentRecipients.query,\n      skip: currentPage > 1 ? rowsPerPage * (currentPage - 1) : 0,\n      sortColumn: orderBy,\n      sortDirection: order,\n      nameContains: tableSearch,\n      internalIdContains: tableSearch,\n      organizationUuid: userOrg,\n      recipientDefinitionUuid: recipientDefintionUuid,\n      lastSyncedAt: customDate ? null : lastUpdate.query,\n      before: dateRange.before,\n      after: dateRange.after,\n    },\n    skip: customDate && dateRange.before === null && dateRange.after === null,\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    loading: allDataLoading,\n    error: allDataError,\n    data: allData,\n  } = useQuery(GET_ALL_RECIPIENTS, {\n    variables: {\n      sortColumn: orderBy,\n      sortDirection: order,\n      organizationUuid: userOrg,\n      recipientDefinitionUuid: recipientDefintionUuid,\n    },\n  });\n\n  const {\n    loading: allFilteredDataLoading,\n    error: allFilteredDataError,\n    data: allFilteredData,\n  } = useQuery(GET_ALL_FILTERED_RECIPIENTS, {\n    variables: {\n      surveyUuids: completedSurveys.query,\n      parentUuids: parentRecipients.query,\n      sortColumn: orderBy,\n      sortDirection: order,\n      nameContains: tableSearch,\n      internalIdContains: tableSearch,\n      organizationUuid: userOrg,\n      recipientDefinitionUuid: recipientDefintionUuid,\n      lastSyncedAt: customDate ? null : lastUpdate.query,\n      before: dateRange.before,\n      after: dateRange.after,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    loading: allSurveysLoading,\n    error: allSurveysError,\n    data: allSurveys,\n  } = useQuery(GET_ALL_SURVEYS, {\n    variables: { organizationUuid: userOrg },\n    skip: false,\n  });\n\n  useEffect(() => {\n    if (recipientData && Object.entries(recipientData).length > 0) {\n      const {\n        recipients,\n        _recipientsMetaData: { totalCount, totalPages: tp },\n      } = recipientData;\n\n      setFilteredResults(recipients.length);\n      setTotalResults(totalCount);\n      setTotalPages(tp);\n      if (totalCount === 0) {\n        setCurrentPage(1);\n      }\n    }\n  }, [recipientData, loading]);\n\n  if (error || allDataError || allFilteredDataError || allSurveysError) {\n    return generalErrorHandler(\n      error || allDataError || allFilteredDataError || allSurveysError,\n      {\n        ...rest,\n      }\n    );\n  }\n\n  const mapColumnIds = {\n    lastUpdate: 'updated_at',\n    id: 'internal_id',\n    recipientName: 'name',\n  };\n\n  const csvHeaders = columnsToUse.map(c => c.label);\n\n  const toolbarActions = [\n    {\n      title: intl.formatMessage(tableMessages.createSurvReq),\n      disable: allDataLoading,\n      handleClick: () => {\n        // TODO: Revisit\n        console.log('Creating Survey');\n      },\n    },\n    {\n      title: intl.formatMessage(tableMessages.export),\n      disable: allDataLoading,\n      handleClick: () => {\n        const dataToExport = selected.map(id =>\n          dataFormatter(allData.recipients, true).find(item => item.id === id)\n        );\n\n        handleExport(dataToExport);\n      },\n    },\n  ];\n\n  const formattedColumns = importedFC(classes, columnsToUse);\n\n  // const horizActions = [\n  //   {\n  //     route: '/survey-requests',\n  //     icon: Add,\n  //     text: intl.formatMessage(messages.surveyRequests),\n  //   },\n  //   {\n  //     route: '/survey-requests/edit',\n  //     icon: Edit,\n  //     text: intl.formatMessage(messages.editSurveyRequests),\n  //   },\n  //   {\n  //     route: '/update-status',\n  //     icon: ImportExport,\n  //     text: intl.formatMessage(messages.updateStatus),\n  //   },\n  // ];\n\n  const dateRangeFormat = `After ${moment(dateRange.after).format(\n    'MMM DD, YYYY'\n  )} - Before ${moment(dateRange.before).format('MMM DD, YYYY')}`;\n\n  const columnsData = generateColumns(\n    [\n      {\n        id: 'completedSurveys',\n        loading: allSurveysLoading,\n        list: (allSurveys.surveys || []).map(d => ({\n          id: d.uuid,\n          label: d.name,\n          count: d.submissionUuids.length,\n          selected: false,\n        })),\n        chips: completedSurveys.chips,\n        clear: () => setCompletedSurveys(defaultState),\n      },\n      {\n        id: 'parentRecipients',\n        loading: false,\n        list: nestedRecipientTree,\n        chips: parentRecipients.chips,\n        clear: () => setParentRecipient(defaultState),\n      },\n      {\n        id: 'lastUpdate',\n        chips: dateRange.before ? [dateRangeFormat] : lastUpdate.chips,\n        clear: () => {\n          setLastUpdate(defaultState);\n          setDateRange({ before: null, after: null });\n        },\n      },\n    ],\n    columnsToUse\n  );\n\n  function handleExport(dataToExport) {\n    const exportOptions = {\n      filename: `${title.replace(/ /g, '-')}-List`,\n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalSeparator: '.',\n      showLabels: true,\n      showTitle: false,\n      useTextFile: false,\n      useBom: true,\n      headers: csvHeaders,\n    };\n\n    const scrubbedData = dataToExport.map(d => {\n      delete d.uuid;\n      delete d.recipientPath;\n      return d;\n    });\n\n    const csvExporter = new ExportToCsv(exportOptions);\n    csvExporter.generateCsv(scrubbedData);\n  }\n\n  function handleBtnClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  function handleExited() {\n    setaddView(false);\n  }\n\n  function handleMenuItemClick(event, id) {\n    setSelectedId(id);\n    setAnchorEl(null);\n  }\n\n  function handleAddViewClick() {\n    setaddView(true);\n  }\n\n  function handleCancel() {\n    setaddView(false);\n  }\n\n  function handleAddViewDelete(e, id) {\n    e.stopPropagation();\n    // Reset the selected view to default if the view being deleted is selected\n    if (selectedId === id) {\n      setSelectedId(0);\n    }\n    setOptions(options.filter(option => option.id !== id));\n  }\n\n  function dataFormatter(dataToFormat, exportingData) {\n    return dataToFormat.map(\n      ({\n        children,\n        parent,\n        uuid,\n        internalId,\n        name,\n        submissionUuids,\n        updatedAt,\n      }) => {\n        const parentRecipientName = parent ? parent.name : null;\n\n        let tempObjStructure = {\n          recipientPath: childRoutes[0].path,\n          parentRecipients: parentRecipientName,\n          uuid,\n        };\n\n        const arr = [\n          name,\n          internalId,\n          submissionUuids.length,\n          children.length,\n          updatedAt,\n        ];\n\n        if (!hasCompletedSurveys) {\n          arr.splice(2, 1);\n        }\n\n        if (hierarchyId === 0) {\n          arr.splice(arr.length - 2, 1);\n        }\n\n        columnsToUse\n          .filter(c => !c.noColumn)\n          .map(({ id }) => id)\n          .forEach((c, idx) => {\n            tempObjStructure = {\n              ...tempObjStructure,\n              [c === 'uuid' ? 'id' : c]: arr[idx],\n            };\n          });\n\n        // Restructure Object for exporting\n        if (exportingData) {\n          let newObjStructure = {};\n\n          columnsToUse.forEach(c => {\n            newObjStructure = {\n              ...newObjStructure,\n              [c.id]: tempObjStructure[c.id],\n            };\n          });\n\n          return newObjStructure;\n        }\n        return tempObjStructure;\n      }\n    );\n  }\n\n  let filterTitles = {};\n\n  columnsToUse.forEach(f => {\n    if (f.filter) {\n      filterTitles = { ...filterTitles, [f.id]: f.label };\n    }\n  });\n\n  return (\n    <RecipientListStyle>\n      {!disableHeader && (\n        <>\n          <Grid\n            className={classes.recipientListHeader}\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <ViewHeader component={title} body={title} />\n            </Grid>\n            <Grid item>\n              <HeaderButton\n                version={4}\n                bgColor={colors.TEXT.medium}\n                padding={lookUpBtn.padding}\n                click={handleBtnClick}\n                menu={\n                  <TableViews\n                    anchorEl={anchorEl}\n                    addView={addView}\n                    options={options}\n                    selectedId={selectedId}\n                    handleClose={handleClose}\n                    handleExited={handleExited}\n                    handleCancel={handleCancel}\n                    handleMenuItemClick={handleMenuItemClick}\n                    handleAddViewDelete={handleAddViewDelete}\n                    handleAddViewClick={handleAddViewClick}\n                  />\n                }\n              >\n                <LookUp />\n              </HeaderButton>\n              <HeaderButton\n                version={1}\n                id=\"export-data\"\n                bgColor={colors.TEXT.medium}\n                padding={exportBtn.padding}\n                disabled={allDataLoading}\n                onClick={() =>\n                  handleExport(dataFormatter(allData.recipients, true))\n                }\n              >\n                <>\n                  <OpenInNew className={classes.exportBtn} />\n                  {intl.formatMessage(tableMessages.export)}\n                </>\n              </HeaderButton>\n              <HeaderButton\n                version={1}\n                bgColor={colors.LINKS.link}\n                padding={newFamilyBtn.padding}\n              >\n                <>\n                  <Add className={classes.newFamilyBtn} />\n                  {addRecipientName}\n                </>\n              </HeaderButton>\n            </Grid>\n          </Grid>\n          <Divider light />\n        </>\n      )}\n      <NSTable\n        arialLabels={{ checkboxes: 'select all recipients' }}\n        toolbarActions={toolbarActions}\n        name={`${title}Table`}\n        columns={columnsData}\n        horizActions={[]}\n        data={\n          !loading && recipientData\n            ? dataFormatter(recipientData.recipients)\n            : []\n        }\n        filiteredRecordsUuid={\n          allFilteredDataLoading\n            ? []\n            : allFilteredData.recipients.map(d => d.uuid)\n        }\n        rowsPerPageProps={{ rowsPerPage, setRowsPerPage }}\n        orderByProps={{ orderBy, setOrderBy }}\n        orderProps={{ order, setOrder }}\n        pageProps={{ currentPage, setCurrentPage }}\n        tableSearchProps={{ tableSearch, setTableSearch }}\n        lastUpdateProps={{ lastUpdate, setLastUpdate }}\n        dateRangeProps={{ dateRange, setDateRange }}\n        filterQueryTriggers={{\n          completedSurveys: setCompletedSurveys,\n          parentRecipients: setParentRecipient,\n        }}\n        totalResults={totalResults}\n        totalPages={totalPages}\n        loading={loading}\n        filteredResults={filteredResults}\n        mapColumnIds={mapColumnIds}\n        selected={selected}\n        setSelected={setSelected}\n        formattedColumns={formattedColumns}\n        filterTitles={filterTitles}\n        showCheckboxes\n        showTableSettings\n        enableSearch\n        enableFilters\n      />\n    </RecipientListStyle>\n  );\n}\nRecipientList.propTypes = {\n  intl: intlShape.isRequired,\n  localOrg: PropTypes.object.isRequired,\n  details: PropTypes.object.isRequired,\n  disableHeader: PropTypes.bool,\n};\n\nconst IntlRecipientList = injectIntl(RecipientList);\n\nconst mapStateToProps = createStructuredSelector({\n  localOrg: makeSelectOrg(),\n});\n\nexport default connect(mapStateToProps)(IntlRecipientList);\n"]},"metadata":{},"sourceType":"module"}