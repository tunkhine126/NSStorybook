{"ast":null,"code":"/**\n * i18n.js\n *\n * This will setup the i18n language files and locale data for your app.\n *\n *   IMPORTANT: This file is used by the internal build\n *   script `extract-intl`, and must use CommonJS module syntax\n *   You CANNOT use import/export in this file.\n */\nconst addLocaleData = require('react-intl').addLocaleData; //eslint-disable-line\n\n\nconst enLocaleData = require('react-intl/locale-data/en');\n\nconst esLocaleData = require('react-intl/locale-data/es');\n\nconst ptLocaleData = require('react-intl/locale-data/pt'); // Custom Locale-Data for Haitian / Creole (not supported by react-intl)\n\n\nconst htLocaleData = {\n  locale: 'ht',\n  pluralRuleFunction: (e, t) => t && e === 1 ? 'one' : 'other'\n};\n\nconst combineTranslationMessages = require('./translations/langs.json');\n\naddLocaleData(enLocaleData);\naddLocaleData(esLocaleData);\naddLocaleData(ptLocaleData);\naddLocaleData(htLocaleData);\nconst DEFAULT_LOCALE = 'en'; // prettier-ignore\n\nconst appLocales = ['en', 'es', 'pt', 'ht'];\n\nconst formatTranslationMessages = (locale, messages) => {\n  const defaultFormattedMessages = locale !== DEFAULT_LOCALE ? formatTranslationMessages(DEFAULT_LOCALE, combineTranslationMessages) : {};\n\n  const flattenFormattedMessages = (formattedMessages, key) => {\n    const formattedMessage = !messages[key] && locale !== DEFAULT_LOCALE ? defaultFormattedMessages[key] : messages[key];\n    return Object.assign(formattedMessages, {\n      [key]: formattedMessage[locale]\n    });\n  };\n\n  return Object.keys(messages).reduce(flattenFormattedMessages, {});\n};\n\nconst translationMessages = {\n  en: formatTranslationMessages('en', combineTranslationMessages),\n  es: formatTranslationMessages('es', combineTranslationMessages),\n  pt: formatTranslationMessages('pt', combineTranslationMessages),\n  ht: formatTranslationMessages('ht', combineTranslationMessages)\n};\nexports.appLocales = appLocales;\nexports.formatTranslationMessages = formatTranslationMessages;\nexports.translationMessages = translationMessages;\nexports.DEFAULT_LOCALE = DEFAULT_LOCALE;","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/i18n.js"],"names":["addLocaleData","require","enLocaleData","esLocaleData","ptLocaleData","htLocaleData","locale","pluralRuleFunction","e","t","combineTranslationMessages","DEFAULT_LOCALE","appLocales","formatTranslationMessages","messages","defaultFormattedMessages","flattenFormattedMessages","formattedMessages","key","formattedMessage","Object","assign","keys","reduce","translationMessages","en","es","pt","ht","exports"],"mappings":"AAAA;;;;;;;;;AASA,MAAMA,aAAa,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,aAA5C,C,CAA2D;;;AAC3D,MAAME,YAAY,GAAGD,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,2BAAD,CAA5B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,2BAAD,CAA5B,C,CAEA;;;AACA,MAAMI,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,IADW;AAEnBC,EAAAA,kBAAkB,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAWA,CAAC,IAAID,CAAC,KAAK,CAAX,GAAe,KAAf,GAAuB;AAFnC,CAArB;;AAKA,MAAME,0BAA0B,GAAGT,OAAO,CAAC,2BAAD,CAA1C;;AAEAD,aAAa,CAACE,YAAD,CAAb;AACAF,aAAa,CAACG,YAAD,CAAb;AACAH,aAAa,CAACI,YAAD,CAAb;AACAJ,aAAa,CAACK,YAAD,CAAb;AAEA,MAAMM,cAAc,GAAG,IAAvB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,CACjB,IADiB,EAEjB,IAFiB,EAGjB,IAHiB,EAIjB,IAJiB,CAAnB;;AAOA,MAAMC,yBAAyB,GAAG,CAACP,MAAD,EAASQ,QAAT,KAAsB;AACtD,QAAMC,wBAAwB,GAC5BT,MAAM,KAAKK,cAAX,GACIE,yBAAyB,CAACF,cAAD,EAAiBD,0BAAjB,CAD7B,GAEI,EAHN;;AAKA,QAAMM,wBAAwB,GAAG,CAACC,iBAAD,EAAoBC,GAApB,KAA4B;AAC3D,UAAMC,gBAAgB,GACpB,CAACL,QAAQ,CAACI,GAAD,CAAT,IAAkBZ,MAAM,KAAKK,cAA7B,GACII,wBAAwB,CAACG,GAAD,CAD5B,GAEIJ,QAAQ,CAACI,GAAD,CAHd;AAIA,WAAOE,MAAM,CAACC,MAAP,CAAcJ,iBAAd,EAAiC;AACtC,OAACC,GAAD,GAAOC,gBAAgB,CAACb,MAAD;AADe,KAAjC,CAAP;AAGD,GARD;;AASA,SAAOc,MAAM,CAACE,IAAP,CAAYR,QAAZ,EAAsBS,MAAtB,CAA6BP,wBAA7B,EAAuD,EAAvD,CAAP;AACD,CAhBD;;AAkBA,MAAMQ,mBAAmB,GAAG;AAC1BC,EAAAA,EAAE,EAAEZ,yBAAyB,CAAC,IAAD,EAAOH,0BAAP,CADH;AAE1BgB,EAAAA,EAAE,EAAEb,yBAAyB,CAAC,IAAD,EAAOH,0BAAP,CAFH;AAG1BiB,EAAAA,EAAE,EAAEd,yBAAyB,CAAC,IAAD,EAAOH,0BAAP,CAHH;AAI1BkB,EAAAA,EAAE,EAAEf,yBAAyB,CAAC,IAAD,EAAOH,0BAAP;AAJH,CAA5B;AAOAmB,OAAO,CAACjB,UAAR,GAAqBA,UAArB;AACAiB,OAAO,CAAChB,yBAAR,GAAoCA,yBAApC;AACAgB,OAAO,CAACL,mBAAR,GAA8BA,mBAA9B;AACAK,OAAO,CAAClB,cAAR,GAAyBA,cAAzB","sourcesContent":["/**\n * i18n.js\n *\n * This will setup the i18n language files and locale data for your app.\n *\n *   IMPORTANT: This file is used by the internal build\n *   script `extract-intl`, and must use CommonJS module syntax\n *   You CANNOT use import/export in this file.\n */\nconst addLocaleData = require('react-intl').addLocaleData; //eslint-disable-line\nconst enLocaleData = require('react-intl/locale-data/en');\nconst esLocaleData = require('react-intl/locale-data/es');\nconst ptLocaleData = require('react-intl/locale-data/pt');\n\n// Custom Locale-Data for Haitian / Creole (not supported by react-intl)\nconst htLocaleData = {\n  locale: 'ht',\n  pluralRuleFunction: (e, t) => (t && e === 1 ? 'one' : 'other'),\n};\n\nconst combineTranslationMessages = require('./translations/langs.json');\n\naddLocaleData(enLocaleData);\naddLocaleData(esLocaleData);\naddLocaleData(ptLocaleData);\naddLocaleData(htLocaleData);\n\nconst DEFAULT_LOCALE = 'en';\n\n// prettier-ignore\nconst appLocales = [\n  'en',\n  'es',\n  'pt',\n  'ht'\n];\n\nconst formatTranslationMessages = (locale, messages) => {\n  const defaultFormattedMessages =\n    locale !== DEFAULT_LOCALE\n      ? formatTranslationMessages(DEFAULT_LOCALE, combineTranslationMessages)\n      : {};\n\n  const flattenFormattedMessages = (formattedMessages, key) => {\n    const formattedMessage =\n      !messages[key] && locale !== DEFAULT_LOCALE\n        ? defaultFormattedMessages[key]\n        : messages[key];\n    return Object.assign(formattedMessages, {\n      [key]: formattedMessage[locale],\n    });\n  };\n  return Object.keys(messages).reduce(flattenFormattedMessages, {});\n};\n\nconst translationMessages = {\n  en: formatTranslationMessages('en', combineTranslationMessages),\n  es: formatTranslationMessages('es', combineTranslationMessages),\n  pt: formatTranslationMessages('pt', combineTranslationMessages),\n  ht: formatTranslationMessages('ht', combineTranslationMessages),\n};\n\nexports.appLocales = appLocales;\nexports.formatTranslationMessages = formatTranslationMessages;\nexports.translationMessages = translationMessages;\nexports.DEFAULT_LOCALE = DEFAULT_LOCALE;\n"]},"metadata":{},"sourceType":"module"}