{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/RecipientView/Widget/switchMode.js\";\n\n/**\n *\n * SwitchMode\n *\n */\nimport React, { useState, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'informed';\nimport moment from 'moment';\nimport { injectIntl, intlShape } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport NSButton from 'components/shared/NSButton';\nimport TextLink from 'components/shared/TextLink';\nimport globalMessages from 'messages';\nimport { RecipientViewContext } from '../context';\nimport { SwithModeStyle } from '../../styles';\nimport ColumnContent from './columnContent';\nimport { FieldsContext } from '../context/fields';\n\nfunction SwitchMode({\n  intl,\n  element,\n  label,\n  content,\n  classes,\n  currentField,\n  fieldType,\n  rData,\n  field,\n  uuid,\n  handleDateTimeChange,\n  handleOptionChange,\n  updateRecipient\n}) {\n  const localClasses = SwithModeStyle();\n  const [editMode, setEditMode] = useState(false);\n  const formApiRef = useRef();\n  const formattedName = label.toLowerCase().replace(/ /g, '');\n  const {\n    toasterProps: {\n      setToaster\n    },\n    saveProps: {\n      setSaveState\n    }\n  } = useContext(RecipientViewContext);\n  const {\n    recipientPhotoProps: {\n      recipientPhoto\n    }\n  } = useContext(FieldsContext);\n  const [localChildData, setLocalChildData] = useState(rData);\n\n  const localOptionChange = (value, fieldToChange) => {\n    setLocalChildData(state => _objectSpread({}, state, {\n      currentValue: _objectSpread({}, state.currentValue, {\n        [fieldToChange]: {\n          item: value\n        }\n      })\n    }));\n  };\n\n  const responseHandler = (response, fieldToSubmit) => {\n    if (response.data) {\n      let undoSettings; // Open Toaster\n\n      if (field.field_type === 'photo') {\n        undoSettings = () => handleSave(_objectSpread({}, rData.photos), true);\n      } else if (field.field_type === 'time') {\n        undoSettings = () => handleSave({\n          [currentField]: rData.times[field.name]\n        });\n      } else if (field.field_type === 'multi_select') {\n        undoSettings = () => handleSave({\n          [currentField]: rData.currentValue[currentField].item\n        });\n      } else {\n        undoSettings = () => handleSave({\n          [currentField]: content\n        });\n      }\n\n      setToaster({\n        show: true,\n        recipientUuid: uuid,\n        field: currentField,\n        undoHandler: () => undoSettings()\n      });\n\n      if (field.field_type === 'date') {\n        if (moment(fieldToSubmit[currentField]).isValid()) {\n          handleDateTimeChange(moment(fieldToSubmit[currentField]).format('YYYY-MM-DD'), field.name, 'dates');\n        } else {\n          handleDateTimeChange(null, field.name, 'dates');\n        }\n      }\n\n      if (field.field_type === 'time') {\n        if (fieldToSubmit[currentField]) {\n          handleDateTimeChange(moment(new Date(fieldToSubmit[currentField])).toLocaleString(), field.name, 'times');\n        } else {\n          handleDateTimeChange(null, field.name, 'times');\n        }\n      }\n\n      if (field.field_type === 'single_select' || field.field_type === 'multi_select' || field.field_type === 'likert') {\n        handleOptionChange(fieldToSubmit[currentField], currentField);\n      }\n    }\n  };\n\n  const handleSave = async (data, undoPhoto) => {\n    // convert empty strings to null\n    let mergedData;\n\n    const scrubbedData = _objectSpread({}, data);\n\n    const entries = Object.entries(data);\n    entries.forEach(e => {\n      if (e[1] === '' || e[1] === 'Invalid date') {\n        scrubbedData[e[0]] = null;\n      } else if (fieldType === 'time' && !data[e[0]]) {\n        scrubbedData[e[0]] = '';\n      } else {\n        scrubbedData[e[0]] = data[e[0]];\n      }\n    });\n\n    if (!scrubbedData[currentField]) {\n      scrubbedData[currentField] = null;\n    }\n\n    if (undoPhoto) {\n      mergedData = _objectSpread({}, data);\n    } else {\n      mergedData = _objectSpread({}, scrubbedData, {}, recipientPhoto);\n    }\n\n    const fieldToSubmit = {\n      [currentField]: mergedData[currentField]\n    }; // START LOADING\n\n    setSaveState({\n      isLoading: true,\n      recipientUuid: uuid,\n      field: currentField\n    });\n\n    try {\n      const response = await updateRecipient({\n        variables: {\n          uuid,\n          customFields: JSON.stringify(fieldToSubmit)\n        }\n      });\n      responseHandler(response, fieldToSubmit);\n    } catch (error) {\n      console.log('ERROR', error);\n    } // STOP LOADING\n\n\n    setSaveState({\n      isLoading: false,\n      recipientUuid: null,\n      field: null\n    });\n  };\n\n  return React.createElement(\"span\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, editMode ? React.createElement(Form, {\n    getApi: formApi => {\n      formApiRef.current = formApi;\n    },\n    id: `${formattedName}-form`,\n    onSubmit: d => {\n      setEditMode(false);\n      handleSave(d);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: localClasses.formContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, field.field_type === 'single_select' || field.field_type === 'multi_select' || field.field_type === 'likert' ? element(localChildData, localOptionChange) : element, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(TextLink, {\n    className: \"edit-cancel-btn\",\n    content: intl.formatMessage(globalMessages.cancel),\n    onClick: () => setEditMode(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), React.createElement(NSButton, {\n    componentClasses: \"edit-save-btn\",\n    id: \"save-button\",\n    type: \"submit\",\n    version: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, intl.formatMessage(globalMessages.save))))) : React.createElement(ColumnContent, {\n    customClasses: \"recipient-column\",\n    header: label,\n    handleEditMode: setEditMode,\n    recipientUuid: uuid,\n    field: currentField,\n    data: content || '',\n    dynamic: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }));\n}\n\nSwitchMode.displayName = \"SwitchMode\";\nSwitchMode.propTypes = {\n  intl: intlShape.isRequired,\n  element: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,\n  label: PropTypes.string.isRequired,\n  currentField: PropTypes.string.isRequired,\n  rData: PropTypes.any.isRequired,\n  field: PropTypes.object.isRequired,\n  uuid: PropTypes.string,\n  handleDateTimeChange: PropTypes.func.isRequired,\n  handleOptionChange: PropTypes.func.isRequired,\n  updateRecipient: PropTypes.func.isRequired,\n  content: PropTypes.any,\n  classes: PropTypes.string,\n  fieldType: PropTypes.string\n};\nconst intlSwitchMode = injectIntl(SwitchMode);\nexport default intlSwitchMode;\nSwitchMode.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"SwitchMode\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"element\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"element\"\n        }, {\n          \"name\": \"func\"\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"currentField\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"rData\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"field\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"uuid\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handleDateTimeChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handleOptionChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"updateRecipient\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"content\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"classes\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"fieldType\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/RecipientList/RecipientView/Widget/switchMode.js\"] = {\n    name: \"SwitchMode\",\n    docgenInfo: SwitchMode.__docgenInfo,\n    path: \"src/components/RecipientList/RecipientView/Widget/switchMode.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/RecipientView/Widget/switchMode.js"],"names":["React","useState","useRef","useContext","PropTypes","Form","moment","injectIntl","intlShape","Grid","NSButton","TextLink","globalMessages","RecipientViewContext","SwithModeStyle","ColumnContent","FieldsContext","SwitchMode","intl","element","label","content","classes","currentField","fieldType","rData","field","uuid","handleDateTimeChange","handleOptionChange","updateRecipient","localClasses","editMode","setEditMode","formApiRef","formattedName","toLowerCase","replace","toasterProps","setToaster","saveProps","setSaveState","recipientPhotoProps","recipientPhoto","localChildData","setLocalChildData","localOptionChange","value","fieldToChange","state","currentValue","item","responseHandler","response","fieldToSubmit","data","undoSettings","field_type","handleSave","photos","times","name","show","recipientUuid","undoHandler","isValid","format","Date","toLocaleString","undoPhoto","mergedData","scrubbedData","entries","Object","forEach","e","isLoading","variables","customFields","JSON","stringify","error","console","log","formApi","current","d","formContent","formatMessage","cancel","save","propTypes","isRequired","oneOfType","func","string","any","object","intlSwitchMode"],"mappings":";;;;;AAAA;;;;;AAMA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,UAAlC,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,YAAtC;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,cAAP,MAA2B,UAA3B;AACA,SAASC,oBAAT,QAAqC,YAArC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,aAAT,QAA8B,mBAA9B;;AAEA,SAASC,UAAT,CAAoB;AAClBC,EAAAA,IADkB;AAElBC,EAAAA,OAFkB;AAGlBC,EAAAA,KAHkB;AAIlBC,EAAAA,OAJkB;AAKlBC,EAAAA,OALkB;AAMlBC,EAAAA,YANkB;AAOlBC,EAAAA,SAPkB;AAQlBC,EAAAA,KARkB;AASlBC,EAAAA,KATkB;AAUlBC,EAAAA,IAVkB;AAWlBC,EAAAA,oBAXkB;AAYlBC,EAAAA,kBAZkB;AAalBC,EAAAA;AAbkB,CAApB,EAcG;AACD,QAAMC,YAAY,GAAGjB,cAAc,EAAnC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMiC,UAAU,GAAGhC,MAAM,EAAzB;AACA,QAAMiC,aAAa,GAAGf,KAAK,CAACgB,WAAN,GAAoBC,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,CAAtB;AACA,QAAM;AACJC,IAAAA,YAAY,EAAE;AAAEC,MAAAA;AAAF,KADV;AAEJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAFP,MAGFtC,UAAU,CAACU,oBAAD,CAHd;AAIA,QAAM;AACJ6B,IAAAA,mBAAmB,EAAE;AAAEC,MAAAA;AAAF;AADjB,MAEFxC,UAAU,CAACa,aAAD,CAFd;AAIA,QAAM,CAAC4B,cAAD,EAAiBC,iBAAjB,IAAsC5C,QAAQ,CAACwB,KAAD,CAApD;;AAEA,QAAMqB,iBAAiB,GAAG,CAACC,KAAD,EAAQC,aAAR,KAA0B;AAClDH,IAAAA,iBAAiB,CAACI,KAAK,sBAClBA,KADkB;AAErBC,MAAAA,YAAY,oBACPD,KAAK,CAACC,YADC;AAEV,SAACF,aAAD,GAAiB;AAAEG,UAAAA,IAAI,EAAEJ;AAAR;AAFP;AAFS,MAAN,CAAjB;AAOD,GARD;;AAUA,QAAMK,eAAe,GAAG,CAACC,QAAD,EAAWC,aAAX,KAA6B;AACnD,QAAID,QAAQ,CAACE,IAAb,EAAmB;AACjB,UAAIC,YAAJ,CADiB,CAEjB;;AACA,UAAI9B,KAAK,CAAC+B,UAAN,KAAqB,OAAzB,EAAkC;AAChCD,QAAAA,YAAY,GAAG,MAAME,UAAU,mBAAMjC,KAAK,CAACkC,MAAZ,GAAsB,IAAtB,CAA/B;AACD,OAFD,MAEO,IAAIjC,KAAK,CAAC+B,UAAN,KAAqB,MAAzB,EAAiC;AACtCD,QAAAA,YAAY,GAAG,MACbE,UAAU,CAAC;AACT,WAACnC,YAAD,GAAgBE,KAAK,CAACmC,KAAN,CAAYlC,KAAK,CAACmC,IAAlB;AADP,SAAD,CADZ;AAID,OALM,MAKA,IAAInC,KAAK,CAAC+B,UAAN,KAAqB,cAAzB,EAAyC;AAC9CD,QAAAA,YAAY,GAAG,MACbE,UAAU,CAAC;AACT,WAACnC,YAAD,GAAgBE,KAAK,CAACyB,YAAN,CAAmB3B,YAAnB,EAAiC4B;AADxC,SAAD,CADZ;AAID,OALM,MAKA;AACLK,QAAAA,YAAY,GAAG,MAAME,UAAU,CAAC;AAAE,WAACnC,YAAD,GAAgBF;AAAlB,SAAD,CAA/B;AACD;;AAEDkB,MAAAA,UAAU,CAAC;AACTuB,QAAAA,IAAI,EAAE,IADG;AAETC,QAAAA,aAAa,EAAEpC,IAFN;AAGTD,QAAAA,KAAK,EAAEH,YAHE;AAITyC,QAAAA,WAAW,EAAE,MAAMR,YAAY;AAJtB,OAAD,CAAV;;AAOA,UAAI9B,KAAK,CAAC+B,UAAN,KAAqB,MAAzB,EAAiC;AAC/B,YAAInD,MAAM,CAACgD,aAAa,CAAC/B,YAAD,CAAd,CAAN,CAAoC0C,OAApC,EAAJ,EAAmD;AACjDrC,UAAAA,oBAAoB,CAClBtB,MAAM,CAACgD,aAAa,CAAC/B,YAAD,CAAd,CAAN,CAAoC2C,MAApC,CAA2C,YAA3C,CADkB,EAElBxC,KAAK,CAACmC,IAFY,EAGlB,OAHkB,CAApB;AAKD,SAND,MAMO;AACLjC,UAAAA,oBAAoB,CAAC,IAAD,EAAOF,KAAK,CAACmC,IAAb,EAAmB,OAAnB,CAApB;AACD;AACF;;AAED,UAAInC,KAAK,CAAC+B,UAAN,KAAqB,MAAzB,EAAiC;AAC/B,YAAIH,aAAa,CAAC/B,YAAD,CAAjB,EAAiC;AAC/BK,UAAAA,oBAAoB,CAClBtB,MAAM,CAAC,IAAI6D,IAAJ,CAASb,aAAa,CAAC/B,YAAD,CAAtB,CAAD,CAAN,CAA8C6C,cAA9C,EADkB,EAElB1C,KAAK,CAACmC,IAFY,EAGlB,OAHkB,CAApB;AAKD,SAND,MAMO;AACLjC,UAAAA,oBAAoB,CAAC,IAAD,EAAOF,KAAK,CAACmC,IAAb,EAAmB,OAAnB,CAApB;AACD;AACF;;AAED,UACEnC,KAAK,CAAC+B,UAAN,KAAqB,eAArB,IACA/B,KAAK,CAAC+B,UAAN,KAAqB,cADrB,IAEA/B,KAAK,CAAC+B,UAAN,KAAqB,QAHvB,EAIE;AACA5B,QAAAA,kBAAkB,CAACyB,aAAa,CAAC/B,YAAD,CAAd,EAA8BA,YAA9B,CAAlB;AACD;AACF;AACF,GA3DD;;AA6DA,QAAMmC,UAAU,GAAG,OAAOH,IAAP,EAAac,SAAb,KAA2B;AAC5C;AACA,QAAIC,UAAJ;;AACA,UAAMC,YAAY,qBAAQhB,IAAR,CAAlB;;AACA,UAAMiB,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAejB,IAAf,CAAhB;AAEAiB,IAAAA,OAAO,CAACE,OAAR,CAAgBC,CAAC,IAAI;AACnB,UAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,EAAT,IAAeA,CAAC,CAAC,CAAD,CAAD,KAAS,cAA5B,EAA4C;AAC1CJ,QAAAA,YAAY,CAACI,CAAC,CAAC,CAAD,CAAF,CAAZ,GAAqB,IAArB;AACD,OAFD,MAEO,IAAInD,SAAS,KAAK,MAAd,IAAwB,CAAC+B,IAAI,CAACoB,CAAC,CAAC,CAAD,CAAF,CAAjC,EAAyC;AAC9CJ,QAAAA,YAAY,CAACI,CAAC,CAAC,CAAD,CAAF,CAAZ,GAAqB,EAArB;AACD,OAFM,MAEA;AACLJ,QAAAA,YAAY,CAACI,CAAC,CAAC,CAAD,CAAF,CAAZ,GAAqBpB,IAAI,CAACoB,CAAC,CAAC,CAAD,CAAF,CAAzB;AACD;AACF,KARD;;AAUA,QAAI,CAACJ,YAAY,CAAChD,YAAD,CAAjB,EAAiC;AAC/BgD,MAAAA,YAAY,CAAChD,YAAD,CAAZ,GAA6B,IAA7B;AACD;;AAED,QAAI8C,SAAJ,EAAe;AACbC,MAAAA,UAAU,qBAAQf,IAAR,CAAV;AACD,KAFD,MAEO;AACLe,MAAAA,UAAU,qBAAQC,YAAR,MAAyB5B,cAAzB,CAAV;AACD;;AAED,UAAMW,aAAa,GAAG;AAAE,OAAC/B,YAAD,GAAgB+C,UAAU,CAAC/C,YAAD;AAA5B,KAAtB,CA1B4C,CA4B5C;;AACAkB,IAAAA,YAAY,CAAC;AACXmC,MAAAA,SAAS,EAAE,IADA;AAEXb,MAAAA,aAAa,EAAEpC,IAFJ;AAGXD,MAAAA,KAAK,EAAEH;AAHI,KAAD,CAAZ;;AAMA,QAAI;AACF,YAAM8B,QAAQ,GAAG,MAAMvB,eAAe,CAAC;AACrC+C,QAAAA,SAAS,EAAE;AACTlD,UAAAA,IADS;AAETmD,UAAAA,YAAY,EAAEC,IAAI,CAACC,SAAL,CAAe1B,aAAf;AAFL;AAD0B,OAAD,CAAtC;AAOAF,MAAAA,eAAe,CAACC,QAAD,EAAWC,aAAX,CAAf;AACD,KATD,CASE,OAAO2B,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD,KA9C2C,CA+C5C;;;AACAxC,IAAAA,YAAY,CAAC;AAAEmC,MAAAA,SAAS,EAAE,KAAb;AAAoBb,MAAAA,aAAa,EAAE,IAAnC;AAAyCrC,MAAAA,KAAK,EAAE;AAAhD,KAAD,CAAZ;AACD,GAjDD;;AAmDA,SACE;AAAM,IAAA,SAAS,EAAEJ,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,QAAQ,GACP,oBAAC,IAAD;AACE,IAAA,MAAM,EAAEoD,OAAO,IAAI;AACjBlD,MAAAA,UAAU,CAACmD,OAAX,GAAqBD,OAArB;AACD,KAHH;AAIE,IAAA,EAAE,EAAG,GAAEjD,aAAc,OAJvB;AAKE,IAAA,QAAQ,EAAEmD,CAAC,IAAI;AACbrD,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAyB,MAAAA,UAAU,CAAC4B,CAAD,CAAV;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE;AAAK,IAAA,SAAS,EAAEvD,YAAY,CAACwD,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG7D,KAAK,CAAC+B,UAAN,KAAqB,eAArB,IACD/B,KAAK,CAAC+B,UAAN,KAAqB,cADpB,IAED/B,KAAK,CAAC+B,UAAN,KAAqB,QAFpB,GAGGtC,OAAO,CAACyB,cAAD,EAAiBE,iBAAjB,CAHV,GAIG3B,OALN,EAME,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,UAAU,EAAC,QAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,QAAD;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,OAAO,EAAED,IAAI,CAACsE,aAAL,CAAmB5E,cAAc,CAAC6E,MAAlC,CAFX;AAGE,IAAA,OAAO,EAAE,MAAMxD,WAAW,CAAC,KAAD,CAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAWE,oBAAC,QAAD;AACE,IAAA,gBAAgB,EAAC,eADnB;AAEE,IAAA,EAAE,EAAC,aAFL;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,OAAO,EAAE,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGf,IAAI,CAACsE,aAAL,CAAmB5E,cAAc,CAAC8E,IAAlC,CANH,CAXF,CANF,CAVF,CADO,GAwCP,oBAAC,aAAD;AACE,IAAA,aAAa,EAAC,kBADhB;AAEE,IAAA,MAAM,EAAEtE,KAFV;AAGE,IAAA,cAAc,EAAEa,WAHlB;AAIE,IAAA,aAAa,EAAEN,IAJjB;AAKE,IAAA,KAAK,EAAEJ,YALT;AAME,IAAA,IAAI,EAAEF,OAAO,IAAI,EANnB;AAOE,IAAA,OAAO,MAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzCJ,CADF;AAsDD;;AA7MQJ,U;AA+MTA,UAAU,CAAC0E,SAAX,GAAuB;AACrBzE,EAAAA,IAAI,EAAEV,SAAS,CAACoF,UADK;AAErBzE,EAAAA,OAAO,EAAEf,SAAS,CAACyF,SAAV,CAAoB,CAACzF,SAAS,CAACe,OAAX,EAAoBf,SAAS,CAAC0F,IAA9B,CAApB,EAAyDF,UAF7C;AAGrBxE,EAAAA,KAAK,EAAEhB,SAAS,CAAC2F,MAAV,CAAiBH,UAHH;AAIrBrE,EAAAA,YAAY,EAAEnB,SAAS,CAAC2F,MAAV,CAAiBH,UAJV;AAKrBnE,EAAAA,KAAK,EAAErB,SAAS,CAAC4F,GAAV,CAAcJ,UALA;AAMrBlE,EAAAA,KAAK,EAAEtB,SAAS,CAAC6F,MAAV,CAAiBL,UANH;AAOrBjE,EAAAA,IAAI,EAAEvB,SAAS,CAAC2F,MAPK;AAQrBnE,EAAAA,oBAAoB,EAAExB,SAAS,CAAC0F,IAAV,CAAeF,UARhB;AASrB/D,EAAAA,kBAAkB,EAAEzB,SAAS,CAAC0F,IAAV,CAAeF,UATd;AAUrB9D,EAAAA,eAAe,EAAE1B,SAAS,CAAC0F,IAAV,CAAeF,UAVX;AAWrBvE,EAAAA,OAAO,EAAEjB,SAAS,CAAC4F,GAXE;AAYrB1E,EAAAA,OAAO,EAAElB,SAAS,CAAC2F,MAZE;AAarBvE,EAAAA,SAAS,EAAEpB,SAAS,CAAC2F;AAbA,CAAvB;AAgBA,MAAMG,cAAc,GAAG3F,UAAU,CAACU,UAAD,CAAjC;AAEA,eAAeiF,cAAf","sourcesContent":["/**\n *\n * SwitchMode\n *\n */\n\nimport React, { useState, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'informed';\nimport moment from 'moment';\nimport { injectIntl, intlShape } from 'react-intl';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport NSButton from 'components/shared/NSButton';\nimport TextLink from 'components/shared/TextLink';\nimport globalMessages from 'messages';\nimport { RecipientViewContext } from '../context';\nimport { SwithModeStyle } from '../../styles';\nimport ColumnContent from './columnContent';\nimport { FieldsContext } from '../context/fields';\n\nfunction SwitchMode({\n  intl,\n  element,\n  label,\n  content,\n  classes,\n  currentField,\n  fieldType,\n  rData,\n  field,\n  uuid,\n  handleDateTimeChange,\n  handleOptionChange,\n  updateRecipient,\n}) {\n  const localClasses = SwithModeStyle();\n  const [editMode, setEditMode] = useState(false);\n  const formApiRef = useRef();\n  const formattedName = label.toLowerCase().replace(/ /g, '');\n  const {\n    toasterProps: { setToaster },\n    saveProps: { setSaveState },\n  } = useContext(RecipientViewContext);\n  const {\n    recipientPhotoProps: { recipientPhoto },\n  } = useContext(FieldsContext);\n\n  const [localChildData, setLocalChildData] = useState(rData);\n\n  const localOptionChange = (value, fieldToChange) => {\n    setLocalChildData(state => ({\n      ...state,\n      currentValue: {\n        ...state.currentValue,\n        [fieldToChange]: { item: value },\n      },\n    }));\n  };\n\n  const responseHandler = (response, fieldToSubmit) => {\n    if (response.data) {\n      let undoSettings;\n      // Open Toaster\n      if (field.field_type === 'photo') {\n        undoSettings = () => handleSave({ ...rData.photos }, true);\n      } else if (field.field_type === 'time') {\n        undoSettings = () =>\n          handleSave({\n            [currentField]: rData.times[field.name],\n          });\n      } else if (field.field_type === 'multi_select') {\n        undoSettings = () =>\n          handleSave({\n            [currentField]: rData.currentValue[currentField].item,\n          });\n      } else {\n        undoSettings = () => handleSave({ [currentField]: content });\n      }\n\n      setToaster({\n        show: true,\n        recipientUuid: uuid,\n        field: currentField,\n        undoHandler: () => undoSettings(),\n      });\n\n      if (field.field_type === 'date') {\n        if (moment(fieldToSubmit[currentField]).isValid()) {\n          handleDateTimeChange(\n            moment(fieldToSubmit[currentField]).format('YYYY-MM-DD'),\n            field.name,\n            'dates'\n          );\n        } else {\n          handleDateTimeChange(null, field.name, 'dates');\n        }\n      }\n\n      if (field.field_type === 'time') {\n        if (fieldToSubmit[currentField]) {\n          handleDateTimeChange(\n            moment(new Date(fieldToSubmit[currentField])).toLocaleString(),\n            field.name,\n            'times'\n          );\n        } else {\n          handleDateTimeChange(null, field.name, 'times');\n        }\n      }\n\n      if (\n        field.field_type === 'single_select' ||\n        field.field_type === 'multi_select' ||\n        field.field_type === 'likert'\n      ) {\n        handleOptionChange(fieldToSubmit[currentField], currentField);\n      }\n    }\n  };\n\n  const handleSave = async (data, undoPhoto) => {\n    // convert empty strings to null\n    let mergedData;\n    const scrubbedData = { ...data };\n    const entries = Object.entries(data);\n\n    entries.forEach(e => {\n      if (e[1] === '' || e[1] === 'Invalid date') {\n        scrubbedData[e[0]] = null;\n      } else if (fieldType === 'time' && !data[e[0]]) {\n        scrubbedData[e[0]] = '';\n      } else {\n        scrubbedData[e[0]] = data[e[0]];\n      }\n    });\n\n    if (!scrubbedData[currentField]) {\n      scrubbedData[currentField] = null;\n    }\n\n    if (undoPhoto) {\n      mergedData = { ...data };\n    } else {\n      mergedData = { ...scrubbedData, ...recipientPhoto };\n    }\n\n    const fieldToSubmit = { [currentField]: mergedData[currentField] };\n\n    // START LOADING\n    setSaveState({\n      isLoading: true,\n      recipientUuid: uuid,\n      field: currentField,\n    });\n\n    try {\n      const response = await updateRecipient({\n        variables: {\n          uuid,\n          customFields: JSON.stringify(fieldToSubmit),\n        },\n      });\n\n      responseHandler(response, fieldToSubmit);\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n    // STOP LOADING\n    setSaveState({ isLoading: false, recipientUuid: null, field: null });\n  };\n\n  return (\n    <span className={classes}>\n      {editMode ? (\n        <Form\n          getApi={formApi => {\n            formApiRef.current = formApi;\n          }}\n          id={`${formattedName}-form`}\n          onSubmit={d => {\n            setEditMode(false);\n            handleSave(d);\n          }}\n        >\n          <div className={localClasses.formContent}>\n            {field.field_type === 'single_select' ||\n            field.field_type === 'multi_select' ||\n            field.field_type === 'likert'\n              ? element(localChildData, localOptionChange)\n              : element}\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-end\"\n              alignItems=\"center\"\n            >\n              <TextLink\n                className=\"edit-cancel-btn\"\n                content={intl.formatMessage(globalMessages.cancel)}\n                onClick={() => setEditMode(false)}\n              />\n              <NSButton\n                componentClasses=\"edit-save-btn\"\n                id=\"save-button\"\n                type=\"submit\"\n                version={2}\n              >\n                {intl.formatMessage(globalMessages.save)}\n              </NSButton>\n            </Grid>\n          </div>\n        </Form>\n      ) : (\n        <ColumnContent\n          customClasses=\"recipient-column\"\n          header={label}\n          handleEditMode={setEditMode}\n          recipientUuid={uuid}\n          field={currentField}\n          data={content || ''}\n          dynamic\n        />\n      )}\n    </span>\n  );\n}\n\nSwitchMode.propTypes = {\n  intl: intlShape.isRequired,\n  element: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,\n  label: PropTypes.string.isRequired,\n  currentField: PropTypes.string.isRequired,\n  rData: PropTypes.any.isRequired,\n  field: PropTypes.object.isRequired,\n  uuid: PropTypes.string,\n  handleDateTimeChange: PropTypes.func.isRequired,\n  handleOptionChange: PropTypes.func.isRequired,\n  updateRecipient: PropTypes.func.isRequired,\n  content: PropTypes.any,\n  classes: PropTypes.string,\n  fieldType: PropTypes.string,\n};\n\nconst intlSwitchMode = injectIntl(SwitchMode);\n\nexport default intlSwitchMode;\n"]},"metadata":{},"sourceType":"module"}