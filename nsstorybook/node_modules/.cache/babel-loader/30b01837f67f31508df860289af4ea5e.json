{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\n\n/**\n * Create the store with dynamic reducers\n */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {}; // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n\n  /* istanbul ignore next */\n\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}); // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n\n    /* eslint-enable */\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions); // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n  const enhancers = [applyMiddleware(...middlewares)];\n  const store = createStore(createReducer(), initialState, composeEnhancers(...enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n\n  /* istanbul ignore next */\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/utils/configureStore.js"],"names":["createStore","applyMiddleware","compose","routerMiddleware","createSagaMiddleware","createReducer","configureStore","initialState","history","composeEnhancers","reduxSagaMonitorOptions","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleware","middlewares","enhancers","store","runSaga","run","injectedReducers","injectedSagas","module","hot","accept","replaceReducer"],"mappings":";;AAAA;;;AAIA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,aAAP,MAA0B,YAA1B;AAEA,eAAe,SAASC,cAAT,CAAwBC,YAAY,GAAG,EAAvC,EAA2CC,OAA3C,EAAoD;AACjE,MAAIC,gBAAgB,GAAGP,OAAvB;AACA,QAAMQ,uBAAuB,GAAG,EAAhC,CAFiE,CAIjE;;AACA;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,OAAOC,MAAP,KAAkB,QAA/D,EAAyE;AACvE;AACA,QAAIA,MAAM,CAACC,oCAAX,EACEN,gBAAgB,GAAGK,MAAM,CAACC,oCAAP,CAA4C,EAA5C,CAAnB,CAHqE,CAKvE;AACA;AACA;AACA;AACA;AACA;;AACA;AACD;;AAED,QAAMC,cAAc,GAAGZ,oBAAoB,CAACM,uBAAD,CAA3C,CApBiE,CAsBjE;AACA;AACA;;AACA,QAAMO,WAAW,GAAG,CAACD,cAAD,EAAiBb,gBAAgB,CAACK,OAAD,CAAjC,CAApB;AAEA,QAAMU,SAAS,GAAG,CAACjB,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CAAlB;AAEA,QAAME,KAAK,GAAGnB,WAAW,CACvBK,aAAa,EADU,EAEvBE,YAFuB,EAGvBE,gBAAgB,CAAC,GAAGS,SAAJ,CAHO,CAAzB,CA7BiE,CAmCjE;;AACAC,EAAAA,KAAK,CAACC,OAAN,GAAgBJ,cAAc,CAACK,GAA/B;AACAF,EAAAA,KAAK,CAACG,gBAAN,GAAyB,EAAzB,CArCiE,CAqCpC;;AAC7BH,EAAAA,KAAK,CAACI,aAAN,GAAsB,EAAtB,CAtCiE,CAsCvC;AAE1B;;AACA;;AACA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC,MAAM;AACpCP,MAAAA,KAAK,CAACQ,cAAN,CAAqBtB,aAAa,CAACc,KAAK,CAACG,gBAAP,CAAlC;AACD,KAFD;AAGD;;AAED,SAAOH,KAAP;AACD","sourcesContent":["/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\n\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n\n    // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    /* eslint-enable */\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    createReducer(),\n    initialState,\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}