{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/helper.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport LinkRouter from 'components/shared/LinkRouter';\nexport const formattedColumns = (classes, columns) => columns.filter(c => !c.noColumn).map((c, idx) => ({\n  direction: idx === 0 ? 'column' : 'row',\n  justify: idx < 2 ? 'flex-start' : 'center',\n  alignItems: 'flex-start',\n  columnId: c.id,\n  loadingRows: [{}, {}],\n\n  content(row) {\n    const rowData = row[c.id];\n    return idx === 0 ? React.createElement(React.Fragment, null, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(LinkRouter, {\n      color: \"primary\",\n      className: clsx(classes.recipientLink, 'recipientColumn'),\n      to: row.recipientPath.replace(':id', row.uuid),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, rowData)), row.parentRecipients && React.createElement(Grid, {\n      item: true,\n      className: classes.familyCommunity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"caption\",\n      className: classes.caption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, row.parentRecipients))) : React.createElement(Grid, {\n      item: true,\n      className: classes.columnHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, c.type === 'date' ? moment(rowData).format('MMMM DD, YYYY') : rowData);\n  }\n\n}));\nexport const generateColumns = (data, columns) => columns.map(column => {\n  const columnData = data.find(d => d.id === column.id);\n\n  if (columnData) {\n    column.columnData = columnData;\n  }\n\n  return column;\n});","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/helper.js"],"names":["React","clsx","moment","Typography","Grid","LinkRouter","formattedColumns","classes","columns","filter","c","noColumn","map","idx","direction","justify","alignItems","columnId","id","loadingRows","content","row","rowData","recipientLink","recipientPath","replace","uuid","parentRecipients","familyCommunity","caption","columnHeight","type","format","generateColumns","data","column","columnData","find","d"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUC,OAAV,KAC9BA,OAAO,CACJC,MADH,CACUC,CAAC,IAAI,CAACA,CAAC,CAACC,QADlB,EAEGC,GAFH,CAEO,CAACF,CAAD,EAAIG,GAAJ,MAAa;AAChBC,EAAAA,SAAS,EAAED,GAAG,KAAK,CAAR,GAAY,QAAZ,GAAuB,KADlB;AAEhBE,EAAAA,OAAO,EAAEF,GAAG,GAAG,CAAN,GAAU,YAAV,GAAyB,QAFlB;AAGhBG,EAAAA,UAAU,EAAE,YAHI;AAIhBC,EAAAA,QAAQ,EAAEP,CAAC,CAACQ,EAJI;AAKhBC,EAAAA,WAAW,EAAE,CAAC,EAAD,EAAK,EAAL,CALG;;AAMhBC,EAAAA,OAAO,CAACC,GAAD,EAAM;AACX,UAAMC,OAAO,GAAGD,GAAG,CAACX,CAAC,CAACQ,EAAH,CAAnB;AAEA,WAAOL,GAAG,KAAK,CAAR,GACL,0CACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,SAAS,EAAEZ,IAAI,CAACM,OAAO,CAACgB,aAAT,EAAwB,iBAAxB,CAFjB;AAGE,MAAA,EAAE,EAAEF,GAAG,CAACG,aAAJ,CAAkBC,OAAlB,CAA0B,KAA1B,EAAiCJ,GAAG,CAACK,IAArC,CAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGJ,OALH,CADF,CADF,EAUGD,GAAG,CAACM,gBAAJ,IACC,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,SAAS,EAAEpB,OAAO,CAACqB,eAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,SAApB;AAA8B,MAAA,SAAS,EAAErB,OAAO,CAACsB,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGR,GAAG,CAACM,gBADP,CADF,CAXJ,CADK,GAoBL,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,SAAS,EAAEpB,OAAO,CAACuB,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGpB,CAAC,CAACqB,IAAF,KAAW,MAAX,GACG7B,MAAM,CAACoB,OAAD,CAAN,CAAgBU,MAAhB,CAAuB,eAAvB,CADH,GAEGV,OAHN,CApBF;AA0BD;;AAnCe,CAAb,CAFP,CADK;AAyCP,OAAO,MAAMW,eAAe,GAAG,CAACC,IAAD,EAAO1B,OAAP,KAC7BA,OAAO,CAACI,GAAR,CAAYuB,MAAM,IAAI;AACpB,QAAMC,UAAU,GAAGF,IAAI,CAACG,IAAL,CAAUC,CAAC,IAAIA,CAAC,CAACpB,EAAF,KAASiB,MAAM,CAACjB,EAA/B,CAAnB;;AACA,MAAIkB,UAAJ,EAAgB;AACdD,IAAAA,MAAM,CAACC,UAAP,GAAoBA,UAApB;AACD;;AACD,SAAOD,MAAP;AACD,CAND,CADK","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport moment from 'moment';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport LinkRouter from 'components/shared/LinkRouter';\n\nexport const formattedColumns = (classes, columns) =>\n  columns\n    .filter(c => !c.noColumn)\n    .map((c, idx) => ({\n      direction: idx === 0 ? 'column' : 'row',\n      justify: idx < 2 ? 'flex-start' : 'center',\n      alignItems: 'flex-start',\n      columnId: c.id,\n      loadingRows: [{}, {}],\n      content(row) {\n        const rowData = row[c.id];\n\n        return idx === 0 ? (\n          <>\n            <Grid item>\n              <LinkRouter\n                color=\"primary\"\n                className={clsx(classes.recipientLink, 'recipientColumn')}\n                to={row.recipientPath.replace(':id', row.uuid)}\n              >\n                {rowData}\n              </LinkRouter>\n            </Grid>\n            {row.parentRecipients && (\n              <Grid item className={classes.familyCommunity}>\n                <Typography variant=\"caption\" className={classes.caption}>\n                  {row.parentRecipients}\n                </Typography>\n              </Grid>\n            )}\n          </>\n        ) : (\n          <Grid item className={classes.columnHeight}>\n            {c.type === 'date'\n              ? moment(rowData).format('MMMM DD, YYYY')\n              : rowData}\n          </Grid>\n        );\n      },\n    }));\n\nexport const generateColumns = (data, columns) =>\n  columns.map(column => {\n    const columnData = data.find(d => d.id === column.id);\n    if (columnData) {\n      column.columnData = columnData;\n    }\n    return column;\n  });\n"]},"metadata":{},"sourceType":"module"}