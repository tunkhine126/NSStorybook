{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSTable/TableSettings/reorderView.js\";\n\n/**\n *\n * ReorderView\n *\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { useDrop } from 'react-dnd-cjs';\nimport clsx from 'clsx';\nimport update from 'immutability-helper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport NSButton from 'components/shared/NSButton';\nimport globalMessages from 'messages';\nimport NSCard from '../nsCard';\nimport messages from '../messages';\nimport { styles } from '../styles';\n\nfunction ReorderView({\n  intl,\n  columns,\n  handleReorderMode,\n  handleReorder\n}) {\n  const classes = styles();\n  const [, drop] = useDrop({\n    accept: 'nsCard'\n  });\n  const [dragableColumns, setDragableColumns] = useState(columns);\n\n  const findCard = id => {\n    const dragableColumn = dragableColumns.filter(c => c.id === id)[0];\n    return {\n      dragableColumn,\n      index: dragableColumns.indexOf(dragableColumn)\n    };\n  };\n\n  const moveCard = (id, atIndex) => {\n    const {\n      dragableColumn,\n      index\n    } = findCard(id);\n    setDragableColumns(update(dragableColumns, {\n      $splice: [[index, 1], [atIndex, 0, dragableColumn]]\n    }));\n  };\n\n  return React.createElement(Grid, {\n    item: true,\n    container: true,\n    className: classes.tsDragNDropSettings,\n    direction: \"column\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    gutterBottom: true,\n    className: clsx(classes.caption, classes.tsDragNDropHeader),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, intl.formatMessage(messages.reorderDesc)), React.createElement(Grid, {\n    ref: drop,\n    item: true,\n    container: true,\n    direction: \"column\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, dragableColumns.map((card, idx) => React.createElement(NSCard, {\n    key: card.id,\n    index: idx,\n    id: `${card.id}`,\n    label: card.label,\n    moveCard: moveCard,\n    findCard: findCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    className: classes.tsDragNDropAction,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(NSButton, {\n    textBtn: true,\n    variant: \"contained\",\n    size: \"small\",\n    onClick: handleReorderMode,\n    componentClasses: classes.tsDragNDropCancelBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    className: classes.tsDragNDropCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, intl.formatMessage(globalMessages.cancel))), React.createElement(NSButton, {\n    version: 2,\n    variant: \"contained\",\n    size: \"small\",\n    componentClasses: classes.tsDragNDropSaveBtn,\n    onClick: () => {\n      handleReorder(dragableColumns);\n      handleReorderMode();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    className: classes.tsDragNDropSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, intl.formatMessage(messages.saveChanges)))));\n}\n\nReorderView.displayName = \"ReorderView\";\nReorderView.propTypes = {\n  intl: intlShape.isRequired,\n  columns: PropTypes.array.isRequired,\n  handleReorderMode: PropTypes.func.isRequired,\n  handleReorder: PropTypes.func.isRequired\n};\nconst IntlReorderView = injectIntl(ReorderView);\nexport default IntlReorderView;\nReorderView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ReorderView\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"columns\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handleReorderMode\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handleReorder\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NSTable/TableSettings/reorderView.js\"] = {\n    name: \"ReorderView\",\n    docgenInfo: ReorderView.__docgenInfo,\n    path: \"src/components/NSTable/TableSettings/reorderView.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSTable/TableSettings/reorderView.js"],"names":["React","useState","PropTypes","injectIntl","intlShape","useDrop","clsx","update","Typography","Grid","NSButton","globalMessages","NSCard","messages","styles","ReorderView","intl","columns","handleReorderMode","handleReorder","classes","drop","accept","dragableColumns","setDragableColumns","findCard","id","dragableColumn","filter","c","index","indexOf","moveCard","atIndex","$splice","tsDragNDropSettings","caption","tsDragNDropHeader","formatMessage","reorderDesc","map","card","idx","label","tsDragNDropAction","tsDragNDropCancelBtn","tsDragNDropCancel","cancel","tsDragNDropSaveBtn","tsDragNDropSave","saveChanges","propTypes","isRequired","array","func","IntlReorderView"],"mappings":"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","sourcesContent":["/**\n *\n * ReorderView\n *\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { useDrop } from 'react-dnd-cjs';\nimport clsx from 'clsx';\nimport update from 'immutability-helper';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport NSButton from 'components/shared/NSButton';\nimport globalMessages from 'messages';\nimport NSCard from '../nsCard';\nimport messages from '../messages';\nimport { styles } from '../styles';\n\nfunction ReorderView({ intl, columns, handleReorderMode, handleReorder }) {\n  const classes = styles();\n  const [, drop] = useDrop({ accept: 'nsCard' });\n  const [dragableColumns, setDragableColumns] = useState(columns);\n\n  const findCard = id => {\n    const dragableColumn = dragableColumns.filter(c => c.id === id)[0];\n    return {\n      dragableColumn,\n      index: dragableColumns.indexOf(dragableColumn),\n    };\n  };\n\n  const moveCard = (id, atIndex) => {\n    const { dragableColumn, index } = findCard(id);\n    setDragableColumns(\n      update(dragableColumns, {\n        $splice: [[index, 1], [atIndex, 0, dragableColumn]],\n      })\n    );\n  };\n\n  return (\n    <Grid\n      item\n      container\n      className={classes.tsDragNDropSettings}\n      direction=\"column\"\n      justify=\"flex-start\"\n      alignItems=\"flex-start\"\n    >\n      <Typography\n        variant=\"caption\"\n        gutterBottom\n        className={clsx(classes.caption, classes.tsDragNDropHeader)}\n      >\n        {intl.formatMessage(messages.reorderDesc)}\n      </Typography>\n      <Grid\n        ref={drop}\n        item\n        container\n        direction=\"column\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\"\n      >\n        {dragableColumns.map((card, idx) => (\n          <NSCard\n            key={card.id}\n            index={idx}\n            id={`${card.id}`}\n            label={card.label}\n            moveCard={moveCard}\n            findCard={findCard}\n          />\n        ))}\n      </Grid>\n\n      <Grid\n        item\n        container\n        direction=\"row\"\n        justify=\"flex-end\"\n        alignItems=\"flex-end\"\n        className={classes.tsDragNDropAction}\n      >\n        <NSButton\n          textBtn\n          variant=\"contained\"\n          size=\"small\"\n          onClick={handleReorderMode}\n          componentClasses={classes.tsDragNDropCancelBtn}\n        >\n          <Typography variant=\"body1\" className={classes.tsDragNDropCancel}>\n            {intl.formatMessage(globalMessages.cancel)}\n          </Typography>\n        </NSButton>\n        <NSButton\n          version={2}\n          variant=\"contained\"\n          size=\"small\"\n          componentClasses={classes.tsDragNDropSaveBtn}\n          onClick={() => {\n            handleReorder(dragableColumns);\n            handleReorderMode();\n          }}\n        >\n          <Typography variant=\"body1\" className={classes.tsDragNDropSave}>\n            {intl.formatMessage(messages.saveChanges)}\n          </Typography>\n        </NSButton>\n      </Grid>\n    </Grid>\n  );\n}\n\nReorderView.propTypes = {\n  intl: intlShape.isRequired,\n  columns: PropTypes.array.isRequired,\n  handleReorderMode: PropTypes.func.isRequired,\n  handleReorder: PropTypes.func.isRequired,\n};\n\nconst IntlReorderView = injectIntl(ReorderView);\nexport default IntlReorderView;\n"]},"metadata":{},"sourceType":"module"}