{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nimport _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NewRecipient/fields.js\";\n\n/**\n *\n * Fields\n *\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport NSFields from 'components/shared/NSFields';\nimport { required } from 'utils/validations';\nimport { commonStyles } from './styles';\nexport function Fields({\n  fields,\n  showPreFixId,\n  preFixSeparator,\n  parentInternalId,\n  preSetValue,\n  fieldsRequired = false\n}) {\n  let requiredProps = {};\n  const classes = commonStyles();\n\n  if (fieldsRequired) {\n    requiredProps = {\n      validateOnChange: true,\n      validateOnBlur: true,\n      required: true,\n      validate: required\n    };\n  }\n\n  const [fieldState, setFieldState] = useState(fields.reduce((o, key) => _objectSpread({}, o, {\n    [key.name]: {\n      item: []\n    }\n  }), {}));\n\n  const handleFieldChange = (field, value) => setFieldState(state => _objectSpread({}, state, {\n    [field]: {\n      item: value\n    }\n  }));\n\n  const Prefix = () => React.createElement(\"p\", {\n    style: {\n      width: 'max-content'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, parentInternalId + preFixSeparator);\n\n  const fieldsToRender = fields.length > 0 && fields.map((f, idx) => {\n    const selectFields = ['single_select', 'multi_select', 'likert'];\n\n    if (selectFields.includes(f.field_type)) {\n      return React.createElement(NSFields, Object.assign({\n        key: idx,\n        fieldType: f.field_type,\n        field: `${f.name}_custom`,\n        label: f.contexts.us_en.label,\n        values: fieldState[f.name],\n        options: f.option_values.map(o => ({\n          value: o\n        })),\n        onchange: v => handleFieldChange(f.name, v)\n      }, requiredProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(NSFields, Object.assign({\n      key: idx,\n      fieldType: f.field_type,\n      field: `${f.name}_custom`,\n      label: f.contexts.us_en.label\n    }, requiredProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(Grid, {\n    item: true,\n    className: classes.spacing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, fieldsRequired && React.createElement(NSFields, Object.assign({\n    fieldType: \"short_text\",\n    field: \"name\",\n    label: \"Name\"\n  }, requiredProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), !fieldsRequired && React.createElement(React.Fragment, null, React.createElement(NSFields, Object.assign({\n    fieldType: \"photo\",\n    field: \"base64Avatar\",\n    label: \"Avatar\"\n  }, requiredProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(NSFields, Object.assign({\n    fieldType: \"short_text\",\n    field: \"internalId\",\n    label: \"Internal Id\",\n    position: \"start\",\n    initialValue: preSetValue,\n    showPrefix: showPreFixId,\n    icon: Prefix\n  }, requiredProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(NSFields, Object.assign({\n    fieldType: \"paragraph_text\",\n    field: \"description\",\n    label: \"Description\"\n  }, requiredProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }))), fieldsToRender);\n}\nFields.displayName = \"Fields\";\nFields.propTypes = {\n  fields: PropTypes.array.isRequired,\n  fieldsRequired: PropTypes.bool,\n  showPreFixId: PropTypes.bool,\n  preFixSeparator: PropTypes.string,\n  parentInternalId: PropTypes.string,\n  preSetValue: PropTypes.string\n};\nFields.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Fields\",\n  \"props\": {\n    \"fieldsRequired\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"fields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"showPreFixId\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"preFixSeparator\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"parentInternalId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"preSetValue\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\nexport default Fields;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NewRecipient/fields.js\"] = {\n    name: \"Fields\",\n    docgenInfo: Fields.__docgenInfo,\n    path: \"src/components/NewRecipient/fields.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NewRecipient/fields.js"],"names":["React","useState","PropTypes","Grid","NSFields","required","commonStyles","Fields","fields","showPreFixId","preFixSeparator","parentInternalId","preSetValue","fieldsRequired","requiredProps","classes","validateOnChange","validateOnBlur","validate","fieldState","setFieldState","reduce","o","key","name","item","handleFieldChange","field","value","state","Prefix","width","fieldsToRender","length","map","f","idx","selectFields","includes","field_type","contexts","us_en","label","option_values","v","spacing","propTypes","array","isRequired","bool","string"],"mappings":"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","sourcesContent":["/**\n *\n * Fields\n *\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport NSFields from 'components/shared/NSFields';\n\nimport { required } from 'utils/validations';\nimport { commonStyles } from './styles';\n\nexport function Fields({\n  fields,\n  showPreFixId,\n  preFixSeparator,\n  parentInternalId,\n  preSetValue,\n  fieldsRequired = false,\n}) {\n  let requiredProps = {};\n  const classes = commonStyles();\n\n  if (fieldsRequired) {\n    requiredProps = {\n      validateOnChange: true,\n      validateOnBlur: true,\n      required: true,\n      validate: required,\n    };\n  }\n\n  const [fieldState, setFieldState] = useState(\n    fields.reduce((o, key) => ({ ...o, [key.name]: { item: [] } }), {})\n  );\n\n  const handleFieldChange = (field, value) =>\n    setFieldState(state => ({ ...state, [field]: { item: value } }));\n\n  const Prefix = () => (\n    <p style={{ width: 'max-content' }}>{parentInternalId + preFixSeparator}</p>\n  );\n\n  const fieldsToRender =\n    fields.length > 0 &&\n    fields.map((f, idx) => {\n      const selectFields = ['single_select', 'multi_select', 'likert'];\n      if (selectFields.includes(f.field_type)) {\n        return (\n          <NSFields\n            key={idx}\n            fieldType={f.field_type}\n            field={`${f.name}_custom`}\n            label={f.contexts.us_en.label}\n            values={fieldState[f.name]}\n            options={f.option_values.map(o => ({ value: o }))}\n            onchange={v => handleFieldChange(f.name, v)}\n            {...requiredProps}\n          />\n        );\n      }\n      return (\n        <NSFields\n          key={idx}\n          fieldType={f.field_type}\n          field={`${f.name}_custom`}\n          label={f.contexts.us_en.label}\n          {...requiredProps}\n        />\n      );\n    });\n  return (\n    <Grid item className={classes.spacing}>\n      {fieldsRequired && (\n        <NSFields\n          fieldType=\"short_text\"\n          field=\"name\"\n          label=\"Name\"\n          {...requiredProps}\n        />\n      )}\n\n      {!fieldsRequired && (\n        <>\n          <NSFields\n            fieldType=\"photo\"\n            field=\"base64Avatar\"\n            label=\"Avatar\"\n            {...requiredProps}\n          />\n\n          <NSFields\n            fieldType=\"short_text\"\n            field=\"internalId\"\n            label=\"Internal Id\"\n            position=\"start\"\n            initialValue={preSetValue}\n            showPrefix={showPreFixId}\n            icon={Prefix}\n            {...requiredProps}\n          />\n\n          <NSFields\n            fieldType=\"paragraph_text\"\n            field=\"description\"\n            label=\"Description\"\n            {...requiredProps}\n          />\n        </>\n      )}\n\n      {fieldsToRender}\n    </Grid>\n  );\n}\n\nFields.propTypes = {\n  fields: PropTypes.array.isRequired,\n  fieldsRequired: PropTypes.bool,\n  showPreFixId: PropTypes.bool,\n  preFixSeparator: PropTypes.string,\n  parentInternalId: PropTypes.string,\n  preSetValue: PropTypes.string,\n};\n\nexport default Fields;\n"]},"metadata":{},"sourceType":"module"}