{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nimport _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSFilters/levels.js\";\n\n/* eslint-disable react/display-name */\n\n/* eslint-disable react/prop-types */\n\n/**\n *\n * LevelSelect\n *\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { Treebeard } from 'react-treebeard';\nimport Fuse from 'fuse.js';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Search from '@material-ui/icons/Search';\nimport TextLink from 'components/shared/TextLink';\nimport { resetNestedLevels } from 'utils/helpers';\nimport CheckBoxGroup from '../CheckboxGroup/index';\nimport globalMessages from 'messages';\nimport { SelectFilterStyles, multiSelectSearchClasses, AccordianTreeStyles, AccordianTreeWrapper } from './styles';\nimport { NSFiltersContext } from './context/filters';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\",\n  d: \"M2.11363 0.199951L5.99954 4.0774L9.88546 0.199951L11.0792 1.39366L5.99954 6.47329L0.919922 1.39366L2.11363 0.199951Z\",\n  fill: \"#4E4E56\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 189\n  },\n  __self: this\n});\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(InputAdornment, {\n  position: \"start\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 243\n  },\n  __self: this\n}, React.createElement(Search, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 244\n  },\n  __self: this\n}));\n\nexport function LevelSelect({\n  intl,\n  label,\n  id: filterId,\n  filterData,\n  filterQueryTriggers\n}) {\n  const classes = SelectFilterStyles();\n  const treeClasses = AccordianTreeStyles();\n  const searchClasses = multiSelectSearchClasses();\n  const [cursor, setCursor] = useState(false);\n  const {\n    levelSelect: {\n      levelSelectOptions: data,\n      setLevelSelectOptions: setData\n    },\n    handleSelected\n  } = useContext(NSFiltersContext);\n\n  if (data[filterId] && data[filterId].length === 0) {\n    setData(currentState => _objectSpread({}, currentState, {\n      [filterId]: filterData\n    }));\n  }\n\n  const settings = {\n    threshold: 0.0,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: ['name', 'children.name']\n  };\n  const fuse = new Fuse(filterData, settings);\n\n  const handleCheckboxChange = (status, id) => {\n    handleSelected([]);\n    setData(currentState => _objectSpread({}, currentState, {\n      [filterId]: data[filterId].map(option => {\n        const recursive = function (arr) {\n          arr.forEach(obj => {\n            if (obj.id === id || option.id === id) {\n              obj.checked = status;\n            }\n\n            if (obj.children.length > 0) {\n              recursive(obj.children);\n            }\n          });\n        };\n\n        if (option.children.length > 0) {\n          recursive(option.children);\n        }\n\n        if (option.id === id) {\n          option.checked = status;\n        }\n\n        return option;\n      })\n    }));\n\n    if (filterQueryTriggers[filterId]) {\n      let selected = [];\n      let selectedChips = [];\n      data[filterId].forEach(option => {\n        if (option.checked) {\n          selected = [...selected, option.id];\n        }\n\n        if (option.children.length > 0) {\n          const decoratorRecursive = function (arr) {\n            arr.forEach(obj => {\n              if (obj.checked) {\n                selected = [...selected, obj.id];\n                selectedChips = [...selectedChips, obj.name];\n              }\n\n              decoratorRecursive(obj.children);\n            });\n          };\n\n          decoratorRecursive(option.children);\n        }\n      });\n      filterQueryTriggers[filterId](selected.length === 0 ? {\n        query: null,\n        chips: []\n      } : {\n        query: selected,\n        chips: selectedChips\n      });\n    }\n  };\n\n  const decorators = {\n    Container: props => {\n      const {\n        onClick: click,\n        node: {\n          name,\n          id,\n          toggled,\n          checked,\n          children\n        }\n      } = _objectSpread({}, props);\n\n      let nestedChildren = [];\n      let intermediate = false;\n      let allChildrenChecked = false;\n\n      if (children.length > 0) {\n        const decoratorRecursive = function (arr) {\n          arr.forEach(obj => {\n            nestedChildren = [...nestedChildren, obj.checked ? 1 : 0];\n            decoratorRecursive(obj.children);\n          });\n        };\n\n        decoratorRecursive(children);\n        intermediate = nestedChildren.includes(1) && !nestedChildren.every(i => i === 1);\n        allChildrenChecked = nestedChildren.length === nestedChildren.filter(i => i === 1).length;\n      }\n\n      return React.createElement(\"div\", {\n        className: clsx(treeClasses.root, 'levels-accordion', {\n          [treeClasses.active]: toggled && children.length\n        }),\n        onClick: e => {\n          if (e.target.type !== 'checkbox') {\n            click();\n          }\n        },\n        role: \"button\",\n        onKeyPress: click,\n        tabIndex: \"-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(CheckBoxGroup, {\n        shouldDisable: {\n          disable: false,\n          id: null\n        },\n        label: name,\n        show: checked || allChildrenChecked,\n        intermediate: intermediate,\n        id: id,\n        resultCount: children.length,\n        checboxChange: (e, chkBoxId) => {\n          handleCheckboxChange(e.target.checked, chkBoxId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), children.length ? React.createElement(\"svg\", {\n        className: clsx(treeClasses.icon, {\n          [treeClasses.open]: toggled\n        }),\n        width: \"12\",\n        height: \"7\",\n        viewBox: \"0 0 12 7\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, _ref) : null);\n    }\n  };\n\n  const onToggle = (node, toggled) => {\n    if (cursor) {\n      cursor.active = false;\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    setCursor(node);\n    setData(currentState => _objectSpread({}, currentState, {\n      [filterId]: [...data[filterId]]\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    className: classes.multiSelectContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    classes: searchClasses,\n    id: `${label}-search`,\n    onChange: e => {\n      const {\n        value\n      } = e.target;\n      const newList = fuse.search(value).length > 0 ? fuse.search(value) : filterData;\n      setData(currentState => _objectSpread({}, currentState, {\n        [filterId]: newList\n      }));\n    },\n    InputProps: {\n      startAdornment: _ref2\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, React.createElement(TextLink, {\n    className: clsx(treeClasses.reset, 'levels-reset'),\n    content: intl.formatMessage(globalMessages.reset),\n    onClick: () => {\n      setData(currentState => _objectSpread({}, currentState, {\n        [filterId]: data[filterId].map(options => {\n          resetNestedLevels(options);\n          return options;\n        })\n      }));\n      filterQueryTriggers[filterId]({\n        query: null,\n        chips: []\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }))), React.createElement(AccordianTreeWrapper, {\n    className: \"levels-component-tree\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, React.createElement(Treebeard, {\n    data: data[filterId],\n    onToggle: onToggle,\n    decorators: decorators,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  })));\n}\nLevelSelect.propTypes = {\n  intl: intlShape.isRequired,\n  id: PropTypes.string.isRequired,\n  filterData: PropTypes.array.isRequired,\n  filterQueryTriggers: PropTypes.object.isRequired\n};\nconst IntlLevelSelect = injectIntl(LevelSelect);\nexport default IntlLevelSelect;\nLevelSelect.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"LevelSelect\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filterData\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filterQueryTriggers\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NSFilters/levels.js\"] = {\n    name: \"LevelSelect\",\n    docgenInfo: LevelSelect.__docgenInfo,\n    path: \"src/components/NSFilters/levels.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSFilters/levels.js"],"names":["React","useState","useContext","PropTypes","clsx","injectIntl","intlShape","Treebeard","Fuse","Grid","TextField","InputAdornment","Search","TextLink","resetNestedLevels","CheckBoxGroup","globalMessages","SelectFilterStyles","multiSelectSearchClasses","AccordianTreeStyles","AccordianTreeWrapper","NSFiltersContext","LevelSelect","intl","label","id","filterId","filterData","filterQueryTriggers","classes","treeClasses","searchClasses","cursor","setCursor","levelSelect","levelSelectOptions","data","setLevelSelectOptions","setData","handleSelected","length","currentState","settings","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","fuse","handleCheckboxChange","status","map","option","recursive","arr","forEach","obj","checked","children","selected","selectedChips","decoratorRecursive","name","query","chips","decorators","Container","props","onClick","click","node","toggled","nestedChildren","intermediate","allChildrenChecked","includes","every","i","filter","root","active","e","target","type","disable","chkBoxId","icon","open","onToggle","multiSelectContainer","value","newList","search","startAdornment","reset","formatMessage","options","propTypes","isRequired","string","array","object","IntlLevelSelect"],"mappings":"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","sourcesContent":["/* eslint-disable react/display-name */\n/* eslint-disable react/prop-types */\n/**\n *\n * LevelSelect\n *\n */\n\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { Treebeard } from 'react-treebeard';\nimport Fuse from 'fuse.js';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Search from '@material-ui/icons/Search';\n\nimport TextLink from 'components/shared/TextLink';\nimport { resetNestedLevels } from 'utils/helpers';\nimport CheckBoxGroup from '../CheckboxGroup/index';\nimport globalMessages from 'messages';\nimport {\n  SelectFilterStyles,\n  multiSelectSearchClasses,\n  AccordianTreeStyles,\n  AccordianTreeWrapper,\n} from './styles';\nimport { NSFiltersContext } from './context/filters';\n\nexport function LevelSelect({\n  intl,\n  label,\n  id: filterId,\n  filterData,\n  filterQueryTriggers,\n}) {\n  const classes = SelectFilterStyles();\n  const treeClasses = AccordianTreeStyles();\n  const searchClasses = multiSelectSearchClasses();\n  const [cursor, setCursor] = useState(false);\n  const {\n    levelSelect: { levelSelectOptions: data, setLevelSelectOptions: setData },\n    handleSelected,\n  } = useContext(NSFiltersContext);\n\n  if (data[filterId] && data[filterId].length === 0) {\n    setData(currentState => ({ ...currentState, [filterId]: filterData }));\n  }\n\n  const settings = {\n    threshold: 0.0,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: ['name', 'children.name'],\n  };\n  const fuse = new Fuse(filterData, settings);\n\n  const handleCheckboxChange = (status, id) => {\n    handleSelected([]);\n    setData(currentState => ({\n      ...currentState,\n      [filterId]: data[filterId].map(option => {\n        const recursive = function(arr) {\n          arr.forEach(obj => {\n            if (obj.id === id || option.id === id) {\n              obj.checked = status;\n            }\n            if (obj.children.length > 0) {\n              recursive(obj.children);\n            }\n          });\n        };\n\n        if (option.children.length > 0) {\n          recursive(option.children);\n        }\n\n        if (option.id === id) {\n          option.checked = status;\n        }\n\n        return option;\n      }),\n    }));\n\n    if (filterQueryTriggers[filterId]) {\n      let selected = [];\n      let selectedChips = [];\n\n      data[filterId].forEach(option => {\n        if (option.checked) {\n          selected = [...selected, option.id];\n        }\n\n        if (option.children.length > 0) {\n          const decoratorRecursive = function(arr) {\n            arr.forEach(obj => {\n              if (obj.checked) {\n                selected = [...selected, obj.id];\n                selectedChips = [...selectedChips, obj.name];\n              }\n              decoratorRecursive(obj.children);\n            });\n          };\n\n          decoratorRecursive(option.children);\n        }\n      });\n\n      filterQueryTriggers[filterId](\n        selected.length === 0\n          ? { query: null, chips: [] }\n          : { query: selected, chips: selectedChips }\n      );\n    }\n  };\n\n  const decorators = {\n    Container: props => {\n      const {\n        onClick: click,\n        node: { name, id, toggled, checked, children },\n      } = { ...props };\n      let nestedChildren = [];\n      let intermediate = false;\n      let allChildrenChecked = false;\n\n      if (children.length > 0) {\n        const decoratorRecursive = function(arr) {\n          arr.forEach(obj => {\n            nestedChildren = [...nestedChildren, obj.checked ? 1 : 0];\n            decoratorRecursive(obj.children);\n          });\n        };\n\n        decoratorRecursive(children);\n\n        intermediate =\n          nestedChildren.includes(1) && !nestedChildren.every(i => i === 1);\n\n        allChildrenChecked =\n          nestedChildren.length === nestedChildren.filter(i => i === 1).length;\n      }\n\n      return (\n        <div\n          className={clsx(treeClasses.root, 'levels-accordion', {\n            [treeClasses.active]: toggled && children.length,\n          })}\n          onClick={e => {\n            if (e.target.type !== 'checkbox') {\n              click();\n            }\n          }}\n          role=\"button\"\n          onKeyPress={click}\n          tabIndex=\"-1\"\n        >\n          <CheckBoxGroup\n            shouldDisable={{\n              disable: false,\n              id: null,\n            }}\n            label={name}\n            show={checked || allChildrenChecked}\n            intermediate={intermediate}\n            id={id}\n            resultCount={children.length}\n            checboxChange={(e, chkBoxId) => {\n              handleCheckboxChange(e.target.checked, chkBoxId);\n            }}\n          />\n          {children.length ? (\n            <svg\n              className={clsx(treeClasses.icon, {\n                [treeClasses.open]: toggled,\n              })}\n              width=\"12\"\n              height=\"7\"\n              viewBox=\"0 0 12 7\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M2.11363 0.199951L5.99954 4.0774L9.88546 0.199951L11.0792 1.39366L5.99954 6.47329L0.919922 1.39366L2.11363 0.199951Z\"\n                fill=\"#4E4E56\"\n              />\n            </svg>\n          ) : null}\n        </div>\n      );\n    },\n  };\n\n  const onToggle = (node, toggled) => {\n    if (cursor) {\n      cursor.active = false;\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n    setCursor(node);\n    setData(currentState => ({\n      ...currentState,\n      [filterId]: [...data[filterId]],\n    }));\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\"\n        className={classes.multiSelectContainer}\n      >\n        <Grid item xs>\n          <TextField\n            classes={searchClasses}\n            id={`${label}-search`}\n            onChange={e => {\n              const { value } = e.target;\n              const newList =\n                fuse.search(value).length > 0 ? fuse.search(value) : filterData;\n              setData(currentState => ({\n                ...currentState,\n                [filterId]: newList,\n              }));\n            }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Search />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </Grid>\n\n        <Grid item>\n          <TextLink\n            className={clsx(treeClasses.reset, 'levels-reset')}\n            content={intl.formatMessage(globalMessages.reset)}\n            onClick={() => {\n              setData(currentState => ({\n                ...currentState,\n                [filterId]: data[filterId].map(options => {\n                  resetNestedLevels(options);\n                  return options;\n                }),\n              }));\n              filterQueryTriggers[filterId]({ query: null, chips: [] });\n            }}\n          />\n        </Grid>\n      </Grid>\n      <AccordianTreeWrapper className=\"levels-component-tree\">\n        <Treebeard\n          data={data[filterId]}\n          onToggle={onToggle}\n          decorators={decorators}\n        />\n      </AccordianTreeWrapper>\n    </>\n  );\n}\n\nLevelSelect.propTypes = {\n  intl: intlShape.isRequired,\n  id: PropTypes.string.isRequired,\n  filterData: PropTypes.array.isRequired,\n  filterQueryTriggers: PropTypes.object.isRequired,\n};\n\nconst IntlLevelSelect = injectIntl(LevelSelect);\n\nexport default IntlLevelSelect;\n"]},"metadata":{},"sourceType":"module"}