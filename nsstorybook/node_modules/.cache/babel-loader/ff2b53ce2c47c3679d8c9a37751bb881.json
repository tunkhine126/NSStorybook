{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NewRecipient/index.js\";\n\n/**\n *\n * NewRecipient\n *\n */\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Form } from 'informed';\nimport queryString from 'query-string';\nimport Grid from '@material-ui/core/Grid'; // Queries\n\nimport { GET_RECIEPIENT_DEFINITION, GET_RECIEPIENT_INTERNAL_ID } from 'graphql/queries/recipients'; // Mutations\n\nimport { CREATE_RECIPIENT } from 'graphql/mutations/families/families-mutation'; // Components\n\nimport { showToaster as toast } from 'containers/App/actions';\nimport { generalErrorHandler } from 'utils/error-handler';\nimport Content from 'components/shared/Content';\nimport ActionPanel from 'components/shared/ActionPanel';\nimport Loading from 'components/shared/Loading';\nimport ViewHeader from 'components/shared/ViewHeader';\nimport Notification from 'components/shared/Notification';\nimport globalMessages from 'messages';\nimport { filterObj } from '../../utils/helpers';\nimport { commonStyles, InputWrapper } from './styles';\nimport Fields from './fields';\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(Loading, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 162\n  },\n  __self: this\n});\n\nfunction NewRecipient(_ref) {\n  let {\n    intl,\n    location,\n    showToaster\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"intl\", \"location\", \"showToaster\"]);\n\n  const formApiRef = useRef();\n  const classes = commonStyles();\n  const [fields, setFields] = useState({\n    required: [],\n    optional: []\n  });\n  const [loadingState, setloadingState] = useState(false);\n  const [redirectState, setRedirectState] = useState(false);\n  const [messageState, setmessageState] = useState({\n    message: '',\n    open: false,\n    type: 'success'\n  });\n\n  const messageHandler = (event, reason) => {\n    if (reason === 'clickaway') return;\n    setmessageState({\n      open: false\n    });\n  };\n\n  const handleFormReset = () => {\n    formApiRef.current.reset();\n  };\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RECIEPIENT_DEFINITION, {\n    variables: {\n      uuid: location.search.includes('&rdId=') ? queryString.parse(location.search).rdId : null\n    }\n  });\n  const {\n    loading: internalIdLoading,\n    error: internalIdError,\n    data: internalIdData\n  } = useQuery(GET_RECIEPIENT_INTERNAL_ID, {\n    variables: {\n      uuid: location.search.includes('pId=') ? queryString.parse(location.search).pId : null\n    }\n  });\n  const [createRecipient] = useMutation(CREATE_RECIPIENT);\n  useEffect(() => {\n    const rd = data && data.recipientDefinition;\n    const id = internalIdData && internalIdData.recipient;\n\n    if (rd && id) {\n      const customFields = rd.customFields ? [...rd.customFields] : [];\n      setFields({\n        showPreFixId: rd.prefixInternalIds,\n        preFixSeparator: rd.prefixSeparator,\n        preSetValue: id.children && (id.children.length + 1).toString(),\n        parentInternalId: id.internalId,\n        required: customFields.filter(f => f.on_create === 'require' || f.on_create === 'required'),\n        optional: customFields.filter(f => f.on_create === 'show')\n      });\n    }\n  }, [data, internalIdData]);\n\n  const handleSubmit = async formData => {\n    const custom = '_custom';\n    const defaultFields = filterObj(formData, d => !d.includes(custom));\n    let customFields = filterObj(formData, d => d.includes(custom));\n    customFields = Object.keys(customFields).map(key => key.replace(custom, '')).reduce((res, key) => Object.assign(res, {\n      [key]: customFields[`${key}${custom}`]\n    }), {});\n\n    try {\n      setloadingState(true);\n      const response = await createRecipient({\n        variables: _objectSpread({}, defaultFields, {\n          customFields: JSON.stringify(customFields),\n          parentUuid: queryString.parse(location.search).pId,\n          recipientDefinitionUuid: queryString.parse(location.search).rdId\n        })\n      });\n\n      if (response.data) {\n        setRedirectState(true);\n      }\n    } catch (error) {\n      const {\n        graphQLErrors,\n        networkError\n      } = error;\n      setloadingState(false);\n\n      if (graphQLErrors.length > 0) {\n        const [{\n          message\n        }] = graphQLErrors;\n        setmessageState({\n          message,\n          open: true,\n          type: 'error'\n        });\n      }\n\n      if (networkError) {\n        const {\n          message\n        } = networkError;\n        const failedConnection = message.includes('Failed to fetch');\n\n        if (failedConnection) {\n          setmessageState({\n            message: intl.formatMessage(globalMessages.networkError),\n            open: true,\n            type: 'error'\n          });\n        }\n      }\n    }\n  };\n\n  if (error || internalIdError) {\n    return generalErrorHandler(error || internalIdError, _objectSpread({}, rest));\n  }\n\n  if (loading || internalIdLoading) {\n    return _ref2;\n  } // Redirect user if query params are missing\n\n\n  if (!location.search.includes('pId=') || !location.search.includes('&rdId=') || !location.search.includes('&name=') || !location.search.includes('&path=')) {\n    return rest.history.go(-1);\n  }\n\n  if (redirectState) {\n    showToaster();\n    return React.createElement(Redirect, {\n      to: {\n        pathname: queryString.parse(location.search).path\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(ViewHeader, {\n    component: queryString.parse(location.search).name,\n    body: queryString.parse(location.search).name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Notification, {\n    status: messageState.open,\n    message: messageState.message,\n    classes: classes,\n    messageHandler: messageHandler,\n    duration: 3000,\n    position: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    type: messageState.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    xl: 10,\n    className: classes.fieldsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(InputWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Form, {\n    getApi: formApi => {\n      formApiRef.current = formApi;\n    },\n    id: \"add-new-recipient\",\n    onSubmit: formData => handleSubmit(formData),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, fields.required.length > 0 && React.createElement(Content, {\n    subHeader: `1 ${intl.formatMessage(globalMessages.required)}`,\n    body: React.createElement(Fields, {\n      fields: fields.required,\n      fieldsRequired: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }),\n    containerClass: classes.required,\n    headerClass: classes.sectionHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), fields.optional.length > 0 && React.createElement(Content, {\n    subHeader: `2 ${intl.formatMessage(globalMessages.optionalFields)}`,\n    body: React.createElement(Fields, {\n      fields: fields.optional,\n      showPreFixId: fields.showPreFixId,\n      preFixSeparator: fields.preFixSeparator,\n      parentInternalId: fields.parentInternalId,\n      preSetValue: fields.preSetValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }),\n    containerClass: classes.optionalFields,\n    headerClass: classes.sectionHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  })))), React.createElement(ActionPanel, {\n    action: \"addRecipientChild\",\n    type: \"submit\",\n    formId: \"add-new-recipient\",\n    resetForm: handleFormReset,\n    loading: loadingState,\n    disabled: loadingState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }))));\n}\n\nNewRecipient.propTypes = {\n  intl: intlShape.isRequired,\n  location: PropTypes.object.isRequired,\n  showToaster: PropTypes.func\n};\nconst intlNewRecipient = injectIntl(NewRecipient);\nexport function mapDispatchToProps(dispatch) {\n  return {\n    showToaster: () => dispatch(toast()),\n    dispatch\n  };\n}\nexport default connect(null, mapDispatchToProps)(intlNewRecipient);\nNewRecipient.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"NewRecipient\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"location\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"showToaster\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NewRecipient/index.js\"] = {\n    name: \"NewRecipient\",\n    docgenInfo: NewRecipient.__docgenInfo,\n    path: \"src/components/NewRecipient/index.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NewRecipient/index.js"],"names":["React","useState","useRef","useEffect","PropTypes","useQuery","useMutation","injectIntl","intlShape","Redirect","connect","Form","queryString","Grid","GET_RECIEPIENT_DEFINITION","GET_RECIEPIENT_INTERNAL_ID","CREATE_RECIPIENT","showToaster","toast","generalErrorHandler","Content","ActionPanel","Loading","ViewHeader","Notification","globalMessages","filterObj","commonStyles","InputWrapper","Fields","NewRecipient","intl","location","rest","formApiRef","classes","fields","setFields","required","optional","loadingState","setloadingState","redirectState","setRedirectState","messageState","setmessageState","message","open","type","messageHandler","event","reason","handleFormReset","current","reset","loading","error","data","variables","uuid","search","includes","parse","rdId","internalIdLoading","internalIdError","internalIdData","pId","createRecipient","rd","recipientDefinition","id","recipient","customFields","showPreFixId","prefixInternalIds","preFixSeparator","prefixSeparator","preSetValue","children","length","toString","parentInternalId","internalId","filter","f","on_create","handleSubmit","formData","custom","defaultFields","d","Object","keys","map","key","replace","reduce","res","assign","response","JSON","stringify","parentUuid","recipientDefinitionUuid","graphQLErrors","networkError","failedConnection","formatMessage","history","go","pathname","path","name","root","vertical","horizontal","fieldsContainer","formApi","sectionHeader","optionalFields","propTypes","isRequired","object","func","intlNewRecipient","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/**\n *\n * NewRecipient\n *\n */\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Form } from 'informed';\nimport queryString from 'query-string';\n\nimport Grid from '@material-ui/core/Grid';\n\n// Queries\nimport {\n  GET_RECIEPIENT_DEFINITION,\n  GET_RECIEPIENT_INTERNAL_ID,\n} from 'graphql/queries/recipients';\n\n// Mutations\nimport { CREATE_RECIPIENT } from 'graphql/mutations/families/families-mutation';\n\n// Components\nimport { showToaster as toast } from 'containers/App/actions';\nimport { generalErrorHandler } from 'utils/error-handler';\nimport Content from 'components/shared/Content';\nimport ActionPanel from 'components/shared/ActionPanel';\nimport Loading from 'components/shared/Loading';\nimport ViewHeader from 'components/shared/ViewHeader';\nimport Notification from 'components/shared/Notification';\nimport globalMessages from 'messages';\nimport { filterObj } from '../../utils/helpers';\nimport { commonStyles, InputWrapper } from './styles';\nimport Fields from './fields';\n\nfunction NewRecipient({ intl, location, showToaster, ...rest }) {\n  const formApiRef = useRef();\n  const classes = commonStyles();\n  const [fields, setFields] = useState({ required: [], optional: [] });\n  const [loadingState, setloadingState] = useState(false);\n  const [redirectState, setRedirectState] = useState(false);\n  const [messageState, setmessageState] = useState({\n    message: '',\n    open: false,\n    type: 'success',\n  });\n\n  const messageHandler = (event, reason) => {\n    if (reason === 'clickaway') return;\n    setmessageState({ open: false });\n  };\n\n  const handleFormReset = () => {\n    formApiRef.current.reset();\n  };\n\n  const { loading, error, data } = useQuery(GET_RECIEPIENT_DEFINITION, {\n    variables: {\n      uuid: location.search.includes('&rdId=')\n        ? queryString.parse(location.search).rdId\n        : null,\n    },\n  });\n\n  const {\n    loading: internalIdLoading,\n    error: internalIdError,\n    data: internalIdData,\n  } = useQuery(GET_RECIEPIENT_INTERNAL_ID, {\n    variables: {\n      uuid: location.search.includes('pId=')\n        ? queryString.parse(location.search).pId\n        : null,\n    },\n  });\n\n  const [createRecipient] = useMutation(CREATE_RECIPIENT);\n\n  useEffect(() => {\n    const rd = data && data.recipientDefinition;\n    const id = internalIdData && internalIdData.recipient;\n    if (rd && id) {\n      const customFields = rd.customFields ? [...rd.customFields] : [];\n\n      setFields({\n        showPreFixId: rd.prefixInternalIds,\n        preFixSeparator: rd.prefixSeparator,\n        preSetValue: id.children && (id.children.length + 1).toString(),\n        parentInternalId: id.internalId,\n        required: customFields.filter(\n          f => f.on_create === 'require' || f.on_create === 'required'\n        ),\n        optional: customFields.filter(f => f.on_create === 'show'),\n      });\n    }\n  }, [data, internalIdData]);\n\n  const handleSubmit = async formData => {\n    const custom = '_custom';\n    const defaultFields = filterObj(formData, d => !d.includes(custom));\n    let customFields = filterObj(formData, d => d.includes(custom));\n    customFields = Object.keys(customFields)\n      .map(key => key.replace(custom, ''))\n      .reduce(\n        (res, key) =>\n          Object.assign(res, { [key]: customFields[`${key}${custom}`] }),\n        {}\n      );\n\n    try {\n      setloadingState(true);\n      const response = await createRecipient({\n        variables: {\n          ...defaultFields,\n          customFields: JSON.stringify(customFields),\n          parentUuid: queryString.parse(location.search).pId,\n          recipientDefinitionUuid: queryString.parse(location.search).rdId,\n        },\n      });\n      if (response.data) {\n        setRedirectState(true);\n      }\n    } catch (error) {\n      const { graphQLErrors, networkError } = error;\n      setloadingState(false);\n\n      if (graphQLErrors.length > 0) {\n        const [{ message }] = graphQLErrors;\n\n        setmessageState({\n          message,\n          open: true,\n          type: 'error',\n        });\n      }\n\n      if (networkError) {\n        const { message } = networkError;\n        const failedConnection = message.includes('Failed to fetch');\n        if (failedConnection) {\n          setmessageState({\n            message: intl.formatMessage(globalMessages.networkError),\n            open: true,\n            type: 'error',\n          });\n        }\n      }\n    }\n  };\n\n  if (error || internalIdError) {\n    return generalErrorHandler(error || internalIdError, {\n      ...rest,\n    });\n  }\n\n  if (loading || internalIdLoading) {\n    return <Loading />;\n  }\n\n  // Redirect user if query params are missing\n  if (\n    !location.search.includes('pId=') ||\n    !location.search.includes('&rdId=') ||\n    !location.search.includes('&name=') ||\n    !location.search.includes('&path=')\n  ) {\n    return rest.history.go(-1);\n  }\n\n  if (redirectState) {\n    showToaster();\n\n    return (\n      <Redirect\n        to={{\n          pathname: queryString.parse(location.search).path,\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <ViewHeader\n        component={queryString.parse(location.search).name}\n        body={queryString.parse(location.search).name}\n      />\n\n      <div className={classes.root}>\n        <Grid container>\n          <Notification\n            status={messageState.open}\n            message={messageState.message}\n            classes={classes}\n            messageHandler={messageHandler}\n            duration={3000}\n            position={{ vertical: 'top', horizontal: 'right' }}\n            type={messageState.type}\n          />\n          <Grid item xs={9} xl={10} className={classes.fieldsContainer}>\n            <InputWrapper>\n              <Form\n                getApi={formApi => {\n                  formApiRef.current = formApi;\n                }}\n                id=\"add-new-recipient\"\n                onSubmit={formData => handleSubmit(formData)}\n              >\n                {fields.required.length > 0 && (\n                  <Content\n                    subHeader={`1 ${intl.formatMessage(\n                      globalMessages.required\n                    )}`}\n                    body={<Fields fields={fields.required} fieldsRequired />}\n                    containerClass={classes.required}\n                    headerClass={classes.sectionHeader}\n                  />\n                )}\n\n                {fields.optional.length > 0 && (\n                  <Content\n                    subHeader={`2 ${intl.formatMessage(\n                      globalMessages.optionalFields\n                    )}`}\n                    body={\n                      <Fields\n                        fields={fields.optional}\n                        showPreFixId={fields.showPreFixId}\n                        preFixSeparator={fields.preFixSeparator}\n                        parentInternalId={fields.parentInternalId}\n                        preSetValue={fields.preSetValue}\n                      />\n                    }\n                    containerClass={classes.optionalFields}\n                    headerClass={classes.sectionHeader}\n                  />\n                )}\n              </Form>\n            </InputWrapper>\n          </Grid>\n          <ActionPanel\n            action=\"addRecipientChild\"\n            type=\"submit\"\n            formId=\"add-new-recipient\"\n            resetForm={handleFormReset}\n            loading={loadingState}\n            disabled={loadingState}\n          />\n        </Grid>\n      </div>\n    </>\n  );\n}\n\nNewRecipient.propTypes = {\n  intl: intlShape.isRequired,\n  location: PropTypes.object.isRequired,\n  showToaster: PropTypes.func,\n};\n\nconst intlNewRecipient = injectIntl(NewRecipient);\n\nexport function mapDispatchToProps(dispatch) {\n  return {\n    showToaster: () => dispatch(toast()),\n    dispatch,\n  };\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(intlNewRecipient);\n"]},"metadata":{},"sourceType":"module"}