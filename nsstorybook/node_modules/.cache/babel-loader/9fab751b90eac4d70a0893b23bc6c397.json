{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSTable/TableSettings/coreSettings.js\";\n\n/**\n *\n * CoreSettings\n *\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Add from '@material-ui/icons/Add';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport ViewAgenda from '@material-ui/icons/ViewAgenda';\nimport ViewStream from '@material-ui/icons/ViewStream';\nimport ViewHeadline from '@material-ui/icons/ViewHeadline';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport NSButton from '../../NSButton/index';\nimport NSSelect from '../../NSSelect/index';\nimport CheckBoxGroup from '../checkboxGroup';\nimport messages from '../messages';\nimport { styles, tsSelectStyle } from '../styles';\n\nfunction CoreSettings({\n  intl,\n  rowChange,\n  columnChange,\n  columns,\n  handleReorderMode,\n  density,\n  densityChange,\n  addingFieldProps: {\n    addingField,\n    setAddingField\n  }\n}) {\n  const classes = styles();\n  const tsSelectStyleClasses = tsSelectStyle();\n  const [itemsPerPage, setItemsPerPage] = useState({\n    item: 15\n  });\n  const [selectedField, setSelectedField] = useState({\n    item: 'Address'\n  });\n\n  const handleItemsPerPage = e => {\n    setItemsPerPage({\n      item: e.target.value\n    });\n    rowChange(e.target.value);\n  };\n\n  const handleFieldChange = e => {\n    setSelectedField({\n      item: e.target.value\n    });\n  };\n\n  const handleFieldBtn = () => {\n    setAddingField(!addingField);\n  };\n\n  const toggleButtons = [{\n    value: '72px',\n    Icon: ViewAgenda\n  }, {\n    value: '50px',\n    Icon: ViewStream\n  }, {\n    value: '30px',\n    Icon: ViewHeadline\n  }].map(({\n    value,\n    Icon\n  }, idx) => React.createElement(ToggleButton, {\n    key: idx,\n    value: value,\n    className: classes.tsDensityBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })));\n  const columnsToShow = columns.filter(column => column.show);\n  const disableFinalColumn = columnsToShow.length < 2;\n  const defaultColumns = columns.map(({\n    label,\n    show,\n    id\n  }, idx) => React.createElement(CheckBoxGroup, {\n    key: idx,\n    shouldDisable: {\n      disable: disableFinalColumn,\n      id: columnsToShow[0].id\n    },\n    label: label,\n    show: show,\n    id: id,\n    checboxChange: columnChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    item: true,\n    container: true,\n    xs: 8,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    className: classes.tsColumns,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    gutterBottom: true,\n    className: classes.caption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, intl.formatMessage(messages.columns)), React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    className: classes.tsColumnsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, defaultColumns), React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    className: classes.tsActionBtns,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, !addingField && React.createElement(React.Fragment, null, React.createElement(NSButton, {\n    componentClasses: classes.tsReorder,\n    variant: \"contained\",\n    size: \"medium\",\n    onClick: handleReorderMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, intl.formatMessage(messages.reorder)), React.createElement(NSButton, {\n    componentClasses: classes.tsAddField,\n    variant: \"contained\",\n    size: \"medium\",\n    onClick: handleFieldBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Add, {\n    className: classes.tsAddIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), intl.formatMessage(messages.field))), addingField && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    gutterBottom: true,\n    className: classes.caption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, intl.formatMessage(messages.customField))), React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    className: classes.tsCustomFieldActions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(NSSelect, {\n    values: selectedField,\n    items: [{\n      value: 'Address'\n    }, {\n      value: 'Family'\n    }, {\n      value: 'Survey'\n    }],\n    update: handleFieldChange,\n    selectOverride: tsSelectStyleClasses,\n    disableLabel: true,\n    label: \"Field\",\n    code: \"value\",\n    value: \"value\",\n    width: \"153px\",\n    padding: \"5px 10px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), React.createElement(NSButton, {\n    componentClasses: classes.tsAdd,\n    variant: \"contained\",\n    size: \"medium\",\n    onClick: () => {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, intl.formatMessage(messages.add)))))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    className: classes.tsDensity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    gutterBottom: true,\n    className: classes.caption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, intl.formatMessage(messages.density)), React.createElement(ToggleButtonGroup, {\n    size: \"small\",\n    value: density,\n    exclusive: true,\n    onChange: densityChange,\n    className: classes.tsButtonGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, toggleButtons), React.createElement(\"div\", {\n    className: classes.tsResultsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    gutterBottom: true,\n    className: classes.caption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, intl.formatMessage(messages.resultsPerPage))), React.createElement(Grid, {\n    item: true,\n    container: true,\n    className: classes.tsSelectContainer,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(NSSelect, {\n    values: itemsPerPage,\n    items: [{\n      value: 5\n    }, {\n      value: 10\n    }, {\n      value: 15\n    }, {\n      value: 20\n    }, {\n      value: 50\n    }, {\n      value: 100\n    }],\n    update: handleItemsPerPage,\n    selectOverride: tsSelectStyleClasses,\n    disableLabel: true,\n    label: \"Results per page\",\n    code: \"value\",\n    value: \"value\",\n    width: \"50px\",\n    padding: \"5px 10px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }))));\n}\n\nCoreSettings.propTypes = {\n  intl: intlShape.isRequired,\n  rowChange: PropTypes.func.isRequired,\n  columnChange: PropTypes.func.isRequired,\n  columns: PropTypes.array.isRequired,\n  handleReorderMode: PropTypes.func.isRequired,\n  density: PropTypes.string.isRequired,\n  densityChange: PropTypes.func.isRequired,\n  addingFieldProps: PropTypes.object.isRequired\n};\nconst IntlCoreSettings = injectIntl(CoreSettings);\nexport default IntlCoreSettings;\nCoreSettings.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"CoreSettings\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"rowChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columns\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handleReorderMode\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"density\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"densityChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"addingFieldProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NSTable/TableSettings/coreSettings.js\"] = {\n    name: \"CoreSettings\",\n    docgenInfo: CoreSettings.__docgenInfo,\n    path: \"src/components/NSTable/TableSettings/coreSettings.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSTable/TableSettings/coreSettings.js"],"names":["React","useState","PropTypes","injectIntl","intlShape","Typography","Grid","Add","ToggleButtonGroup","ViewAgenda","ViewStream","ViewHeadline","ToggleButton","NSButton","NSSelect","CheckBoxGroup","messages","styles","tsSelectStyle","CoreSettings","intl","rowChange","columnChange","columns","handleReorderMode","density","densityChange","addingFieldProps","addingField","setAddingField","classes","tsSelectStyleClasses","itemsPerPage","setItemsPerPage","item","selectedField","setSelectedField","handleItemsPerPage","e","target","value","handleFieldChange","handleFieldBtn","toggleButtons","Icon","map","idx","tsDensityBtn","columnsToShow","filter","column","show","disableFinalColumn","length","defaultColumns","label","id","disable","tsColumns","caption","formatMessage","tsColumnsContainer","tsActionBtns","tsReorder","reorder","tsAddField","tsAddIcon","field","customField","tsCustomFieldActions","tsAdd","add","tsDensity","tsButtonGroup","tsResultsPerPage","resultsPerPage","tsSelectContainer","propTypes","isRequired","func","array","string","object","IntlCoreSettings"],"mappings":"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","sourcesContent":["/**\n *\n * CoreSettings\n *\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Add from '@material-ui/icons/Add';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport ViewAgenda from '@material-ui/icons/ViewAgenda';\nimport ViewStream from '@material-ui/icons/ViewStream';\nimport ViewHeadline from '@material-ui/icons/ViewHeadline';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\n\nimport NSButton from '../../NSButton/index';\nimport NSSelect from '../../NSSelect/index';\nimport CheckBoxGroup from '../checkboxGroup';\nimport messages from '../messages';\nimport { styles, tsSelectStyle } from '../styles';\n\nfunction CoreSettings({\n  intl,\n  rowChange,\n  columnChange,\n  columns,\n  handleReorderMode,\n  density,\n  densityChange,\n  addingFieldProps: { addingField, setAddingField },\n}) {\n  const classes = styles();\n  const tsSelectStyleClasses = tsSelectStyle();\n  const [itemsPerPage, setItemsPerPage] = useState({ item: 15 });\n  const [selectedField, setSelectedField] = useState({ item: 'Address' });\n\n  const handleItemsPerPage = e => {\n    setItemsPerPage({\n      item: e.target.value,\n    });\n    rowChange(e.target.value);\n  };\n\n  const handleFieldChange = e => {\n    setSelectedField({\n      item: e.target.value,\n    });\n  };\n\n  const handleFieldBtn = () => {\n    setAddingField(!addingField);\n  };\n\n  const toggleButtons = [\n    { value: '72px', Icon: ViewAgenda },\n    { value: '50px', Icon: ViewStream },\n    { value: '30px', Icon: ViewHeadline },\n  ].map(({ value, Icon }, idx) => (\n    <ToggleButton key={idx} value={value} className={classes.tsDensityBtn}>\n      <Icon />\n    </ToggleButton>\n  ));\n\n  const columnsToShow = columns.filter(column => column.show);\n  const disableFinalColumn = columnsToShow.length < 2;\n  const defaultColumns = columns.map(({ label, show, id }, idx) => (\n    <CheckBoxGroup\n      key={idx}\n      shouldDisable={{ disable: disableFinalColumn, id: columnsToShow[0].id }}\n      label={label}\n      show={show}\n      id={id}\n      checboxChange={columnChange}\n    />\n  ));\n\n  return (\n    <>\n      <Grid\n        item\n        container\n        xs={8}\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\"\n        className={classes.tsColumns}\n      >\n        <Typography variant=\"caption\" gutterBottom className={classes.caption}>\n          {intl.formatMessage(messages.columns)}\n        </Typography>\n\n        <Grid\n          item\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n          className={classes.tsColumnsContainer}\n        >\n          {defaultColumns}\n        </Grid>\n\n        <Grid\n          item\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n          className={classes.tsActionBtns}\n        >\n          {!addingField && (\n            <>\n              <NSButton\n                componentClasses={classes.tsReorder}\n                variant=\"contained\"\n                size=\"medium\"\n                onClick={handleReorderMode}\n              >\n                {intl.formatMessage(messages.reorder)}\n              </NSButton>\n\n              <NSButton\n                componentClasses={classes.tsAddField}\n                variant=\"contained\"\n                size=\"medium\"\n                onClick={handleFieldBtn}\n              >\n                <Add className={classes.tsAddIcon} />\n                {intl.formatMessage(messages.field)}\n              </NSButton>\n            </>\n          )}\n\n          {addingField && (\n            <>\n              <div>\n                <Typography\n                  variant=\"caption\"\n                  gutterBottom\n                  className={classes.caption}\n                >\n                  {intl.formatMessage(messages.customField)}\n                </Typography>\n              </div>\n\n              <Grid\n                item\n                container\n                direction=\"row\"\n                justify=\"flex-start\"\n                alignItems=\"flex-start\"\n                className={classes.tsCustomFieldActions}\n              >\n                <NSSelect\n                  values={selectedField}\n                  items={[\n                    { value: 'Address' },\n                    { value: 'Family' },\n                    { value: 'Survey' },\n                  ]}\n                  update={handleFieldChange}\n                  selectOverride={tsSelectStyleClasses}\n                  disableLabel\n                  label=\"Field\"\n                  code=\"value\"\n                  value=\"value\"\n                  width=\"153px\"\n                  padding=\"5px 10px\"\n                />\n\n                <NSButton\n                  componentClasses={classes.tsAdd}\n                  variant=\"contained\"\n                  size=\"medium\"\n                  onClick={() => {}}\n                >\n                  {intl.formatMessage(messages.add)}\n                </NSButton>\n              </Grid>\n            </>\n          )}\n        </Grid>\n      </Grid>\n      <Grid item xs={4} className={classes.tsDensity}>\n        <Typography variant=\"caption\" gutterBottom className={classes.caption}>\n          {intl.formatMessage(messages.density)}\n        </Typography>\n\n        <ToggleButtonGroup\n          size=\"small\"\n          value={density}\n          exclusive\n          onChange={densityChange}\n          className={classes.tsButtonGroup}\n        >\n          {toggleButtons}\n        </ToggleButtonGroup>\n\n        <div className={classes.tsResultsPerPage}>\n          <Typography\n            variant=\"caption\"\n            gutterBottom\n            className={classes.caption}\n          >\n            {intl.formatMessage(messages.resultsPerPage)}\n          </Typography>\n        </div>\n\n        <Grid\n          item\n          container\n          className={classes.tsSelectContainer}\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <NSSelect\n            values={itemsPerPage}\n            items={[\n              { value: 5 },\n              { value: 10 },\n              { value: 15 },\n              { value: 20 },\n              { value: 50 },\n              { value: 100 },\n            ]}\n            update={handleItemsPerPage}\n            selectOverride={tsSelectStyleClasses}\n            disableLabel\n            label=\"Results per page\"\n            code=\"value\"\n            value=\"value\"\n            width=\"50px\"\n            padding=\"5px 10px\"\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nCoreSettings.propTypes = {\n  intl: intlShape.isRequired,\n  rowChange: PropTypes.func.isRequired,\n  columnChange: PropTypes.func.isRequired,\n  columns: PropTypes.array.isRequired,\n  handleReorderMode: PropTypes.func.isRequired,\n  density: PropTypes.string.isRequired,\n  densityChange: PropTypes.func.isRequired,\n  addingFieldProps: PropTypes.object.isRequired,\n};\n\nconst IntlCoreSettings = injectIntl(CoreSettings);\nexport default IntlCoreSettings;\n"]},"metadata":{},"sourceType":"module"}