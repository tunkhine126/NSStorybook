{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nimport _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSTable/index.js\";\n\n/**\n *\n * NSTable\n *\n */\nimport React, { useState, useEffect, useRef, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport isEqual from 'fast-deep-equal';\nimport { injectIntl, intlShape } from 'react-intl';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport resizableGrid from '../../utils/tableResizer';\nimport NSTableHead from '../NSTable/nsTableHead';\nimport NSFilters from '../NSTable/nsTableHead';\nimport PaginationControls from '../NSTable/paginationControls';\nimport NSTableBody from '../NSTable/nsTableBody';\nimport { NSFiltersProvider } from './context/filters';\nimport tableMessages from './messages';\nimport { styles, TableStyleWrapper } from './styles';\n\nconst isSame = (prev, next) => {\n  // Removing Properties that doesn't need checking\n  const ignoreProps = columns => ({\n    arialLabels: null,\n    formattedColumns: null,\n    name: null,\n    setSelected: null,\n    toolbarActions: null,\n    horizActions: null,\n    columns: columns.map(item => _objectSpread({}, item, {\n      custom: null\n    }))\n  });\n\n  const prevScrubed = _objectSpread({}, prev, {}, ignoreProps(prev.columns));\n\n  const nextScrubed = _objectSpread({}, next, {}, ignoreProps(next.columns));\n\n  return isEqual(prevScrubed, nextScrubed);\n};\n\nfunction NSTable({\n  intl,\n  name,\n  horizActions = [],\n  showCheckboxes = true,\n  showTableSettings = true,\n  selectAllLoading = false,\n  arialLabels,\n  filterTitles,\n  data,\n  selected,\n  setSelected,\n  formattedColumns,\n  columns,\n  enableSearch,\n  enableFilters,\n  rowsPerPageProps: {\n    rowsPerPage,\n    setRowsPerPage\n  },\n  orderByProps: {\n    orderBy,\n    setOrderBy\n  },\n  orderProps: {\n    order,\n    setOrder\n  },\n  pageProps: {\n    currentPage,\n    setCurrentPage\n  },\n  filterQueryTriggers,\n  dateRangeProps = {},\n  tableSearchProps,\n  lastUpdateProps = {},\n  filteredResults,\n  totalResults,\n  totalPages,\n  mapColumnIds,\n  loading,\n  toolbarActions = [],\n  filiteredRecordsUuid\n}) {\n  const classes = styles();\n  const tableRef = useRef();\n  const [density, setDensity] = useState('72px');\n  const [nsFormattedColumns, setNSFormattedColumns] = useState(formattedColumns);\n  const [allSelectedPages, setAllSelectedPages] = useState([]);\n  const headerRowColumns = columns.filter(column => formattedColumns.find(fm => fm.columnId === column.id));\n  const [columnsData, setColumnsData] = useState(headerRowColumns);\n  const setInitalViewState = useCallback((rpp = rowsPerPage) => {\n    const pages = [];\n\n    for (let i = 1; i <= Math.ceil(totalResults / rpp); i += 1) {\n      pages.push({\n        page: i,\n        selected: []\n      });\n    }\n\n    return pages;\n  }, [rowsPerPage, totalResults]);\n  useEffect(() => {\n    let removeEventListners = null;\n\n    if (tableRef.current) {\n      removeEventListners = resizableGrid(tableRef.current, '#797979').dismount;\n    }\n\n    setAllSelectedPages(setInitalViewState());\n    return () => {\n      if (tableRef) {\n        removeEventListners();\n      }\n    };\n  }, [columnsData, setInitalViewState]);\n\n  const isSelected = id => selected.indexOf(id) !== -1;\n\n  function handleReorder(updatedColumnData) {\n    const reOrderedColumns = [];\n    updatedColumnData.forEach((column, index) => {\n      reOrderedColumns[index] = _objectSpread({}, nsFormattedColumns.find(item => item.columnId === column.id));\n    });\n    setColumnsData(updatedColumnData);\n    setNSFormattedColumns(reOrderedColumns);\n  }\n\n  const handleDensityChange = (e, newDensity) => {\n    setDensity(newDensity || '72px');\n  };\n\n  function handleOrderyBy(event, columnId) {\n    const newOrder = o => o === 'asc' ? 'desc' : 'asc';\n\n    setOrder(newOrder(order));\n    setOrderBy(mapColumnIds[columnId]);\n  }\n\n  function handleSelectAllClick(event, items) {\n    // Select All Items\n    if (event.target.parentElement.classList.contains('select-all-link')) {\n      setSelected(filiteredRecordsUuid);\n      setAllSelectedPages(currentState => currentState.map((item, idx) => {\n        let pageSelected = [];\n        const condition = allSelectedPages[idx + 1] ? rowsPerPage : totalResults - (item.page * rowsPerPage - rowsPerPage);\n\n        for (let i = idx * rowsPerPage; i < idx * rowsPerPage + condition; i += 1) {\n          pageSelected = [...pageSelected, filiteredRecordsUuid[i]];\n        }\n\n        item.selected = pageSelected;\n        return item;\n      }));\n      return;\n    } // Select All items on current page\n\n\n    if (event.target.checked) {\n      const newSelected = [];\n      const currentPageSelected = [];\n      items.forEach(item => {\n        if (!selected.includes(item.id)) {\n          newSelected.push(item.id);\n        }\n\n        currentPageSelected.push(item.id);\n      });\n\n      if (allSelectedPages.length > 0 && allSelectedPages.find(item => item.page === currentPage)) {\n        setAllSelectedPages(currentState => currentState.map(item => {\n          if (item.page === currentPage) {\n            item.selected = currentPageSelected;\n          }\n\n          return item;\n        }));\n      } else {\n        setAllSelectedPages(currentState => [...currentState, {\n          currentPage,\n          selected: currentPageSelected\n        }]);\n      }\n\n      setSelected(currentState => [...currentState, ...newSelected]);\n      return;\n    }\n\n    if (!event.target.checked) {\n      setAllSelectedPages(currentState => currentState.map(item => {\n        item.selected = [];\n        return item;\n      }));\n      setSelected(selected.filter(item => !items.find(selectedItem => item === selectedItem.id)));\n    }\n\n    if (selected.length === totalResults) {\n      setSelected([]);\n    }\n  }\n\n  function handleClick(event, id) {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setAllSelectedPages(currentState => currentState.map(item => {\n      if (item.page === currentPage) {\n        if (newSelected.find(arrId => arrId === id) === id) {\n          item.selected = [...item.selected, id];\n        } else {\n          item.selected = item.selected.filter(itemId => itemId !== id);\n        }\n      }\n\n      return item;\n    }));\n    setSelected(newSelected);\n  }\n\n  function handleChangePage(event, newPage) {\n    setCurrentPage(newPage);\n  }\n\n  var _ref =\n  /*#__PURE__*/\n  React.createElement(PaginationControls, {\n    totalPages: totalPages,\n    resultCount: filteredResults,\n    count: totalResults,\n    currentPage: currentPage,\n    onChangePage: handleChangePage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  });\n\n  function handleRowChange(number) {\n    setRowsPerPage(number);\n    setCurrentPage(1);\n    setSelected([]);\n    setAllSelectedPages(setInitalViewState(number));\n  }\n\n  function handleColumnChange(e, id) {\n    setColumnsData(columnsData.map(column => {\n      if (column.id === id) {\n        column.show = e.target.checked;\n      }\n\n      return column;\n    }));\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(NSFiltersProvider, {\n    filterCategories: columns,\n    dateRangeProps: dateRangeProps,\n    lastUpdateProps: lastUpdateProps,\n    handleSelected: setSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, React.createElement(NSFilters, {\n    filterTitles: filterTitles,\n    enableSearch: enableSearch,\n    enableFilters: enableFilters,\n    tableSearchProps: tableSearchProps,\n    handleSelected: setSelected,\n    handlePageChange: setCurrentPage,\n    filterQueryTriggers: filterQueryTriggers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  })), React.createElement(TableStyleWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, React.createElement(Table, {\n    ref: tableRef,\n    className: classes.table,\n    \"aria-labelledby\": name,\n    size: \"medium\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, React.createElement(NSTableHead, {\n    totalResults: totalResults,\n    totalPossibleItems: rowsPerPage,\n    loading: loading,\n    selectAllLoading: selectAllLoading,\n    mapColumnIds: mapColumnIds,\n    columns: columnsData,\n    data: data,\n    numSelected: selected.length,\n    order: order,\n    orderBy: orderBy,\n    onSelectAllClick: handleSelectAllClick,\n    allSelectedPages: allSelectedPages,\n    currentPage: currentPage,\n    onRequestSort: handleOrderyBy,\n    arialLabels: arialLabels,\n    toolbarActions: toolbarActions,\n    showCheckboxes: showCheckboxes,\n    showTableSettings: showTableSettings,\n    columnChange: handleColumnChange,\n    densityChange: handleDensityChange,\n    density: density,\n    rowChange: handleRowChange,\n    handleReorder: handleReorder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }), React.createElement(NSTableBody, {\n    columns: columnsData,\n    formattedColumns: nsFormattedColumns,\n    isSelected: isSelected,\n    handleClick: handleClick,\n    loading: loading,\n    data: data,\n    density: density,\n    showCheckboxes: showCheckboxes,\n    showTableSettings: showTableSettings,\n    horizActions: horizActions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  })), !loading && data.length === 0 && React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    className: classes.notFoundContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.body,\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353\n    },\n    __self: this\n  }, intl.formatMessage(tableMessages.noRequests))), !loading && data.length > 0 && React.createElement(TablePagination, {\n    className: classes.paginationContainer,\n    rowsPerPageOptions: [10, 15, 20],\n    labelDisplayedRows: () => '',\n    labelRowsPerPage: \"\",\n    component: \"div\",\n    count: totalResults,\n    rowsPerPage: rowsPerPage,\n    page: currentPage - 1,\n    ActionsComponent: () => _ref,\n    backIconButtonProps: {\n      'aria-label': 'previous page'\n    },\n    nextIconButtonProps: {\n      'aria-label': 'next page'\n    },\n    onChangePage: handleChangePage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  })))));\n}\n\nNSTable.propTypes = {\n  intl: intlShape.isRequired,\n  name: PropTypes.string.isRequired,\n  filterTitles: PropTypes.object.isRequired,\n  formattedColumns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  columns: PropTypes.array.isRequired,\n  selected: PropTypes.array.isRequired,\n  setSelected: PropTypes.func.isRequired,\n  rowsPerPageProps: PropTypes.object.isRequired,\n  orderByProps: PropTypes.object.isRequired,\n  orderProps: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired,\n  tableSearchProps: PropTypes.object.isRequired,\n  filteredResults: PropTypes.number.isRequired,\n  totalResults: PropTypes.number.isRequired,\n  totalPages: PropTypes.number.isRequired,\n  mapColumnIds: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n  filiteredRecordsUuid: PropTypes.array.isRequired,\n  horizActions: PropTypes.array,\n  dateRangeProps: PropTypes.object,\n  lastUpdateProps: PropTypes.object,\n  filterQueryTriggers: PropTypes.object,\n  toolbarActions: PropTypes.array,\n  showCheckboxes: PropTypes.bool,\n  showTableSettings: PropTypes.bool,\n  arialLabels: PropTypes.object,\n  enableSearch: PropTypes.bool,\n  enableFilters: PropTypes.bool,\n  selectAllLoading: PropTypes.bool\n};\nconst IntlNSTable = injectIntl(NSTable);\nexport default memo(IntlNSTable, isSame);\nNSTable.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"NSTable\",\n  \"props\": {\n    \"horizActions\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"showCheckboxes\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"showTableSettings\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"selectAllLoading\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"dateRangeProps\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"lastUpdateProps\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"toolbarActions\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filterTitles\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"formattedColumns\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"data\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columns\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"selected\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"setSelected\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"rowsPerPageProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"orderByProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"orderProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"pageProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"tableSearchProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filteredResults\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"totalResults\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"totalPages\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"mapColumnIds\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"loading\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filiteredRecordsUuid\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filterQueryTriggers\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"arialLabels\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"enableSearch\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"enableFilters\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NSTable/index.js\"] = {\n    name: \"NSTable\",\n    docgenInfo: NSTable.__docgenInfo,\n    path: \"src/components/NSTable/index.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSTable/index.js"],"names":["React","useState","useEffect","useRef","useCallback","memo","PropTypes","isEqual","injectIntl","intlShape","Paper","Table","TablePagination","Grid","Typography","resizableGrid","NSTableHead","NSFilters","PaginationControls","NSTableBody","NSFiltersProvider","tableMessages","styles","TableStyleWrapper","isSame","prev","next","ignoreProps","columns","arialLabels","formattedColumns","name","setSelected","toolbarActions","horizActions","map","item","custom","prevScrubed","nextScrubed","NSTable","intl","showCheckboxes","showTableSettings","selectAllLoading","filterTitles","data","selected","enableSearch","enableFilters","rowsPerPageProps","rowsPerPage","setRowsPerPage","orderByProps","orderBy","setOrderBy","orderProps","order","setOrder","pageProps","currentPage","setCurrentPage","filterQueryTriggers","dateRangeProps","tableSearchProps","lastUpdateProps","filteredResults","totalResults","totalPages","mapColumnIds","loading","filiteredRecordsUuid","classes","tableRef","density","setDensity","nsFormattedColumns","setNSFormattedColumns","allSelectedPages","setAllSelectedPages","headerRowColumns","filter","column","find","fm","columnId","id","columnsData","setColumnsData","setInitalViewState","rpp","pages","i","Math","ceil","push","page","removeEventListners","current","dismount","isSelected","indexOf","handleReorder","updatedColumnData","reOrderedColumns","forEach","index","handleDensityChange","e","newDensity","handleOrderyBy","event","newOrder","o","handleSelectAllClick","items","target","parentElement","classList","contains","currentState","idx","pageSelected","condition","checked","newSelected","currentPageSelected","includes","length","selectedItem","handleClick","selectedIndex","concat","slice","arrId","itemId","handleChangePage","newPage","handleRowChange","number","handleColumnChange","show","root","paper","table","notFoundContainer","body","formatMessage","noRequests","paginationContainer","propTypes","isRequired","string","object","array","func","bool","IntlNSTable"],"mappings":"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","sourcesContent":["/**\n *\n * NSTable\n *\n */\n\nimport React, { useState, useEffect, useRef, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport isEqual from 'fast-deep-equal';\nimport { injectIntl, intlShape } from 'react-intl';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport resizableGrid from '../../utils/tableResizer';\nimport NSTableHead from '../NSTable/nsTableHead';\nimport NSFilters from '../NSTable/nsTableHead';\nimport PaginationControls from '../NSTable/paginationControls';\nimport NSTableBody from '../NSTable/nsTableBody';\nimport { NSFiltersProvider } from './context/filters';\nimport tableMessages from './messages';\n\nimport { styles, TableStyleWrapper } from './styles';\n\nconst isSame = (prev, next) => {\n  // Removing Properties that doesn't need checking\n  const ignoreProps = columns => ({\n    arialLabels: null,\n    formattedColumns: null,\n    name: null,\n    setSelected: null,\n    toolbarActions: null,\n    horizActions: null,\n    columns: columns.map(item => ({ ...item, custom: null })),\n  });\n  const prevScrubed = {\n    ...prev,\n    ...ignoreProps(prev.columns),\n  };\n  const nextScrubed = {\n    ...next,\n    ...ignoreProps(next.columns),\n  };\n\n  return isEqual(prevScrubed, nextScrubed);\n};\n\nfunction NSTable({\n  intl,\n  name,\n  horizActions = [],\n  showCheckboxes = true,\n  showTableSettings = true,\n  selectAllLoading = false,\n  arialLabels,\n  filterTitles,\n  data,\n  selected,\n  setSelected,\n  formattedColumns,\n  columns,\n  enableSearch,\n  enableFilters,\n  rowsPerPageProps: { rowsPerPage, setRowsPerPage },\n  orderByProps: { orderBy, setOrderBy },\n  orderProps: { order, setOrder },\n  pageProps: { currentPage, setCurrentPage },\n  filterQueryTriggers,\n  dateRangeProps = {},\n  tableSearchProps,\n  lastUpdateProps = {},\n  filteredResults,\n  totalResults,\n  totalPages,\n  mapColumnIds,\n  loading,\n  toolbarActions = [],\n  filiteredRecordsUuid,\n}) {\n  const classes = styles();\n  const tableRef = useRef();\n  const [density, setDensity] = useState('72px');\n  const [nsFormattedColumns, setNSFormattedColumns] = useState(\n    formattedColumns\n  );\n  const [allSelectedPages, setAllSelectedPages] = useState([]);\n\n  const headerRowColumns = columns.filter(column =>\n    formattedColumns.find(fm => fm.columnId === column.id)\n  );\n  const [columnsData, setColumnsData] = useState(headerRowColumns);\n\n  const setInitalViewState = useCallback(\n    (rpp = rowsPerPage) => {\n      const pages = [];\n      for (let i = 1; i <= Math.ceil(totalResults / rpp); i += 1) {\n        pages.push({ page: i, selected: [] });\n      }\n      return pages;\n    },\n    [rowsPerPage, totalResults]\n  );\n\n  useEffect(() => {\n    let removeEventListners = null;\n    if (tableRef.current) {\n      removeEventListners = resizableGrid(tableRef.current, '#797979').dismount;\n    }\n    setAllSelectedPages(setInitalViewState());\n\n    return () => {\n      if (tableRef) {\n        removeEventListners();\n      }\n    };\n  }, [columnsData, setInitalViewState]);\n\n  const isSelected = id => selected.indexOf(id) !== -1;\n\n  function handleReorder(updatedColumnData) {\n    const reOrderedColumns = [];\n    updatedColumnData.forEach((column, index) => {\n      reOrderedColumns[index] = {\n        ...nsFormattedColumns.find(item => item.columnId === column.id),\n      };\n    });\n    setColumnsData(updatedColumnData);\n    setNSFormattedColumns(reOrderedColumns);\n  }\n\n  const handleDensityChange = (e, newDensity) => {\n    setDensity(newDensity || '72px');\n  };\n\n  function handleOrderyBy(event, columnId) {\n    const newOrder = o => (o === 'asc' ? 'desc' : 'asc');\n    setOrder(newOrder(order));\n    setOrderBy(mapColumnIds[columnId]);\n  }\n\n  function handleSelectAllClick(event, items) {\n    // Select All Items\n    if (event.target.parentElement.classList.contains('select-all-link')) {\n      setSelected(filiteredRecordsUuid);\n      setAllSelectedPages(currentState =>\n        currentState.map((item, idx) => {\n          let pageSelected = [];\n          const condition = allSelectedPages[idx + 1]\n            ? rowsPerPage\n            : totalResults - (item.page * rowsPerPage - rowsPerPage);\n\n          for (\n            let i = idx * rowsPerPage;\n            i < idx * rowsPerPage + condition;\n            i += 1\n          ) {\n            pageSelected = [...pageSelected, filiteredRecordsUuid[i]];\n          }\n          item.selected = pageSelected;\n          return item;\n        })\n      );\n      return;\n    }\n    // Select All items on current page\n    if (event.target.checked) {\n      const newSelected = [];\n      const currentPageSelected = [];\n\n      items.forEach(item => {\n        if (!selected.includes(item.id)) {\n          newSelected.push(item.id);\n        }\n        currentPageSelected.push(item.id);\n      });\n\n      if (\n        allSelectedPages.length > 0 &&\n        allSelectedPages.find(item => item.page === currentPage)\n      ) {\n        setAllSelectedPages(currentState =>\n          currentState.map(item => {\n            if (item.page === currentPage) {\n              item.selected = currentPageSelected;\n            }\n            return item;\n          })\n        );\n      } else {\n        setAllSelectedPages(currentState => [\n          ...currentState,\n          { currentPage, selected: currentPageSelected },\n        ]);\n      }\n\n      setSelected(currentState => [...currentState, ...newSelected]);\n      return;\n    }\n\n    if (!event.target.checked) {\n      setAllSelectedPages(currentState =>\n        currentState.map(item => {\n          item.selected = [];\n          return item;\n        })\n      );\n\n      setSelected(\n        selected.filter(\n          item => !items.find(selectedItem => item === selectedItem.id)\n        )\n      );\n    }\n    if (selected.length === totalResults) {\n      setSelected([]);\n    }\n  }\n\n  function handleClick(event, id) {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n\n    setAllSelectedPages(currentState =>\n      currentState.map(item => {\n        if (item.page === currentPage) {\n          if (newSelected.find(arrId => arrId === id) === id) {\n            item.selected = [...item.selected, id];\n          } else {\n            item.selected = item.selected.filter(itemId => itemId !== id);\n          }\n        }\n\n        return item;\n      })\n    );\n\n    setSelected(newSelected);\n  }\n\n  function handleChangePage(event, newPage) {\n    setCurrentPage(newPage);\n  }\n\n  function handleRowChange(number) {\n    setRowsPerPage(number);\n    setCurrentPage(1);\n    setSelected([]);\n    setAllSelectedPages(setInitalViewState(number));\n  }\n\n  function handleColumnChange(e, id) {\n    setColumnsData(\n      columnsData.map(column => {\n        if (column.id === id) {\n          column.show = e.target.checked;\n        }\n        return column;\n      })\n    );\n  }\n\n  return (\n    <>\n      <NSFiltersProvider\n        filterCategories={columns}\n        dateRangeProps={dateRangeProps}\n        lastUpdateProps={lastUpdateProps}\n        handleSelected={setSelected}\n      >\n        <NSFilters\n          filterTitles={filterTitles}\n          enableSearch={enableSearch}\n          enableFilters={enableFilters}\n          tableSearchProps={tableSearchProps}\n          handleSelected={setSelected}\n          handlePageChange={setCurrentPage}\n          filterQueryTriggers={filterQueryTriggers}\n        />\n      </NSFiltersProvider>\n\n      <TableStyleWrapper>\n        <div className={classes.root}>\n          <Paper className={classes.paper}>\n            <Table\n              ref={tableRef}\n              className={classes.table}\n              aria-labelledby={name}\n              size=\"medium\"\n            >\n              <NSTableHead\n                totalResults={totalResults}\n                totalPossibleItems={rowsPerPage}\n                loading={loading}\n                selectAllLoading={selectAllLoading}\n                mapColumnIds={mapColumnIds}\n                columns={columnsData}\n                data={data}\n                numSelected={selected.length}\n                order={order}\n                orderBy={orderBy}\n                onSelectAllClick={handleSelectAllClick}\n                allSelectedPages={allSelectedPages}\n                currentPage={currentPage}\n                onRequestSort={handleOrderyBy}\n                arialLabels={arialLabels}\n                toolbarActions={toolbarActions}\n                showCheckboxes={showCheckboxes}\n                showTableSettings={showTableSettings}\n                columnChange={handleColumnChange}\n                densityChange={handleDensityChange}\n                density={density}\n                rowChange={handleRowChange}\n                handleReorder={handleReorder}\n              />\n              <NSTableBody\n                columns={columnsData}\n                formattedColumns={nsFormattedColumns}\n                isSelected={isSelected}\n                handleClick={handleClick}\n                loading={loading}\n                data={data}\n                density={density}\n                showCheckboxes={showCheckboxes}\n                showTableSettings={showTableSettings}\n                horizActions={horizActions}\n              />\n            </Table>\n\n            {!loading && data.length === 0 && (\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                className={classes.notFoundContainer}\n              >\n                <Typography className={classes.body} variant=\"body1\">\n                  {intl.formatMessage(tableMessages.noRequests)}\n                </Typography>\n              </Grid>\n            )}\n\n            {!loading && data.length > 0 && (\n              <TablePagination\n                className={classes.paginationContainer}\n                rowsPerPageOptions={[10, 15, 20]}\n                labelDisplayedRows={() => ''}\n                labelRowsPerPage=\"\"\n                component=\"div\"\n                count={totalResults}\n                rowsPerPage={rowsPerPage}\n                page={currentPage - 1}\n                ActionsComponent={() => (\n                  <PaginationControls\n                    totalPages={totalPages}\n                    resultCount={filteredResults}\n                    count={totalResults}\n                    currentPage={currentPage}\n                    onChangePage={handleChangePage}\n                  />\n                )}\n                backIconButtonProps={{\n                  'aria-label': 'previous page',\n                }}\n                nextIconButtonProps={{\n                  'aria-label': 'next page',\n                }}\n                onChangePage={handleChangePage}\n              />\n            )}\n          </Paper>\n        </div>\n      </TableStyleWrapper>\n    </>\n  );\n}\n\nNSTable.propTypes = {\n  intl: intlShape.isRequired,\n  name: PropTypes.string.isRequired,\n  filterTitles: PropTypes.object.isRequired,\n  formattedColumns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  columns: PropTypes.array.isRequired,\n  selected: PropTypes.array.isRequired,\n  setSelected: PropTypes.func.isRequired,\n  rowsPerPageProps: PropTypes.object.isRequired,\n  orderByProps: PropTypes.object.isRequired,\n  orderProps: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired,\n  tableSearchProps: PropTypes.object.isRequired,\n  filteredResults: PropTypes.number.isRequired,\n  totalResults: PropTypes.number.isRequired,\n  totalPages: PropTypes.number.isRequired,\n  mapColumnIds: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n  filiteredRecordsUuid: PropTypes.array.isRequired,\n  horizActions: PropTypes.array,\n  dateRangeProps: PropTypes.object,\n  lastUpdateProps: PropTypes.object,\n  filterQueryTriggers: PropTypes.object,\n  toolbarActions: PropTypes.array,\n  showCheckboxes: PropTypes.bool,\n  showTableSettings: PropTypes.bool,\n  arialLabels: PropTypes.object,\n  enableSearch: PropTypes.bool,\n  enableFilters: PropTypes.bool,\n  selectAllLoading: PropTypes.bool,\n};\n\nconst IntlNSTable = injectIntl(NSTable);\n\nexport default memo(IntlNSTable, isSame);\n"]},"metadata":{},"sourceType":"module"}