{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/RecipientView/Widget/fieldTypes/photo.js\";\n\n/**\n *\n * Photos Field Type\n *\n */\nimport React, { useContext, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport Viewer from 'react-viewer';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport placeHolderImg from 'assets/images/familyPlaceholder.png';\nimport { generateImg } from 'utils/helpers';\nimport globalMessages from 'messages';\nimport { FieldsContext } from '../../context/fields';\nimport { recipientListStyles } from '../../../styles';\nexport function Photo({\n  intl,\n  field,\n  values,\n  label,\n  editMode = false,\n  className,\n  recipientData\n}) {\n  const classes = recipientListStyles();\n  const {\n    activePhotoProps: {\n      activePhotoField,\n      setActivePhotoField\n    },\n    recipientPhotoProps: {\n      setRecipientPhoto\n    }\n  } = useContext(FieldsContext);\n  const [localPhoto, setLocalPhoto] = useState(values[field.name] ? generateImg(values[field.name]) : placeHolderImg);\n  const inputRef = useRef(null);\n  const [visible, setVisible] = useState(false);\n\n  const getBase64 = (file, cb) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => cb(reader.result);\n\n    reader.onerror = error => {\n      console.log('Error converting file to base64!: ', error);\n    };\n  };\n\n  const editModeCardAction = () => {\n    if (inputRef.current) {\n      inputRef.current.click();\n      setActivePhotoField(field.name);\n    }\n  };\n\n  const photoViewMode = () => {\n    setVisible(true);\n  };\n\n  return React.createElement(Card, {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, editMode && React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"caption\",\n    className: classes.caption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, label), React.createElement(CardActionArea, {\n    className: classes.recipientChildImg,\n    onClick: editMode ? editModeCardAction : photoViewMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(CardMedia, {\n    component: \"img\",\n    alt: field.contexts.us_en.label,\n    height: \"100%\",\n    image: localPhoto,\n    title: field.contexts.us_en.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), editMode && React.createElement(React.Fragment, null, React.createElement(\"p\", {\n    className: clsx(classes.imgActionText, 'img-action-text'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, intl.formatMessage(globalMessages.changePhoto)), React.createElement(\"input\", {\n    type: \"file\",\n    ref: inputRef,\n    onChange: e => getBase64(e.target.files[0], result => {\n      if (recipientData.photos[activePhotoField] !== result) {\n        setRecipientPhoto({\n          [activePhotoField]: result\n        });\n        setLocalPhoto(result);\n      }\n    }),\n    accept: \"image/jpeg, image/png, image/tiff, image/ief, image/gif\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }))), React.createElement(Viewer, {\n    visible: visible,\n    changeable: false,\n    showTotal: false,\n    zIndex: 1200,\n    noNavbar: true,\n    onClose: () => setVisible(false),\n    images: [{\n      src: localPhoto,\n      alt: field.contexts.us_en.label\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }));\n}\nPhoto.displayName = \"Photo\";\nPhoto.propTypes = {\n  intl: intlShape.isRequired,\n  values: PropTypes.object.isRequired,\n  field: PropTypes.object.isRequired,\n  label: PropTypes.string.isRequired,\n  recipientData: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  editMode: PropTypes.bool\n};\nconst intlPhoto = injectIntl(Photo);\nexport default intlPhoto;\nPhoto.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Photo\",\n  \"props\": {\n    \"editMode\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"values\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"field\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"recipientData\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/RecipientList/RecipientView/Widget/fieldTypes/photo.js\"] = {\n    name: \"Photo\",\n    docgenInfo: Photo.__docgenInfo,\n    path: \"src/components/RecipientList/RecipientView/Widget/fieldTypes/photo.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/RecipientView/Widget/fieldTypes/photo.js"],"names":["React","useContext","useRef","useState","PropTypes","clsx","injectIntl","intlShape","Viewer","Card","CardActionArea","CardMedia","Typography","placeHolderImg","generateImg","globalMessages","FieldsContext","recipientListStyles","Photo","intl","field","values","label","editMode","className","recipientData","classes","activePhotoProps","activePhotoField","setActivePhotoField","recipientPhotoProps","setRecipientPhoto","localPhoto","setLocalPhoto","name","inputRef","visible","setVisible","getBase64","file","cb","reader","FileReader","readAsDataURL","onload","result","onerror","error","console","log","editModeCardAction","current","click","photoViewMode","caption","recipientChildImg","contexts","us_en","imgActionText","formatMessage","changePhoto","e","target","files","photos","src","alt","propTypes","isRequired","object","string","bool","intlPhoto"],"mappings":"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","sourcesContent":["/**\n *\n * Photos Field Type\n *\n */\n\nimport React, { useContext, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport Viewer from 'react-viewer';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nimport placeHolderImg from 'assets/images/familyPlaceholder.png';\nimport { generateImg } from 'utils/helpers';\nimport globalMessages from 'messages';\nimport { FieldsContext } from '../../context/fields';\nimport { recipientListStyles } from '../../../styles';\n\nexport function Photo({\n  intl,\n  field,\n  values,\n  label,\n  editMode = false,\n  className,\n  recipientData,\n}) {\n  const classes = recipientListStyles();\n  const {\n    activePhotoProps: { activePhotoField, setActivePhotoField },\n    recipientPhotoProps: { setRecipientPhoto },\n  } = useContext(FieldsContext);\n\n  const [localPhoto, setLocalPhoto] = useState(\n    values[field.name] ? generateImg(values[field.name]) : placeHolderImg\n  );\n\n  const inputRef = useRef(null);\n  const [visible, setVisible] = useState(false);\n\n  const getBase64 = (file, cb) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => cb(reader.result);\n    reader.onerror = error => {\n      console.log('Error converting file to base64!: ', error);\n    };\n  };\n\n  const editModeCardAction = () => {\n    if (inputRef.current) {\n      inputRef.current.click();\n      setActivePhotoField(field.name);\n    }\n  };\n\n  const photoViewMode = () => {\n    setVisible(true);\n  };\n\n  return (\n    <Card className={className}>\n      {editMode && (\n        <Typography gutterBottom variant=\"caption\" className={classes.caption}>\n          {label}\n        </Typography>\n      )}\n\n      <CardActionArea\n        className={classes.recipientChildImg}\n        onClick={editMode ? editModeCardAction : photoViewMode}\n      >\n        <CardMedia\n          component=\"img\"\n          alt={field.contexts.us_en.label}\n          height=\"100%\"\n          image={localPhoto}\n          title={field.contexts.us_en.label}\n        />\n        {editMode && (\n          <>\n            <p className={clsx(classes.imgActionText, 'img-action-text')}>\n              {intl.formatMessage(globalMessages.changePhoto)}\n            </p>\n            <input\n              type=\"file\"\n              ref={inputRef}\n              onChange={e =>\n                getBase64(e.target.files[0], result => {\n                  if (recipientData.photos[activePhotoField] !== result) {\n                    setRecipientPhoto({\n                      [activePhotoField]: result,\n                    });\n                    setLocalPhoto(result);\n                  }\n                })\n              }\n              accept=\"image/jpeg, image/png, image/tiff, image/ief, image/gif\"\n            />\n          </>\n        )}\n      </CardActionArea>\n      <Viewer\n        visible={visible}\n        changeable={false}\n        showTotal={false}\n        zIndex={1200}\n        noNavbar\n        onClose={() => setVisible(false)}\n        images={[\n          {\n            src: localPhoto,\n            alt: field.contexts.us_en.label,\n          },\n        ]}\n      />\n    </Card>\n  );\n}\n\nPhoto.propTypes = {\n  intl: intlShape.isRequired,\n  values: PropTypes.object.isRequired,\n  field: PropTypes.object.isRequired,\n  label: PropTypes.string.isRequired,\n  recipientData: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  editMode: PropTypes.bool,\n};\n\nconst intlPhoto = injectIntl(Photo);\n\nexport default intlPhoto;\n"]},"metadata":{},"sourceType":"module"}