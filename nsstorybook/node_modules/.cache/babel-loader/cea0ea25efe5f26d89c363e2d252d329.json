{"ast":null,"code":"import _objectWithoutProperties from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSFields/photo.js\";\n\n/**\n *\n * Photo Field Type\n *\n */\nimport React, { useCallback } from 'react';\nimport { asField } from 'informed';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { useDropzone } from 'react-dropzone';\nimport Typography from '@material-ui/core/Typography';\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { generateImg } from '../../utils/helpers';\nimport { inputStyles } from 'global-styles';\nimport globalMessage from 'messages';\nimport { styles } from './styles';\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(DeleteIcon, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 100\n  },\n  __self: this\n});\n\nconst Photo = asField((_ref) => {\n  let {\n    fieldState,\n    fieldApi\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"fieldState\", \"fieldApi\"]);\n\n  const {\n    value\n  } = fieldState;\n  const {\n    setValue,\n    setTouched\n  } = fieldApi;\n\n  const {\n    label,\n    intl\n  } = props,\n        rest = _objectWithoutProperties(props, [\"label\", \"intl\"]);\n\n  const classes = styles();\n  const globalClasses = inputStyles(fieldState.error)();\n\n  const getBase64 = (file, cb) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => cb(reader.result);\n\n    reader.onerror = error => {\n      console.log('Error converting file to base64!: ', error);\n    };\n  };\n\n  const onDrop = useCallback(acceptedFile => {\n    getBase64(acceptedFile[0], result => {\n      setValue(generateImg(result));\n      setTouched(true);\n    });\n  }, [setTouched, setValue]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: 'image/jpeg, image/png, image/tiff, image/ief, image/gif'\n  }); // These two props are not native and are not needed\n\n  delete rest.forwardedRef;\n  delete rest.debug;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: clsx(classes.dropzone, 'dropzone')\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"flex-start\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, value ? React.createElement(Grid, {\n    item: true,\n    className: classes.imgContainer,\n    onClick: e => {\n      e.stopPropagation();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: value,\n    alt: label,\n    className: clsx(classes.img, 'uploaded-image'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"flex-start\",\n    alignItems: \"center\",\n    className: clsx(classes.overlay, 'img-overlay'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    className: classes.deleteText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, intl.formatMessage(globalMessage.removeImg)), React.createElement(IconButton, {\n    className: classes.deleteBtn,\n    \"aria-label\": \"delete photo\",\n    onClick: () => {\n      setValue('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, _ref2))) : React.createElement(React.Fragment, null, React.createElement(PhotoCameraIcon, {\n    className: classes.icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"body1\",\n    className: classes.caption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, isDragActive ? intl.formatMessage(globalMessage.dropFile) : label)))), fieldState.error ? React.createElement(\"small\", {\n    className: clsx(globalClasses.error, globalClasses.marginTop),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, fieldState.error) : null);\n});\nPhoto.propTypes = {\n  intl: intlShape.isRequired\n};\nconst intlPhoto = injectIntl(Photo);\nexport default intlPhoto;","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSFields/photo.js"],"names":["React","useCallback","asField","clsx","injectIntl","intlShape","useDropzone","Typography","PhotoCameraIcon","Grid","IconButton","DeleteIcon","generateImg","inputStyles","globalMessage","styles","Photo","fieldState","fieldApi","props","value","setValue","setTouched","label","intl","rest","classes","globalClasses","error","getBase64","file","cb","reader","FileReader","readAsDataURL","onload","result","onerror","console","log","onDrop","acceptedFile","getRootProps","getInputProps","isDragActive","accept","forwardedRef","debug","className","dropzone","imgContainer","e","stopPropagation","img","overlay","deleteText","formatMessage","removeImg","deleteBtn","icon","caption","dropFile","marginTop","propTypes","isRequired","intlPhoto"],"mappings":"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","sourcesContent":["/**\n *\n * Photo Field Type\n *\n */\n\nimport React, { useCallback } from 'react';\nimport { asField } from 'informed';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { useDropzone } from 'react-dropzone';\n\nimport Typography from '@material-ui/core/Typography';\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { generateImg } from '../../utils/helpers';\nimport { inputStyles } from 'global-styles';\nimport globalMessage from 'messages';\nimport { styles } from './styles';\n\nconst Photo = asField(({ fieldState, fieldApi, ...props }) => {\n  const { value } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { label, intl, ...rest } = props;\n  const classes = styles();\n  const globalClasses = inputStyles(fieldState.error)();\n\n  const getBase64 = (file, cb) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => cb(reader.result);\n    reader.onerror = error => {\n      console.log('Error converting file to base64!: ', error);\n    };\n  };\n\n  const onDrop = useCallback(\n    acceptedFile => {\n      getBase64(acceptedFile[0], result => {\n        setValue(generateImg(result));\n        setTouched(true);\n      });\n    },\n    [setTouched, setValue]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: 'image/jpeg, image/png, image/tiff, image/ief, image/gif',\n  });\n\n  // These two props are not native and are not needed\n  delete rest.forwardedRef;\n  delete rest.debug;\n\n  return (\n    <>\n      <div {...getRootProps({ className: clsx(classes.dropzone, 'dropzone') })}>\n        <input {...getInputProps()} />\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n        >\n          {value ? (\n            <Grid\n              item\n              className={classes.imgContainer}\n              onClick={e => {\n                e.stopPropagation();\n              }}\n            >\n              <img\n                src={value}\n                alt={label}\n                className={clsx(classes.img, 'uploaded-image')}\n              />\n\n              <Grid\n                container\n                direction=\"column\"\n                justify=\"flex-start\"\n                alignItems=\"center\"\n                className={clsx(classes.overlay, 'img-overlay')}\n              >\n                <Typography gutterBottom className={classes.deleteText}>\n                  {intl.formatMessage(globalMessage.removeImg)}\n                </Typography>\n                <IconButton\n                  className={classes.deleteBtn}\n                  aria-label=\"delete photo\"\n                  onClick={() => {\n                    setValue('');\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Grid>\n            </Grid>\n          ) : (\n            <>\n              <PhotoCameraIcon className={classes.icon} />\n              <Typography\n                gutterBottom\n                variant=\"body1\"\n                className={classes.caption}\n              >\n                {isDragActive\n                  ? intl.formatMessage(globalMessage.dropFile)\n                  : label}\n              </Typography>\n            </>\n          )}\n        </Grid>\n      </div>\n      {fieldState.error ? (\n        <small className={clsx(globalClasses.error, globalClasses.marginTop)}>\n          {fieldState.error}\n        </small>\n      ) : null}\n    </>\n  );\n});\n\nPhoto.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nconst intlPhoto = injectIntl(Photo);\n\nexport default intlPhoto;\n"]},"metadata":{},"sourceType":"module"}