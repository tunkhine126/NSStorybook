{"ast":null,"code":"import _objectWithoutProperties from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/SelectValidation/index.js\";\n\n/**\n *\n * SelectValidation\n *\n */\nimport React from 'react';\nimport { asField } from 'informed';\nimport clsx from 'clsx';\nimport { inputStyles, SelectStyle } from '../../global-styles';\nimport NSSelect from 'components/shared/NSSelect';\nexport const SelectValidation = asField((_ref) => {\n  let {\n    fieldApi,\n    fieldState\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"fieldApi\", \"fieldState\"]);\n\n  const classes = inputStyles(fieldState.error)();\n  const globalClasses = SelectStyle(fieldState.error)();\n  const {\n    value\n  } = fieldState;\n  const {\n    setValue,\n    setTouched\n  } = fieldApi;\n\n  const {\n    onChange,\n    customClass,\n    onBlur\n  } = props,\n        rest = _objectWithoutProperties(props, [\"onChange\", \"customClass\", \"onBlur\"]); // These two props are not native and are not needed\n\n\n  delete rest.forwardedRef;\n  delete rest.debug;\n  return React.createElement(React.Fragment, null, React.createElement(NSSelect, Object.assign({}, rest, {\n    className: clsx(customClass, globalClasses.root),\n    values: !value && value !== 0 ? '' : value,\n    update: e => {\n      setValue(e.target.value);\n\n      if (onChange) {\n        onChange(e.target.value);\n      }\n    },\n    onBlur: e => {\n      setTouched(true);\n\n      if (onBlur) {\n        onBlur(e.target.value);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })), fieldState.error ? React.createElement(\"small\", {\n    className: classes.error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, fieldState.error) : null);\n});\nexport default SelectValidation;","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/SelectValidation/index.js"],"names":["React","asField","clsx","inputStyles","SelectStyle","NSSelect","SelectValidation","fieldApi","fieldState","props","classes","error","globalClasses","value","setValue","setTouched","onChange","customClass","onBlur","rest","forwardedRef","debug","root","e","target"],"mappings":";;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,qBAAzC;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAO,MAAMC,gBAAgB,GAAGL,OAAO,CACrC,UAAwC;AAAA,MAAvC;AAAEM,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAuC;AAAA,MAAZC,KAAY;;AACtC,QAAMC,OAAO,GAAGP,WAAW,CAACK,UAAU,CAACG,KAAZ,CAAX,EAAhB;AACA,QAAMC,aAAa,GAAGR,WAAW,CAACI,UAAU,CAACG,KAAZ,CAAX,EAAtB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAYL,UAAlB;AACA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA2BR,QAAjC;;AACA,QAAM;AAAES,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA;AAAzB,MAA6CT,KAAnD;AAAA,QAA0CU,IAA1C,4BAAmDV,KAAnD,yCALsC,CAMtC;;;AACA,SAAOU,IAAI,CAACC,YAAZ;AACA,SAAOD,IAAI,CAACE,KAAZ;AAEA,SACE,0CACE,oBAAC,QAAD,oBACMF,IADN;AAEE,IAAA,SAAS,EAAEjB,IAAI,CAACe,WAAD,EAAcL,aAAa,CAACU,IAA5B,CAFjB;AAGE,IAAA,MAAM,EAAE,CAACT,KAAD,IAAUA,KAAK,KAAK,CAApB,GAAwB,EAAxB,GAA6BA,KAHvC;AAIE,IAAA,MAAM,EAAEU,CAAC,IAAI;AACXT,MAAAA,QAAQ,CAACS,CAAC,CAACC,MAAF,CAASX,KAAV,CAAR;;AACA,UAAIG,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASX,KAAV,CAAR;AACD;AACF,KATH;AAUE,IAAA,MAAM,EAAEU,CAAC,IAAI;AACXR,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAIG,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACK,CAAC,CAACC,MAAF,CAASX,KAAV,CAAN;AACD;AACF,KAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAmBGL,UAAU,CAACG,KAAX,GACC;AAAO,IAAA,SAAS,EAAED,OAAO,CAACC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCH,UAAU,CAACG,KAA7C,CADD,GAEG,IArBN,CADF;AAyBD,CApCoC,CAAhC;AAuCP,eAAeL,gBAAf","sourcesContent":["/**\n *\n * SelectValidation\n *\n */\n\nimport React from 'react';\nimport { asField } from 'informed';\nimport clsx from 'clsx';\n\nimport { inputStyles, SelectStyle } from '../../global-styles';\nimport NSSelect from 'components/shared/NSSelect';\n\nexport const SelectValidation = asField(\n  ({ fieldApi, fieldState, ...props }) => {\n    const classes = inputStyles(fieldState.error)();\n    const globalClasses = SelectStyle(fieldState.error)();\n    const { value } = fieldState;\n    const { setValue, setTouched } = fieldApi;\n    const { onChange, customClass, onBlur, ...rest } = props;\n    // These two props are not native and are not needed\n    delete rest.forwardedRef;\n    delete rest.debug;\n\n    return (\n      <>\n        <NSSelect\n          {...rest}\n          className={clsx(customClass, globalClasses.root)}\n          values={!value && value !== 0 ? '' : value}\n          update={e => {\n            setValue(e.target.value);\n            if (onChange) {\n              onChange(e.target.value);\n            }\n          }}\n          onBlur={e => {\n            setTouched(true);\n            if (onBlur) {\n              onBlur(e.target.value);\n            }\n          }}\n        />\n\n        {fieldState.error ? (\n          <small className={classes.error}>{fieldState.error}</small>\n        ) : null}\n      </>\n    );\n  }\n);\n\nexport default SelectValidation;\n"]},"metadata":{},"sourceType":"module"}