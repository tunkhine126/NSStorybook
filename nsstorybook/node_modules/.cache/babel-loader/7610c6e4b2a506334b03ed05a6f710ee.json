{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nimport _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSFilters/nsFilters.js\";\n\n/**\n *\n * NSFilters\n *\n */\nimport React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport { resetNestedLevels } from 'utils/helpers';\nimport SelectFilter from './selectFilters';\nimport { NSFiltersContext } from './context/filters';\nimport PillClose from '../Icons/pillClose';\nimport { styles, InputFormatStyle, SelectFormatStyle } from './styles';\n\nfunction NSFilters({\n  intl,\n  messages,\n  filterQueryTriggers\n}) {\n  const {\n    multiSelect: {\n      multiSelectOptions,\n      setMultiSelectOptions\n    },\n    levelSelect: {\n      levelSelectOptions,\n      setLevelSelectOptions\n    },\n    localDateProps: {\n      setlocalDateRange\n    },\n    calendarProps: {\n      setShowCalendar\n    },\n    filterCategories,\n    lastUpdateProps,\n    dateRangeProps,\n    handleSelected\n  } = useContext(NSFiltersContext);\n  const classes = styles();\n  const {\n    setLastUpdate\n  } = lastUpdateProps;\n  const {\n    setDateRange\n  } = dateRangeProps;\n  const defaultFilters = filterCategories.filter(filter => filter.defaultFilter).map(filter => ({\n    filter: filter.id,\n    caption: filter.caption\n  }));\n  defaultFilters.unshift('');\n  const [filters] = useState(defaultFilters);\n  const filterType = filterCategories.filter(filter => filter.filterWidth).map(filter => ({\n    id: filter.id,\n    width: makeStyles(() => ({\n      btnWidth: {\n        width: filter.filterWidth\n      }\n    }))().btnWidth,\n    type: filter.type\n  }));\n  filterType.unshift({\n    id: null\n  });\n  let chipList = [];\n  const filterList = filters.map(({\n    filter,\n    caption\n  }, idx) => {\n    const hasBtnWidth = filterCategories.filter(c => c.id === filter)[0];\n\n    if (filter && hasBtnWidth) {\n      const {\n        width\n      } = filterType.filter(c => c.id === hasBtnWidth.id)[0] || 150;\n      const {\n        type\n      } = filterType.filter(c => c.id === hasBtnWidth.id)[0];\n\n      if (type) {\n        const {\n          columnData,\n          id,\n          noData,\n          label\n        } = filterCategories.filter(i => i.id === filter)[0];\n        let resetLocal = null;\n        let localData = null;\n\n        switch (type) {\n          case 'multi':\n            resetLocal = setMultiSelectOptions;\n            localData = multiSelectOptions[id];\n            break;\n\n          case 'levels':\n            resetLocal = setLevelSelectOptions;\n            localData = levelSelectOptions[id];\n            break;\n\n          case 'date':\n            resetLocal = setLastUpdate;\n            break;\n\n          default:\n            resetLocal = null;\n            localData = null;\n        }\n\n        chipList = [...chipList, {\n          label: label.toUpperCase(),\n          id,\n          chips: columnData ? columnData.chips.join(', ') : [],\n          clear: columnData ? columnData.clear : () => {},\n          localData,\n          resetLocal,\n          type\n        }];\n        return React.createElement(Grid, {\n          item: true,\n          className: classes.selectMargins,\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          container: true,\n          item: true,\n          direction: \"column\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          className: classes.caption,\n          variant: \"caption\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, caption), React.createElement(SelectFilter, {\n          label: intl.formatMessage(messages[filter]),\n          id: id,\n          btnWidth: width,\n          type: type,\n          data: columnData || {},\n          noData: noData,\n          filterQueryTriggers: filterQueryTriggers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        })));\n      }\n    }\n\n    return null;\n  });\n  return React.createElement(InputFormatStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(SelectFormatStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignItems: \"flex-start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, filterList)), chipList.map(({\n    chips,\n    label,\n    id,\n    type,\n    resetLocal,\n    localData,\n    clear\n  }, idx) => {\n    if (chips.length > 0) {\n      return React.createElement(Chip, {\n        key: idx,\n        color: \"primary\",\n        label: React.createElement(\"span\", {\n          className: classes.chipLabelContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: classes.chipTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, label, \":\"), React.createElement(\"span\", {\n          className: classes.chipItems,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, `${chips}`)),\n        onDelete: () => {\n          handleSelected([]);\n\n          if (type === 'date') {\n            setDateRange({\n              before: null,\n              after: null\n            });\n            setlocalDateRange({\n              before: null,\n              after: null\n            });\n            resetLocal({\n              query: null,\n              chips: []\n            });\n            setShowCalendar(false);\n          } else {\n            resetLocal(currentState => _objectSpread({}, currentState, {\n              [id]: localData.map(option => {\n                // Reset Multi-Select\n                if (option.selected) {\n                  option.selected = false;\n                } // Reset Mulit-Level\n\n\n                if (option.children) {\n                  resetNestedLevels(option);\n                }\n\n                return option;\n              })\n            }));\n          }\n\n          clear();\n        },\n        deleteIcon: React.createElement(PillClose, {\n          className: classes.chipClearBtn,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }),\n        className: classes.chip,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      });\n    }\n\n    return null;\n  })));\n}\n\nNSFilters.displayName = \"NSFilters\";\nNSFilters.propTypes = {\n  intl: intlShape.isRequired,\n  messages: PropTypes.object.isRequired,\n  filterQueryTriggers: PropTypes.object\n};\nconst IntlNSFilters = injectIntl(NSFilters);\nexport default IntlNSFilters;\nNSFilters.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"NSFilters\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"messages\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filterQueryTriggers\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NSFilters/nsFilters.js\"] = {\n    name: \"NSFilters\",\n    docgenInfo: NSFilters.__docgenInfo,\n    path: \"src/components/NSFilters/nsFilters.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSFilters/nsFilters.js"],"names":["React","useContext","useState","PropTypes","injectIntl","intlShape","makeStyles","Grid","Chip","Typography","resetNestedLevels","SelectFilter","NSFiltersContext","PillClose","styles","InputFormatStyle","SelectFormatStyle","NSFilters","intl","messages","filterQueryTriggers","multiSelect","multiSelectOptions","setMultiSelectOptions","levelSelect","levelSelectOptions","setLevelSelectOptions","localDateProps","setlocalDateRange","calendarProps","setShowCalendar","filterCategories","lastUpdateProps","dateRangeProps","handleSelected","classes","setLastUpdate","setDateRange","defaultFilters","filter","defaultFilter","map","id","caption","unshift","filters","filterType","filterWidth","width","btnWidth","type","chipList","filterList","idx","hasBtnWidth","c","columnData","noData","label","i","resetLocal","localData","toUpperCase","chips","join","clear","selectMargins","formatMessage","length","chipLabelContainer","chipTitle","chipItems","before","after","query","currentState","option","selected","children","chipClearBtn","chip","propTypes","isRequired","object","IntlNSFilters"],"mappings":"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","sourcesContent":["/**\n *\n * NSFilters\n *\n */\n\nimport React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\n\nimport { resetNestedLevels } from 'utils/helpers';\nimport SelectFilter from './selectFilters';\nimport { NSFiltersContext } from './context/filters';\nimport PillClose from '../Icons/pillClose';\nimport { styles, InputFormatStyle, SelectFormatStyle } from './styles';\n\nfunction NSFilters({ intl, messages, filterQueryTriggers }) {\n  const {\n    multiSelect: { multiSelectOptions, setMultiSelectOptions },\n    levelSelect: { levelSelectOptions, setLevelSelectOptions },\n    localDateProps: { setlocalDateRange },\n    calendarProps: { setShowCalendar },\n    filterCategories,\n    lastUpdateProps,\n    dateRangeProps,\n    handleSelected,\n  } = useContext(NSFiltersContext);\n\n  const classes = styles();\n  const { setLastUpdate } = lastUpdateProps;\n  const { setDateRange } = dateRangeProps;\n\n  const defaultFilters = filterCategories\n    .filter(filter => filter.defaultFilter)\n    .map(filter => ({ filter: filter.id, caption: filter.caption }));\n  defaultFilters.unshift('');\n\n  const [filters] = useState(defaultFilters);\n\n  const filterType = filterCategories\n    .filter(filter => filter.filterWidth)\n    .map(filter => ({\n      id: filter.id,\n      width: makeStyles(() => ({\n        btnWidth: {\n          width: filter.filterWidth,\n        },\n      }))().btnWidth,\n      type: filter.type,\n    }));\n\n  filterType.unshift({ id: null });\n\n  let chipList = [];\n\n  const filterList = filters.map(({ filter, caption }, idx) => {\n    const hasBtnWidth = filterCategories.filter(c => c.id === filter)[0];\n\n    if (filter && hasBtnWidth) {\n      const { width } =\n        filterType.filter(c => c.id === hasBtnWidth.id)[0] || 150;\n      const { type } = filterType.filter(c => c.id === hasBtnWidth.id)[0];\n\n      if (type) {\n        const { columnData, id, noData, label } = filterCategories.filter(\n          i => i.id === filter\n        )[0];\n        let resetLocal = null;\n        let localData = null;\n\n        switch (type) {\n          case 'multi':\n            resetLocal = setMultiSelectOptions;\n            localData = multiSelectOptions[id];\n            break;\n          case 'levels':\n            resetLocal = setLevelSelectOptions;\n            localData = levelSelectOptions[id];\n            break;\n          case 'date':\n            resetLocal = setLastUpdate;\n            break;\n          default:\n            resetLocal = null;\n            localData = null;\n        }\n\n        chipList = [\n          ...chipList,\n          {\n            label: label.toUpperCase(),\n            id,\n            chips: columnData ? columnData.chips.join(', ') : [],\n            clear: columnData ? columnData.clear : () => {},\n            localData,\n            resetLocal,\n            type,\n          },\n        ];\n\n        return (\n          <Grid item className={classes.selectMargins} key={idx}>\n            <Grid container item direction=\"column\">\n              <Typography className={classes.caption} variant=\"caption\">\n                {caption}\n              </Typography>\n              <SelectFilter\n                label={intl.formatMessage(messages[filter])}\n                id={id}\n                btnWidth={width}\n                type={type}\n                data={columnData || {}}\n                noData={noData}\n                filterQueryTriggers={filterQueryTriggers}\n              />\n            </Grid>\n          </Grid>\n        );\n      }\n    }\n    return null;\n  });\n\n  return (\n    <InputFormatStyle>\n      <SelectFormatStyle>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Grid\n            item\n            xs={9}\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            {filterList}\n          </Grid>\n        </Grid>\n        {chipList.map(\n          ({ chips, label, id, type, resetLocal, localData, clear }, idx) => {\n            if (chips.length > 0) {\n              return (\n                <Chip\n                  key={idx}\n                  color=\"primary\"\n                  label={\n                    <span className={classes.chipLabelContainer}>\n                      <span className={classes.chipTitle}>{label}:</span>\n                      <span className={classes.chipItems}>{`${chips}`}</span>\n                    </span>\n                  }\n                  onDelete={() => {\n                    handleSelected([]);\n                    if (type === 'date') {\n                      setDateRange({ before: null, after: null });\n                      setlocalDateRange({ before: null, after: null });\n                      resetLocal({ query: null, chips: [] });\n                      setShowCalendar(false);\n                    } else {\n                      resetLocal(currentState => ({\n                        ...currentState,\n                        [id]: localData.map(option => {\n                          // Reset Multi-Select\n                          if (option.selected) {\n                            option.selected = false;\n                          }\n\n                          // Reset Mulit-Level\n                          if (option.children) {\n                            resetNestedLevels(option);\n                          }\n\n                          return option;\n                        }),\n                      }));\n                    }\n                    clear();\n                  }}\n                  deleteIcon={<PillClose className={classes.chipClearBtn} />}\n                  className={classes.chip}\n                />\n              );\n            }\n            return null;\n          }\n        )}\n      </SelectFormatStyle>\n    </InputFormatStyle>\n  );\n}\n\nNSFilters.propTypes = {\n  intl: intlShape.isRequired,\n  messages: PropTypes.object.isRequired,\n  filterQueryTriggers: PropTypes.object,\n};\n\nconst IntlNSFilters = injectIntl(NSFilters);\n\nexport default IntlNSFilters;\n"]},"metadata":{},"sourceType":"module"}