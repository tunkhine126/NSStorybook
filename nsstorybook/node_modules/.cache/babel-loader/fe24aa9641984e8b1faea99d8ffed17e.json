{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/RecipientView/overview.js\";\n\n/**\n *\n * OverView\n *\n */\nimport React, { useState, useContext, Fragment } from 'react';\nimport { injectIntl, intlShape } from 'react-intl';\nimport clsx from 'clsx';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport colors from 'global-styles';\nimport ToolTipIcon from 'components/shared/Icons/toolTipIcon';\nimport TextLink from 'components/shared/TextLink';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { generateImg } from 'utils/helpers';\nimport placeHolderImg from 'assets/images/familyPlaceholder.png';\nimport LinkRouter from 'components/shared/LinkRouter';\nimport globalMessages from 'messages';\nimport Widget from './Widget/widget';\nimport RecipientPanel from './Widget/recipientPanel';\nimport TwoColumns from './Widget/twoColumns';\nimport ColumnContent from './Widget/columnContent';\nimport ThreeRows from './Widget/threeRows';\nimport { RecipientViewContext } from './context/index';\nimport { recipientListStyles, progressBarStyles } from '../styles';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(ToolTipIcon, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 170\n  },\n  __self: this\n});\n\nfunction Overview({\n  intl\n}) {\n  let customFields = null;\n  let snapShotItems = [];\n  let snapShotRender = [];\n  const classes = recipientListStyles();\n  const {\n    data,\n    tabChange,\n    rdData,\n    rest,\n    profileDetails\n  } = useContext(RecipientViewContext);\n  const {\n    name,\n    description,\n    color\n  } = data.pipelineStep ? data.pipelineStep : {};\n  const {\n    history,\n    location\n  } = rest;\n  const percentComplete = data.progressPercentage && data.progressPercentage > 100 ? 100 : data.progressPercentage;\n\n  if (data.children.length > 0) {\n    const {\n      children: [{\n        recipientDefinition: {\n          customFields: CF\n        }\n      }]\n    } = data;\n    customFields = CF;\n  }\n\n  const [progressState] = useState({\n    value: percentComplete,\n    color: color || defaultColors\n  });\n  const recipientChildPanels = data.children.map((c, idx) => React.createElement(Fragment, {\n    key: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(RecipientPanel, {\n    name: c.name,\n    customFields: customFields,\n    data: c,\n    enableDelete: true,\n    lastChild: data.children.length === idx + 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })));\n\n  if (data.customFields) {\n    let columnsContent = [];\n    snapShotItems = data.recipientDefinition.customFields.map(s => ({\n      name: s.contexts.us_en.label,\n      value: data.customFields[s.name],\n      type: s.field_type\n    }));\n    columnsContent = snapShotItems.map((i, idx) => {\n      const sName = i.name || 'N/A';\n      const sValue = i.value || 'N/A';\n      return React.createElement(ColumnContent, {\n        key: idx,\n        header: sName,\n        data: i.type === 'photo' ? React.createElement(CardMedia, {\n          component: \"img\",\n          alt: sName,\n          height: \"100%\",\n          image: sValue === 'N/A' ? placeHolderImg : generateImg(sValue),\n          title: sName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }) : sValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n    });\n\n    for (let i = 0; i < columnsContent.length; i += 2) {\n      const current = columnsContent[i];\n      const next = columnsContent[i + 1];\n      snapShotRender = [...snapShotRender, React.createElement(TwoColumns, {\n        key: i,\n        col1: current || null,\n        col2: next || null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })];\n    }\n  }\n\n  const defaultColors = percentComplete < 100 ? colors.STATUS.notice : colors.STATUS.positive;\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"flex-start\",\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, (data.pipelineStep || profileDetails.childRecipients) && React.createElement(Grid, {\n    item: true,\n    className: clsx(classes.column1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, data.pipelineStep && React.createElement(Paper, {\n    className: clsx(classes.paper, classes.moveInContainer),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    className: classes.widgetHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, name), React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(LinearProgress, {\n    classes: progressBarStyles(progressState.color)(),\n    className: classes.statusProgress,\n    variant: \"determinate\",\n    value: progressState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(Tooltip, {\n    title: intl.formatMessage(globalMessages.progressBarDesc),\n    placement: \"right\",\n    className: classes.progressTip,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, _ref)), React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.movedInDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, description, \".\"))), profileDetails.childRecipients && React.createElement(Widget, {\n    header: profileDetails.childRecipients,\n    body: recipientChildPanels,\n    message: \"addRecipientChild\",\n    disableBtn: !rdData.customFields,\n    btnHandler: () => history.push(`/recipients/add/recipient?pId=${data.uuid}&rdId=${rdData.uuid}&name=${profileDetails.addRecipientName}&path=${location.pathname}`),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    className: clsx(classes.column2),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(Widget, {\n    header: intl.formatMessage(globalMessages.snapshot),\n    body: snapShotRender,\n    message: \"fullProfile\",\n    btnHandler: e => tabChange(e, 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    className: classes.activityContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }));\n}\n\nOverview.displayName = \"Overview\";\nOverview.propTypes = {\n  intl: intlShape.isRequired\n};\nconst intlOverview = injectIntl(Overview);\nexport default intlOverview;\nOverview.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Overview\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/RecipientList/RecipientView/overview.js\"] = {\n    name: \"Overview\",\n    docgenInfo: Overview.__docgenInfo,\n    path: \"src/components/RecipientList/RecipientView/overview.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/RecipientView/overview.js"],"names":["React","useState","useContext","Fragment","injectIntl","intlShape","clsx","Tooltip","Grid","Paper","Typography","LinearProgress","colors","ToolTipIcon","TextLink","CardMedia","generateImg","placeHolderImg","LinkRouter","globalMessages","Widget","RecipientPanel","TwoColumns","ColumnContent","ThreeRows","RecipientViewContext","recipientListStyles","progressBarStyles","Overview","intl","customFields","snapShotItems","snapShotRender","classes","data","tabChange","rdData","rest","profileDetails","name","description","color","pipelineStep","history","location","percentComplete","progressPercentage","children","length","recipientDefinition","CF","progressState","value","defaultColors","recipientChildPanels","map","c","idx","columnsContent","s","contexts","us_en","label","type","field_type","i","sName","sValue","current","next","STATUS","notice","positive","container","childRecipients","column1","paper","moveInContainer","widgetHeader","statusProgress","formatMessage","progressBarDesc","progressTip","movedInDetails","push","uuid","addRecipientName","pathname","column2","snapshot","e","activityContainer","propTypes","isRequired","intlOverview"],"mappings":"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","sourcesContent":["/**\n *\n * OverView\n *\n */\n\nimport React, { useState, useContext, Fragment } from 'react';\nimport { injectIntl, intlShape } from 'react-intl';\nimport clsx from 'clsx';\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport colors from 'global-styles';\nimport ToolTipIcon from 'components/shared/Icons/toolTipIcon';\nimport TextLink from 'components/shared/TextLink';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport { generateImg } from 'utils/helpers';\nimport placeHolderImg from 'assets/images/familyPlaceholder.png';\nimport LinkRouter from 'components/shared/LinkRouter';\nimport globalMessages from 'messages';\nimport Widget from './Widget/widget';\nimport RecipientPanel from './Widget/recipientPanel';\nimport TwoColumns from './Widget/twoColumns';\nimport ColumnContent from './Widget/columnContent';\nimport ThreeRows from './Widget/threeRows';\nimport { RecipientViewContext } from './context/index';\nimport { recipientListStyles, progressBarStyles } from '../styles';\n\nfunction Overview({ intl }) {\n  let customFields = null;\n  let snapShotItems = [];\n  let snapShotRender = [];\n  const classes = recipientListStyles();\n  const { data, tabChange, rdData, rest, profileDetails } = useContext(\n    RecipientViewContext\n  );\n\n  const { name, description, color } = data.pipelineStep\n    ? data.pipelineStep\n    : {};\n  const { history, location } = rest;\n\n  const percentComplete =\n    data.progressPercentage && data.progressPercentage > 100\n      ? 100\n      : data.progressPercentage;\n\n  if (data.children.length > 0) {\n    const {\n      children: [\n        {\n          recipientDefinition: { customFields: CF },\n        },\n      ],\n    } = data;\n    customFields = CF;\n  }\n\n  const [progressState] = useState({\n    value: percentComplete,\n    color: color || defaultColors,\n  });\n\n  const recipientChildPanels = data.children.map((c, idx) => (\n    <Fragment key={idx}>\n      <RecipientPanel\n        name={c.name}\n        customFields={customFields}\n        data={c}\n        enableDelete\n        lastChild={data.children.length === idx + 1}\n      />\n    </Fragment>\n  ));\n\n  if (data.customFields) {\n    let columnsContent = [];\n\n    snapShotItems = data.recipientDefinition.customFields.map(s => ({\n      name: s.contexts.us_en.label,\n      value: data.customFields[s.name],\n      type: s.field_type,\n    }));\n\n    columnsContent = snapShotItems.map((i, idx) => {\n      const sName = i.name || 'N/A';\n      const sValue = i.value || 'N/A';\n\n      return (\n        <ColumnContent\n          key={idx}\n          header={sName}\n          data={\n            i.type === 'photo' ? (\n              <CardMedia\n                component=\"img\"\n                alt={sName}\n                height=\"100%\"\n                image={sValue === 'N/A' ? placeHolderImg : generateImg(sValue)}\n                title={sName}\n              />\n            ) : (\n              sValue\n            )\n          }\n        />\n      );\n    });\n\n    for (let i = 0; i < columnsContent.length; i += 2) {\n      const current = columnsContent[i];\n      const next = columnsContent[i + 1];\n\n      snapShotRender = [\n        ...snapShotRender,\n        <TwoColumns key={i} col1={current || null} col2={next || null} />,\n      ];\n    }\n  }\n\n  const defaultColors =\n    percentComplete < 100 ? colors.STATUS.notice : colors.STATUS.positive;\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"space-between\"\n      alignItems=\"flex-start\"\n      className={classes.container}\n    >\n      {(data.pipelineStep || profileDetails.childRecipients) && (\n        <Grid item className={clsx(classes.column1)}>\n          {data.pipelineStep && (\n            <Paper className={clsx(classes.paper, classes.moveInContainer)}>\n              <Typography\n                variant=\"h4\"\n                gutterBottom\n                className={classes.widgetHeader}\n              >\n                {name}\n              </Typography>\n              <Grid\n                item\n                container\n                direction=\"row\"\n                justify=\"space-between\"\n                alignItems=\"center\"\n              >\n                <Grid item xs={11}>\n                  <LinearProgress\n                    classes={progressBarStyles(progressState.color)()}\n                    className={classes.statusProgress}\n                    variant=\"determinate\"\n                    value={progressState.value}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <Tooltip\n                    title={intl.formatMessage(globalMessages.progressBarDesc)}\n                    placement=\"right\"\n                    className={classes.progressTip}\n                  >\n                    <ToolTipIcon />\n                  </Tooltip>\n                </Grid>\n\n                <Typography\n                  variant=\"caption\"\n                  className={classes.movedInDetails}\n                >\n                  {description}.\n                </Typography>\n              </Grid>\n            </Paper>\n          )}\n          {profileDetails.childRecipients && (\n            <Widget\n              header={profileDetails.childRecipients}\n              body={recipientChildPanels}\n              message=\"addRecipientChild\"\n              disableBtn={!rdData.customFields}\n              btnHandler={() =>\n                history.push(\n                  `/recipients/add/recipient?pId=${data.uuid}&rdId=${\n                    rdData.uuid\n                  }&name=${profileDetails.addRecipientName}&path=${\n                    location.pathname\n                  }`\n                )\n              }\n            />\n          )}\n        </Grid>\n      )}\n\n      <Grid item className={clsx(classes.column2)}>\n        <Widget\n          header={intl.formatMessage(globalMessages.snapshot)}\n          body={snapShotRender}\n          message=\"fullProfile\"\n          btnHandler={e => tabChange(e, 1)}\n        />\n\n        {\n          // TODO: NOT Beta\n          /* <Widget\n          header={intl.formatMessage(messages.files)}\n          body={\n            <>\n              <TwoColumns\n                col1={\n                  <ThreeRows\n                    row1={intl.formatMessage(messages.uploaded)}\n                    row2=\"17\"\n                    row3=\"212 MB\"\n                  />\n                }\n                col2={\n                  <ThreeRows\n                    row1={intl.formatMessage(messages.lastUpload)}\n                    row2={\n                      <TextLink\n                        content=\"Family-Donor-Profile.pdf\"\n                        bold={false}\n                      />\n                    }\n                    row3=\"2 weeks ago\"\n                  />\n                }\n              />\n            </>\n          }\n          message=\"allFiles\"\n        /> */\n        }\n      </Grid>\n      <Grid item className={classes.activityContainer}>\n        {/* ********* Activity Container  ************ */}\n        {/* <Paper className={clsx(classes.paper)}>xs=4</Paper> */}\n      </Grid>\n    </Grid>\n  );\n}\n\nOverview.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nconst intlOverview = injectIntl(Overview);\n\nexport default intlOverview;\n"]},"metadata":{},"sourceType":"module"}