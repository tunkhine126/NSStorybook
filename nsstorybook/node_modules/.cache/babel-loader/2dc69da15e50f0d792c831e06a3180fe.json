{"ast":null,"code":"import _objectSpread from \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/RecipientView/surveys.js\";\n\n/**\n *\n * Surveys\n *\n */\nimport React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { injectIntl, intlShape } from 'react-intl';\nimport qs from 'query-string';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { GET_FAMILY_SURVEY_SUBMISSIONS } from 'graphql/queries/families/family-queries';\nimport { GET_USER } from 'graphql/queries/user-queries';\nimport { generalErrorHandler } from 'utils/error-handler';\nimport SurveyViewer from 'components/shared/SurveyViewer';\nimport Loading from 'components/shared/Loading';\nimport globalMessages from 'messages';\nimport { RecipientViewContext } from './context/index';\nimport { recipientListStyles } from '../styles';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(Loading, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n});\n\nfunction Surveys({\n  intl,\n  location\n}) {\n  const classes = recipientListStyles();\n  const {\n    date,\n    name\n  } = qs.parse(location.search);\n  const {\n    rest,\n    match\n  } = useContext(RecipientViewContext);\n  const {\n    params: {\n      id\n    }\n  } = match;\n  const {\n    loading: loadingUser,\n    error: userError,\n    data: userData\n  } = useQuery(GET_USER, {\n    fetchPolicy: 'network-only'\n  });\n  const {\n    loading,\n    error,\n    data: familySurveySubmissions\n  } = useQuery(GET_FAMILY_SURVEY_SUBMISSIONS, {\n    variables: {\n      recipientUuids: [id]\n    }\n  });\n\n  if (error || userError) {\n    return generalErrorHandler(error || userError, _objectSpread({}, rest));\n  }\n\n  if (loading || loadingUser) return React.createElement(\"div\", {\n    style: {\n      height: '50vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, _ref);\n  const surveys = familySurveySubmissions.submissions.map(({\n    survey,\n    completedAt,\n    surveyor,\n    questionResponses\n  }, idx) => React.createElement(SurveyViewer, {\n    key: idx,\n    initialExpand: name === survey.name && date === completedAt,\n    name: survey.name,\n    completeDate: completedAt,\n    surveyor: `${surveyor.firstName} ${surveyor.lastName}`,\n    sections: survey.surveySections,\n    responses: questionResponses,\n    context: userData.viewer.defaultContextPermalink,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"flex-start\",\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, surveys, surveys.length === 0 && React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    className: classes.notFoundContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.body,\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, intl.formatMessage(globalMessages.noSurveys))));\n}\n\nSurveys.displayName = \"Surveys\";\nSurveys.propTypes = {\n  intl: intlShape.isRequired,\n  location: PropTypes.object.isRequired\n};\nconst IntlSurveys = injectIntl(Surveys);\nexport default IntlSurveys;\nSurveys.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Surveys\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"location\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/RecipientList/RecipientView/surveys.js\"] = {\n    name: \"Surveys\",\n    docgenInfo: Surveys.__docgenInfo,\n    path: \"src/components/RecipientList/RecipientView/surveys.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/RecipientList/RecipientView/surveys.js"],"names":["React","useContext","useQuery","injectIntl","intlShape","qs","PropTypes","Grid","Typography","GET_FAMILY_SURVEY_SUBMISSIONS","GET_USER","generalErrorHandler","SurveyViewer","Loading","globalMessages","RecipientViewContext","recipientListStyles","Surveys","intl","location","classes","date","name","parse","search","rest","match","params","id","loading","loadingUser","error","userError","data","userData","fetchPolicy","familySurveySubmissions","variables","recipientUuids","height","surveys","submissions","map","survey","completedAt","surveyor","questionResponses","idx","firstName","lastName","surveySections","viewer","defaultContextPermalink","container","length","notFoundContainer","body","formatMessage","noSurveys","propTypes","isRequired","object","IntlSurveys"],"mappings":"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","sourcesContent":["/**\n *\n * Surveys\n *\n */\n\nimport React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { injectIntl, intlShape } from 'react-intl';\nimport qs from 'query-string';\nimport PropTypes from 'prop-types';\n\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport { GET_FAMILY_SURVEY_SUBMISSIONS } from 'graphql/queries/families/family-queries';\nimport { GET_USER } from 'graphql/queries/user-queries';\nimport { generalErrorHandler } from 'utils/error-handler';\nimport SurveyViewer from 'components/shared/SurveyViewer';\nimport Loading from 'components/shared/Loading';\nimport globalMessages from 'messages';\n\nimport { RecipientViewContext } from './context/index';\nimport { recipientListStyles } from '../styles';\n\nfunction Surveys({ intl, location }) {\n  const classes = recipientListStyles();\n\n  const { date, name } = qs.parse(location.search);\n  const { rest, match } = useContext(RecipientViewContext);\n  const {\n    params: { id },\n  } = match;\n\n  const { loading: loadingUser, error: userError, data: userData } = useQuery(\n    GET_USER,\n    {\n      fetchPolicy: 'network-only',\n    }\n  );\n\n  const { loading, error, data: familySurveySubmissions } = useQuery(\n    GET_FAMILY_SURVEY_SUBMISSIONS,\n    {\n      variables: {\n        recipientUuids: [id],\n      },\n    }\n  );\n\n  if (error || userError) {\n    return generalErrorHandler(error || userError, {\n      ...rest,\n    });\n  }\n\n  if (loading || loadingUser)\n    return (\n      <div style={{ height: '50vh' }}>\n        <Loading />\n      </div>\n    );\n\n  const surveys = familySurveySubmissions.submissions.map(\n    ({ survey, completedAt, surveyor, questionResponses }, idx) => (\n      <SurveyViewer\n        key={idx}\n        initialExpand={name === survey.name && date === completedAt}\n        name={survey.name}\n        completeDate={completedAt}\n        surveyor={`${surveyor.firstName} ${surveyor.lastName}`}\n        sections={survey.surveySections}\n        responses={questionResponses}\n        context={userData.viewer.defaultContextPermalink}\n      />\n    )\n  );\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"space-between\"\n      alignItems=\"flex-start\"\n      className={classes.container}\n    >\n      {surveys}\n      {surveys.length === 0 && (\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          className={classes.notFoundContainer}\n        >\n          <Typography className={classes.body} variant=\"body1\">\n            {intl.formatMessage(globalMessages.noSurveys)}\n          </Typography>\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n\nSurveys.propTypes = {\n  intl: intlShape.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nconst IntlSurveys = injectIntl(Surveys);\n\nexport default IntlSurveys;\n"]},"metadata":{},"sourceType":"module"}