{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/SurveyViewer/index.js\";\n\n/**\n *\n * SurveyViewer\n *\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport SmallRightArrow from '../Icons copy/smallRightArrow';\nimport Section from '../SurveyViewer/section';\nimport moment from 'moment';\nimport { styles, ExpansionPanelDetailsStyle, ExpansionPanelStyle } from './styles';\nimport messages from './messages';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(SmallRightArrow, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n});\n\nexport function SurveyViewer({\n  intl,\n  name,\n  completeDate = null,\n  surveyor = null,\n  sections,\n  responses = [],\n  context,\n  version,\n  initialExpand = false\n}) {\n  const classes = styles();\n  const [expanded, setExpanded] = useState(initialExpand);\n  const renderSections = sections.map(({\n    body,\n    surveyQuestions\n  }, idx) => React.createElement(Section, {\n    key: idx,\n    name: body,\n    questions: surveyQuestions,\n    responses: responses,\n    context: context,\n    version: version,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n  return React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    md: 11,\n    lg: 8,\n    className: classes.accordion,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(ExpansionPanelStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(ExpansionPanel, {\n    expanded: expanded,\n    onChange: (event, open) => setExpanded(open),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(ExpansionPanelSummary, {\n    expandIcon: _ref,\n    \"aria-controls\": \"survey\",\n    id: \"survey\",\n    className: clsx({\n      [classes.bottomBorder]: expanded && version === 2\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: version !== 2 ? 6 : 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    className: clsx(classes.header, classes.bold),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, version === 2 ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, name, React.createElement(\"span\", {\n    className: classes.headerQuestions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, sections[0].surveyQuestions.length, ' ', sections[0].surveyQuestions.length > 1 ? intl.formatMessage(messages.questions) : intl.formatMessage(messages.question))) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, name))), version !== 2 && React.createElement(Grid, {\n    container: true,\n    item: true,\n    justify: \"flex-end\",\n    alignItems: \"center\",\n    xs: 6,\n    md: 11,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    className: clsx(classes.completed),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, `${intl.formatMessage(messages.completed)} ${moment(new Date(completeDate)).format('MMM DD, YYYY')} ${intl.formatMessage(messages.bySurveyor)}: `, React.createElement(Chip, {\n    component: \"span\",\n    avatar: React.createElement(Avatar, {\n      className: classes.avatar,\n      component: \"span\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, surveyor.split('')[0]),\n    label: surveyor,\n    className: classes.chip,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })))), React.createElement(ExpansionPanelDetailsStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(ExpansionPanelDetails, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, renderSections))))));\n}\nSurveyViewer.displayName = \"SurveyViewer\";\nSurveyViewer.propTypes = {\n  intl: intlShape.isRequired,\n  name: PropTypes.string.isRequired,\n  sections: PropTypes.array.isRequired,\n  context: PropTypes.string.isRequired,\n  initialExpand: PropTypes.bool,\n  version: PropTypes.oneOf([1, 2]),\n  surveyor: PropTypes.string,\n  responses: PropTypes.array,\n  completeDate: PropTypes.string\n};\nconst IntlSurveyViewer = injectIntl(SurveyViewer);\nexport default IntlSurveyViewer;\nSurveyViewer.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"SurveyViewer\",\n  \"props\": {\n    \"completeDate\": {\n      \"defaultValue\": {\n        \"value\": \"null\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"surveyor\": {\n      \"defaultValue\": {\n        \"value\": \"null\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"responses\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"initialExpand\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"sections\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"context\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"version\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"1\",\n          \"computed\": false\n        }, {\n          \"value\": \"2\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/SurveyViewer/index.js\"] = {\n    name: \"SurveyViewer\",\n    docgenInfo: SurveyViewer.__docgenInfo,\n    path: \"src/components/SurveyViewer/index.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/SurveyViewer/index.js"],"names":["React","useState","PropTypes","clsx","injectIntl","intlShape","ExpansionPanel","ExpansionPanelSummary","ExpansionPanelDetails","Typography","Avatar","Chip","Grid","SmallRightArrow","Section","moment","styles","ExpansionPanelDetailsStyle","ExpansionPanelStyle","messages","SurveyViewer","intl","name","completeDate","surveyor","sections","responses","context","version","initialExpand","classes","expanded","setExpanded","renderSections","map","body","surveyQuestions","idx","accordion","event","open","bottomBorder","header","bold","headerQuestions","length","formatMessage","questions","question","completed","Date","format","bySurveyor","avatar","split","chip","propTypes","isRequired","string","array","bool","oneOf","IntlSurveyViewer"],"mappings":";;;AAAA;;;;;AAMA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,YAAtC;AAEA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,MADF,EAEEC,0BAFF,EAGEC,mBAHF,QAIO,UAJP;AAKA,OAAOC,QAAP,MAAqB,YAArB;;;;AAmCwB,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;AAjCxB,OAAO,SAASC,YAAT,CAAsB;AAC3BC,EAAAA,IAD2B;AAE3BC,EAAAA,IAF2B;AAG3BC,EAAAA,YAAY,GAAG,IAHY;AAI3BC,EAAAA,QAAQ,GAAG,IAJgB;AAK3BC,EAAAA,QAL2B;AAM3BC,EAAAA,SAAS,GAAG,EANe;AAO3BC,EAAAA,OAP2B;AAQ3BC,EAAAA,OAR2B;AAS3BC,EAAAA,aAAa,GAAG;AATW,CAAtB,EAUJ;AACD,QAAMC,OAAO,GAAGd,MAAM,EAAtB;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0B/B,QAAQ,CAAC4B,aAAD,CAAxC;AAEA,QAAMI,cAAc,GAAGR,QAAQ,CAACS,GAAT,CAAa,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,EAA4BC,GAA5B,KAClC,oBAAC,OAAD;AACE,IAAA,GAAG,EAAEA,GADP;AAEE,IAAA,IAAI,EAAEF,IAFR;AAGE,IAAA,SAAS,EAAEC,eAHb;AAIE,IAAA,SAAS,EAAEV,SAJb;AAKE,IAAA,OAAO,EAAEC,OALX;AAME,IAAA,OAAO,EAAEC,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADqB,CAAvB;AAWA,SACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,CAA9B;AAAiC,IAAA,SAAS,EAAEE,OAAO,CAACQ,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAEP,QADZ;AAEE,IAAA,QAAQ,EAAE,CAACQ,KAAD,EAAQC,IAAR,KAAiBR,WAAW,CAACQ,IAAD,CAFxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,qBAAD;AACE,IAAA,UAAU,MADZ;AAEE,qBAAc,QAFhB;AAGE,IAAA,EAAE,EAAC,QAHL;AAIE,IAAA,SAAS,EAAErC,IAAI,CAAC;AACd,OAAC2B,OAAO,CAACW,YAAT,GAAwBV,QAAQ,IAAIH,OAAO,KAAK;AADlC,KAAD,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAEA,OAAO,KAAK,CAAZ,GAAgB,CAAhB,GAAoB,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,YAAY,MADd;AAEE,IAAA,SAAS,EAAEzB,IAAI,CAAC2B,OAAO,CAACY,MAAT,EAAiBZ,OAAO,CAACa,IAAzB,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGf,OAAO,KAAK,CAAZ,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,IADH,EAEE;AAAM,IAAA,SAAS,EAAEQ,OAAO,CAACc,eAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,QAAQ,CAAC,CAAD,CAAR,CAAYW,eAAZ,CAA4BS,MAD/B,EACuC,GADvC,EAEGpB,QAAQ,CAAC,CAAD,CAAR,CAAYW,eAAZ,CAA4BS,MAA5B,GAAqC,CAArC,GACGxB,IAAI,CAACyB,aAAL,CAAmB3B,QAAQ,CAAC4B,SAA5B,CADH,GAEG1B,IAAI,CAACyB,aAAL,CAAmB3B,QAAQ,CAAC6B,QAA5B,CAJN,CAFF,CADD,GAWC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO1B,IAAP,CAfJ,CADF,CARF,EA6BGM,OAAO,KAAK,CAAZ,IACC,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,IAAI,MAFN;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,EAAE,EAAE,CALN;AAME,IAAA,EAAE,EAAE,EANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,UAAD;AAAY,IAAA,YAAY,MAAxB;AAAyB,IAAA,SAAS,EAAEzB,IAAI,CAAC2B,OAAO,CAACmB,SAAT,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,GAAE5B,IAAI,CAACyB,aAAL,CAAmB3B,QAAQ,CAAC8B,SAA5B,CAAuC,IAAGlC,MAAM,CAClD,IAAImC,IAAJ,CAAS3B,YAAT,CADkD,CAAN,CAE5C4B,MAF4C,CAErC,cAFqC,CAErB,IAAG9B,IAAI,CAACyB,aAAL,CAC1B3B,QAAQ,CAACiC,UADiB,CAE1B,IALJ,EAME,oBAAC,IAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,MAAM,EACJ,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAEtB,OAAO,CAACuB,MAA3B;AAAmC,MAAA,SAAS,EAAC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG7B,QAAQ,CAAC8B,KAAT,CAAe,EAAf,EAAmB,CAAnB,CADH,CAHJ;AAOE,IAAA,KAAK,EAAE9B,QAPT;AAQE,IAAA,SAAS,EAAEM,OAAO,CAACyB,IARrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CARF,CA9BJ,CAJF,EA+DE,oBAAC,0BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBtB,cAAjB,CADF,CADF,CA/DF,CADF,CADF,CADF;AA2ED;AApGeb,Y;AAsGhBA,YAAY,CAACoC,SAAb,GAAyB;AACvBnC,EAAAA,IAAI,EAAEhB,SAAS,CAACoD,UADO;AAEvBnC,EAAAA,IAAI,EAAEpB,SAAS,CAACwD,MAAV,CAAiBD,UAFA;AAGvBhC,EAAAA,QAAQ,EAAEvB,SAAS,CAACyD,KAAV,CAAgBF,UAHH;AAIvB9B,EAAAA,OAAO,EAAEzB,SAAS,CAACwD,MAAV,CAAiBD,UAJH;AAKvB5B,EAAAA,aAAa,EAAE3B,SAAS,CAAC0D,IALF;AAMvBhC,EAAAA,OAAO,EAAE1B,SAAS,CAAC2D,KAAV,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CANc;AAOvBrC,EAAAA,QAAQ,EAAEtB,SAAS,CAACwD,MAPG;AAQvBhC,EAAAA,SAAS,EAAExB,SAAS,CAACyD,KARE;AASvBpC,EAAAA,YAAY,EAAErB,SAAS,CAACwD;AATD,CAAzB;AAYA,MAAMI,gBAAgB,GAAG1D,UAAU,CAACgB,YAAD,CAAnC;AAEA,eAAe0C,gBAAf","sourcesContent":["/**\n *\n * SurveyViewer\n *\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\n\nimport SmallRightArrow from '../Icons copy/smallRightArrow';\nimport Section from '../SurveyViewer/section';\nimport moment from 'moment';\nimport {\n  styles,\n  ExpansionPanelDetailsStyle,\n  ExpansionPanelStyle,\n} from './styles';\nimport messages from './messages';\n\nexport function SurveyViewer({\n  intl,\n  name,\n  completeDate = null,\n  surveyor = null,\n  sections,\n  responses = [],\n  context,\n  version,\n  initialExpand = false,\n}) {\n  const classes = styles();\n  const [expanded, setExpanded] = useState(initialExpand);\n\n  const renderSections = sections.map(({ body, surveyQuestions }, idx) => (\n    <Section\n      key={idx}\n      name={body}\n      questions={surveyQuestions}\n      responses={responses}\n      context={context}\n      version={version}\n    />\n  ));\n\n  return (\n    <Grid item xs={8} md={11} lg={8} className={classes.accordion}>\n      <ExpansionPanelStyle>\n        <ExpansionPanel\n          expanded={expanded}\n          onChange={(event, open) => setExpanded(open)}\n        >\n          <ExpansionPanelSummary\n            expandIcon={<SmallRightArrow />}\n            aria-controls=\"survey\"\n            id=\"survey\"\n            className={clsx({\n              [classes.bottomBorder]: expanded && version === 2,\n            })}\n          >\n            <Grid item xs={version !== 2 ? 6 : 12}>\n              <Typography\n                gutterBottom\n                className={clsx(classes.header, classes.bold)}\n              >\n                {version === 2 ? (\n                  <span>\n                    {name}\n                    <span className={classes.headerQuestions}>\n                      {sections[0].surveyQuestions.length}{' '}\n                      {sections[0].surveyQuestions.length > 1\n                        ? intl.formatMessage(messages.questions)\n                        : intl.formatMessage(messages.question)}\n                    </span>\n                  </span>\n                ) : (\n                  <span>{name}</span>\n                )}\n              </Typography>\n            </Grid>\n\n            {version !== 2 && (\n              <Grid\n                container\n                item\n                justify=\"flex-end\"\n                alignItems=\"center\"\n                xs={6}\n                md={11}\n              >\n                <Typography gutterBottom className={clsx(classes.completed)}>\n                  {`${intl.formatMessage(messages.completed)} ${moment(\n                    new Date(completeDate)\n                  ).format('MMM DD, YYYY')} ${intl.formatMessage(\n                    messages.bySurveyor\n                  )}: `}\n                  <Chip\n                    component=\"span\"\n                    avatar={\n                      <Avatar className={classes.avatar} component=\"span\">\n                        {surveyor.split('')[0]}\n                      </Avatar>\n                    }\n                    label={surveyor}\n                    className={classes.chip}\n                  />\n                </Typography>\n              </Grid>\n            )}\n          </ExpansionPanelSummary>\n\n          <ExpansionPanelDetailsStyle>\n            <ExpansionPanelDetails>\n              <Grid container>{renderSections}</Grid>\n            </ExpansionPanelDetails>\n          </ExpansionPanelDetailsStyle>\n        </ExpansionPanel>\n      </ExpansionPanelStyle>\n    </Grid>\n  );\n}\n\nSurveyViewer.propTypes = {\n  intl: intlShape.isRequired,\n  name: PropTypes.string.isRequired,\n  sections: PropTypes.array.isRequired,\n  context: PropTypes.string.isRequired,\n  initialExpand: PropTypes.bool,\n  version: PropTypes.oneOf([1, 2]),\n  surveyor: PropTypes.string,\n  responses: PropTypes.array,\n  completeDate: PropTypes.string,\n};\n\nconst IntlSurveyViewer = injectIntl(SurveyViewer);\n\nexport default IntlSurveyViewer;\n"]},"metadata":{},"sourceType":"module"}