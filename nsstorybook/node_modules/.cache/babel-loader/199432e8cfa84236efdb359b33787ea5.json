{"ast":null,"code":"var _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSTable/nsTableBody.js\";\n\n/* eslint-disable prettier/prettier */\n\n/**\n *\n * NSTableBody\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from '@material-ui/core/Grid';\nimport CustomCheckBox from '../Icons copy/customCheckbox';\nimport CheckboxChecked from '../Icons copy/checkboxChecked';\nimport Horiz from '../Horiz/index';\nimport { styles } from './styles';\n\nconst NSColumn = ({\n  direction,\n  justify,\n  alignItems,\n  content\n}) => {\n  const classes = styles();\n  return React.createElement(TableCell, {\n    scope: \"row\",\n    className: classes.tableCell,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: direction,\n    justify: justify,\n    alignItems: alignItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, content));\n};\n\nNSColumn.displayName = \"NSColumn\";\nNSColumn.propTypes = {\n  direction: PropTypes.string.isRequired,\n  justify: PropTypes.string.isRequired,\n  alignItems: PropTypes.string.isRequired,\n  content: PropTypes.element.isRequired\n};\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(Skeleton, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93\n  },\n  __self: this\n});\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(Skeleton, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103\n  },\n  __self: this\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(CustomCheckBox, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 141\n  },\n  __self: this\n});\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(CheckboxChecked, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 142\n  },\n  __self: this\n});\n\nfunction NSTableBody({\n  columns,\n  formattedColumns,\n  data,\n  density,\n  showCheckboxes,\n  showTableSettings,\n  horizActions,\n  handleClick,\n  isSelected,\n  loading\n}) {\n  const classes = styles();\n  const columnsToShow = formattedColumns.filter((column, idx) => columns[idx] ? column.columnId === columns[idx].id && columns[idx].show : null);\n\n  const LoadingColumn = ({\n    rows\n  }) => React.createElement(TableCell, {\n    scope: \"row\",\n    className: classes.tableCell,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, rows.map((_, idx) => React.createElement(Skeleton, {\n    key: idx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }))));\n\n  LoadingColumn.propTypes = {\n    rows: PropTypes.array.isRequired\n  };\n  const loadingRow = [];\n  const loadingList = data.length > 0 ? data : [{\n    id: 1\n  }, {\n    id: 2\n  }, {\n    id: 3\n  }, {\n    id: 4\n  }, {\n    id: 5\n  }];\n  loadingList.forEach((_, i) => {\n    loadingRow.push(React.createElement(TableRow, {\n      hover: true,\n      tabIndex: -1,\n      style: {\n        height: density\n      },\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, showCheckboxes && React.createElement(TableCell, {\n      padding: \"checkbox\",\n      className: classes.tableCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      className: classes.skeletonGrid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, _ref)), columnsToShow.map((c, k) => React.createElement(LoadingColumn, {\n      key: k,\n      rows: c.loadingRows,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), showTableSettings && React.createElement(TableCell, {\n      padding: \"checkbox\",\n      className: classes.tableCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      className: classes.skeletonGrid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, _ref2))));\n  });\n  return React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, loading ? loadingRow : data.map((row, index) => {\n    const isItemSelected = isSelected(row.id);\n    const labelId = `checkbox-${index}`;\n    return React.createElement(TableRow, {\n      hover: true,\n      \"aria-checked\": isItemSelected,\n      tabIndex: -1,\n      key: row.id,\n      selected: isItemSelected,\n      style: {\n        height: density\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, showCheckboxes && React.createElement(TableCell, {\n      padding: \"checkbox\",\n      className: classes.tableCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"flex-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      className: classes.checkboxHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: isItemSelected,\n      onClick: e => handleClick(e, row.id),\n      inputProps: {\n        'aria-labelledby': labelId\n      },\n      icon: _ref3,\n      checkedIcon: _ref4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })))), columnsToShow.map(({\n      direction,\n      justify,\n      alignItems,\n      content\n    }, idx) => React.createElement(NSColumn, {\n      key: idx,\n      direction: direction,\n      justify: justify,\n      alignItems: alignItems,\n      content: content(row, idx),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })), showTableSettings && horizActions && horizActions.length > 0 ? React.createElement(TableCell, {\n      scope: \"row\",\n      className: classes.tableCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"flex-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Horiz, {\n      parentClasses: classes,\n      id: row.id,\n      actions: horizActions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })))) : React.createElement(TableCell, {\n      scope: \"row\",\n      className: classes.tableCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"flex-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      className: classes.columnHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }))));\n  }));\n}\n\nNSTableBody.displayName = \"NSTableBody\";\nNSTableBody.propTypes = {\n  columns: PropTypes.array.isRequired,\n  formattedColumns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  density: PropTypes.string.isRequired,\n  showCheckboxes: PropTypes.bool.isRequired,\n  showTableSettings: PropTypes.bool.isRequired,\n  horizActions: PropTypes.array.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  isSelected: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired\n};\nNSTableBody.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"NSTableBody\",\n  \"props\": {\n    \"columns\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"formattedColumns\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"data\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"density\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"showCheckboxes\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"showTableSettings\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"horizActions\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handleClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isSelected\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"loading\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default NSTableBody;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NSTable/nsTableBody.js\"] = {\n    name: \"NSTableBody\",\n    docgenInfo: NSTableBody.__docgenInfo,\n    path: \"src/components/NSTable/nsTableBody.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSTable/nsTableBody.js"],"names":["React","PropTypes","Skeleton","Checkbox","TableCell","TableBody","TableRow","Grid","CustomCheckBox","CheckboxChecked","Horiz","styles","NSColumn","direction","justify","alignItems","content","classes","tableCell","propTypes","string","isRequired","element","NSTableBody","columns","formattedColumns","data","density","showCheckboxes","showTableSettings","horizActions","handleClick","isSelected","loading","columnsToShow","filter","column","idx","columnId","id","show","LoadingColumn","rows","map","_","array","loadingRow","loadingList","length","forEach","i","push","height","skeletonGrid","c","k","loadingRows","row","index","isItemSelected","labelId","checkboxHeight","e","columnHeight","bool","func"],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\n/**\n *\n * NSTableBody\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from '@material-ui/core/Grid';\n\nimport CustomCheckBox from '../Icons copy/customCheckbox';\nimport CheckboxChecked from '../Icons copy/checkboxChecked';\nimport Horiz from '../Horiz/index';\n\nimport { styles } from './styles';\n\nconst NSColumn = ({ direction, justify, alignItems, content }) => {\n  const classes = styles();\n\n  return (\n    <TableCell scope=\"row\" className={classes.tableCell}>\n      <Grid\n        container\n        direction={direction}\n        justify={justify}\n        alignItems={alignItems}\n      >\n        {content}\n      </Grid>\n    </TableCell>\n  );\n};\n\nNSColumn.propTypes = {\n  direction: PropTypes.string.isRequired,\n  justify: PropTypes.string.isRequired,\n  alignItems: PropTypes.string.isRequired,\n  content: PropTypes.element.isRequired,\n};\n\nfunction NSTableBody({\n  columns,\n  formattedColumns,\n  data,\n  density,\n  showCheckboxes,\n  showTableSettings,\n  horizActions,\n  handleClick,\n  isSelected,\n  loading,\n}) {\n  const classes = styles();\n  const columnsToShow = formattedColumns.filter((column, idx) =>\n    columns[idx]\n      ? column.columnId === columns[idx].id && columns[idx].show\n      : null\n  );\n\n  const LoadingColumn = ({ rows }) => (\n    <TableCell scope=\"row\" className={classes.tableCell}>\n      <Grid container direction=\"column\">\n        {rows.map((_, idx) => (\n          <Skeleton key={idx} />\n        ))}\n      </Grid>\n    </TableCell>\n  );\n\n  LoadingColumn.propTypes = {\n    rows: PropTypes.array.isRequired,\n  };\n\n  const loadingRow = [];\n  const loadingList =\n    data.length > 0\n      ? data\n      : [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }];\n\n  loadingList.forEach((_, i) => {\n    loadingRow.push(\n      <TableRow hover tabIndex={-1} style={{ height: density }} key={i}>\n        {showCheckboxes && (\n          <TableCell padding=\"checkbox\" className={classes.tableCell}>\n            <Grid container direction=\"column\" className={classes.skeletonGrid}>\n              <Skeleton />\n            </Grid>\n          </TableCell>\n        )}\n        {columnsToShow.map((c, k) => (\n          <LoadingColumn key={k} rows={c.loadingRows} />\n        ))}\n        {showTableSettings && (\n          <TableCell padding=\"checkbox\" className={classes.tableCell}>\n            <Grid container direction=\"column\" className={classes.skeletonGrid}>\n              <Skeleton />\n            </Grid>\n          </TableCell>\n        )}\n      </TableRow>\n    );\n  });\n\n  return (\n    <TableBody>\n      {loading\n        ? loadingRow\n        : data.map((row, index) => {\n          const isItemSelected = isSelected(row.id);\n          const labelId = `checkbox-${index}`;\n\n          return (\n            <TableRow\n              hover\n              aria-checked={isItemSelected}\n              tabIndex={-1}\n              key={row.id}\n              selected={isItemSelected}\n              style={{ height: density }}\n            >\n              {showCheckboxes && (\n                <TableCell padding=\"checkbox\" className={classes.tableCell}>\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"flex-start\"\n                  >\n                    <Grid item className={classes.checkboxHeight}>\n                      <Checkbox\n                        checked={isItemSelected}\n                        onClick={e => handleClick(e, row.id)}\n                        inputProps={{ 'aria-labelledby': labelId }}\n                        icon={<CustomCheckBox />}\n                        checkedIcon={<CheckboxChecked />}\n                      />\n                    </Grid>\n                  </Grid>\n                </TableCell>\n              )}\n\n              {columnsToShow.map(\n                ({ direction, justify, alignItems, content }, idx) => (\n                  <NSColumn\n                    key={idx}\n                    direction={direction}\n                    justify={justify}\n                    alignItems={alignItems}\n                    content={content(row, idx)}\n                  />\n                )\n              )}\n\n              {showTableSettings && horizActions && horizActions.length > 0 ? (\n                <TableCell scope=\"row\" className={classes.tableCell}>\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"flex-start\"\n                  >\n                    <Grid item>\n                      <Horiz\n                        parentClasses={classes}\n                        id={row.id}\n                        actions={horizActions}\n                      />\n                    </Grid>\n                  </Grid>\n                </TableCell>\n              ) : (\n                <TableCell scope=\"row\" className={classes.tableCell}>\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"flex-start\"\n                  >\n                    <Grid item className={classes.columnHeight} />\n                  </Grid>\n                </TableCell>\n              )}\n            </TableRow>\n          );\n        })}\n    </TableBody>\n  );\n}\n\nNSTableBody.propTypes = {\n  columns: PropTypes.array.isRequired,\n  formattedColumns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  density: PropTypes.string.isRequired,\n  showCheckboxes: PropTypes.bool.isRequired,\n  showTableSettings: PropTypes.bool.isRequired,\n  horizActions: PropTypes.array.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  isSelected: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nexport default NSTableBody;\n"]},"metadata":{},"sourceType":"module"}