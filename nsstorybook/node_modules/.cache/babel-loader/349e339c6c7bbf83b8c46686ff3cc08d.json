{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nvar _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSMultiSelect/index.js\";\n\n/**\n *\n * NSMultiSelect\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Chip from '@material-ui/core/Chip';\nimport colors from 'global-styles';\nimport { useNSMultiSelectStyle, styles } from './styles';\nimport PillClose from '../Icons/pillClose';\n\nfunction NSMultiSelect({\n  values,\n  items,\n  label,\n  update,\n  width,\n  maxWidth = '400px',\n  outterWidth,\n  outerHeight,\n  padding,\n  disableLabel,\n  selectOverride,\n  placeholderText,\n  required = false,\n  translate = '14px, 10px',\n  className,\n  onBlur = () => {}\n}) {\n  const classes = styles(width, maxWidth)();\n  const labelFormatted = label.replace(/ /g, '-').toLowerCase();\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: 215\n      }\n    }\n  };\n  const ComponentStyle = styled.div`\n    .MuiInputLabel-outlined.MuiInputLabel-shrink {\n      transform: translate(${translate}) scale(0.75);\n      color: ${colors.STATE.active};\n    }\n    .MuiOutlinedInput-root:hover .MuiOutlinedInput-notchedOutline {\n      border-color: ${colors.STATE.active};\n    }\n    .MuiOutlinedInput-notchedOutline {\n      border-color: ${colors.INTERFACE.ui4};\n    }\n    .MuiSvgIcon-root {\n      color: ${colors.TEXT.light};\n    }\n    .MuiInputLabel-outlined {\n      color: ${colors.TEXT.light};\n      width: 77%;\n    }\n    .MuiOutlinedInput-root {\n      padding: 1px;\n    }\n    .MuiInputLabel-outlined {\n      ${disableLabel ? 'display: none;' : ''}\n    }\n  `;\n  let localValues = [];\n\n  if (values.item) {\n    localValues = !Array.isArray(values.item) ? values.item.split(' ') : values.item;\n  } else {\n    localValues = values;\n  }\n\n  return React.createElement(ComponentStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.size,\n    required: required,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, !placeholderText && React.createElement(InputLabel, {\n    htmlFor: `${labelFormatted}-selector`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, label), React.createElement(Select, {\n    multiple: true,\n    value: localValues,\n    onChange: update,\n    onBlur: onBlur,\n    className: className,\n    classes: selectOverride,\n    displayEmpty: placeholderText,\n    input: React.createElement(OutlinedInput, {\n      name: labelFormatted,\n      id: `${labelFormatted}-selector`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }),\n    renderValue: selected => React.createElement(\"div\", {\n      className: classes.chips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, selected.map((v, idx) => React.createElement(Chip, {\n      key: idx,\n      id: `${v.toLowerCase()}-chip`,\n      label: React.createElement(\"span\", {\n        className: classes.chipLabelContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, v)),\n      onDelete: () => {\n        update(selected.filter(item => item !== v));\n      },\n      deleteIcon: React.createElement(PillClose, {\n        className: classes.chipClearBtn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }),\n      color: \"primary\",\n      className: classes.chip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }))),\n    inputProps: {\n      classes: useNSMultiSelectStyle(outterWidth, outerHeight, padding)()\n    },\n    MenuProps: MenuProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, items.map((item, idx) => React.createElement(MenuItem, {\n    key: idx,\n    value: item.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, item.value)))));\n}\n\nNSMultiSelect.displayName = \"NSMultiSelect\";\nNSMultiSelect.propTypes = {\n  values: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  items: PropTypes.array.isRequired,\n  update: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  onBlur: PropTypes.func,\n  required: PropTypes.bool,\n  placeholderText: PropTypes.bool,\n  disableLabel: PropTypes.bool,\n  width: PropTypes.string,\n  maxWidth: PropTypes.string,\n  outterWidth: PropTypes.string,\n  outerHeight: PropTypes.string,\n  padding: PropTypes.string,\n  translate: PropTypes.string,\n  selectOverride: PropTypes.object\n};\nNSMultiSelect.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"NSMultiSelect\",\n  \"props\": {\n    \"maxWidth\": {\n      \"defaultValue\": {\n        \"value\": \"'400px'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"required\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"translate\": {\n      \"defaultValue\": {\n        \"value\": \"'14px, 10px'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onBlur\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"values\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"object\"\n        }, {\n          \"name\": \"array\"\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"items\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"update\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"placeholderText\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"disableLabel\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"outterWidth\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"outerHeight\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"padding\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"selectOverride\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\nexport default NSMultiSelect;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/NSMultiSelect/index.js\"] = {\n    name: \"NSMultiSelect\",\n    docgenInfo: NSMultiSelect.__docgenInfo,\n    path: \"src/components/NSMultiSelect/index.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/NSMultiSelect/index.js"],"names":["React","PropTypes","styled","OutlinedInput","InputLabel","MenuItem","FormControl","Select","Chip","colors","useNSMultiSelectStyle","styles","PillClose","NSMultiSelect","values","items","label","update","width","maxWidth","outterWidth","outerHeight","padding","disableLabel","selectOverride","placeholderText","required","translate","className","onBlur","classes","labelFormatted","replace","toLowerCase","MenuProps","PaperProps","style","maxHeight","ComponentStyle","div","STATE","active","INTERFACE","ui4","TEXT","light","localValues","item","Array","isArray","split","size","selected","chips","map","v","idx","chipLabelContainer","filter","chipClearBtn","chip","value","propTypes","oneOfType","object","array","isRequired","func","string","bool"],"mappings":"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","sourcesContent":["/**\n *\n * NSMultiSelect\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Chip from '@material-ui/core/Chip';\n\nimport colors from 'global-styles';\nimport { useNSMultiSelectStyle, styles } from './styles';\nimport PillClose from '../Icons/pillClose';\n\nfunction NSMultiSelect({\n  values,\n  items,\n  label,\n  update,\n  width,\n  maxWidth = '400px',\n  outterWidth,\n  outerHeight,\n  padding,\n  disableLabel,\n  selectOverride,\n  placeholderText,\n  required = false,\n  translate = '14px, 10px',\n  className,\n  onBlur = () => {},\n}) {\n  const classes = styles(width, maxWidth)();\n  const labelFormatted = label.replace(/ /g, '-').toLowerCase();\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: 215,\n      },\n    },\n  };\n\n  const ComponentStyle = styled.div`\n    .MuiInputLabel-outlined.MuiInputLabel-shrink {\n      transform: translate(${translate}) scale(0.75);\n      color: ${colors.STATE.active};\n    }\n    .MuiOutlinedInput-root:hover .MuiOutlinedInput-notchedOutline {\n      border-color: ${colors.STATE.active};\n    }\n    .MuiOutlinedInput-notchedOutline {\n      border-color: ${colors.INTERFACE.ui4};\n    }\n    .MuiSvgIcon-root {\n      color: ${colors.TEXT.light};\n    }\n    .MuiInputLabel-outlined {\n      color: ${colors.TEXT.light};\n      width: 77%;\n    }\n    .MuiOutlinedInput-root {\n      padding: 1px;\n    }\n    .MuiInputLabel-outlined {\n      ${disableLabel ? 'display: none;' : ''}\n    }\n  `;\n\n  let localValues = [];\n\n  if (values.item) {\n    localValues = !Array.isArray(values.item)\n      ? values.item.split(' ')\n      : values.item;\n  } else {\n    localValues = values;\n  }\n\n  return (\n    <ComponentStyle>\n      <FormControl\n        variant=\"outlined\"\n        className={classes.size}\n        required={required}\n      >\n        {!placeholderText && (\n          <InputLabel htmlFor={`${labelFormatted}-selector`}>\n            {label}\n          </InputLabel>\n        )}\n        <Select\n          multiple\n          value={localValues}\n          onChange={update}\n          onBlur={onBlur}\n          className={className}\n          classes={selectOverride}\n          displayEmpty={placeholderText}\n          input={\n            <OutlinedInput\n              name={labelFormatted}\n              id={`${labelFormatted}-selector`}\n            />\n          }\n          renderValue={selected => (\n            <div className={classes.chips}>\n              {selected.map((v, idx) => (\n                <Chip\n                  key={idx}\n                  id={`${v.toLowerCase()}-chip`}\n                  label={\n                    <span className={classes.chipLabelContainer}>\n                      <span>{v}</span>\n                    </span>\n                  }\n                  onDelete={() => {\n                    update(selected.filter(item => item !== v));\n                  }}\n                  deleteIcon={<PillClose className={classes.chipClearBtn} />}\n                  color=\"primary\"\n                  className={classes.chip}\n                />\n              ))}\n            </div>\n          )}\n          inputProps={{\n            classes: useNSMultiSelectStyle(outterWidth, outerHeight, padding)(),\n          }}\n          MenuProps={MenuProps}\n        >\n          {items.map((item, idx) => (\n            <MenuItem key={idx} value={item.value}>\n              {item.value}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </ComponentStyle>\n  );\n}\n\nNSMultiSelect.propTypes = {\n  values: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  items: PropTypes.array.isRequired,\n  update: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  onBlur: PropTypes.func,\n  required: PropTypes.bool,\n  placeholderText: PropTypes.bool,\n  disableLabel: PropTypes.bool,\n  width: PropTypes.string,\n  maxWidth: PropTypes.string,\n  outterWidth: PropTypes.string,\n  outerHeight: PropTypes.string,\n  padding: PropTypes.string,\n  translate: PropTypes.string,\n  selectOverride: PropTypes.object,\n};\n\nexport default NSMultiSelect;\n"]},"metadata":{},"sourceType":"module"}