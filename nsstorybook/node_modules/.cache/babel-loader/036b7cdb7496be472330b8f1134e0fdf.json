{"ast":null,"code":"var _jsxFileName = \"/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/SurveyViewer/section.js\";\n\n/**\n *\n * Section\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport messages from './messages';\nimport { styles } from './styles';\nimport Question from './question';\nexport function Section({\n  intl,\n  name,\n  questions,\n  responses,\n  context,\n  version\n}) {\n  const classes = styles();\n  const renderQuestions = questions.map((q, idx) => React.createElement(Question, {\n    key: idx,\n    responses: responses,\n    version: version,\n    question: q,\n    context: context,\n    number: idx + 1,\n    lastQuestion: !questions[idx + 1],\n    rules: {\n      value: q.displayRuleValue,\n      condition: q.displayRuleCondition\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }));\n  return React.createElement(Grid, {\n    container: true,\n    justify: \"flex-start\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, version !== 2 && React.createElement(Grid, {\n    container: true,\n    item: true,\n    alignItems: \"center\",\n    direction: \"row\",\n    className: classes.sectionHeaderBg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: clsx(classes.sectionHeader, classes.text, classes.uppercase),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, name), React.createElement(Typography, {\n    className: clsx(classes.caption, classes.text),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, `${questions.length} ${questions.length > 1 ? intl.formatMessage(messages.questions) : intl.formatMessage(messages.question)}`)), renderQuestions);\n}\nSection.displayName = \"Section\";\nSection.propTypes = {\n  intl: intlShape.isRequired,\n  name: PropTypes.string.isRequired,\n  questions: PropTypes.array.isRequired,\n  responses: PropTypes.array.isRequired,\n  context: PropTypes.string.isRequired,\n  version: PropTypes.oneOf([1, 2])\n};\nconst IntlSection = injectIntl(Section);\nexport default IntlSection;\nSection.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Section\",\n  \"props\": {\n    \"intl\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"intlShape.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"questions\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"responses\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"context\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"version\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"1\",\n          \"computed\": false\n        }, {\n          \"value\": \"2\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/SurveyViewer/section.js\"] = {\n    name: \"Section\",\n    docgenInfo: Section.__docgenInfo,\n    path: \"src/components/SurveyViewer/section.js\"\n  };\n}","map":{"version":3,"sources":["/Users/tunkhine/Desktop/Development/NSStorybook/nsstorybook/src/components/SurveyViewer/section.js"],"names":["React","PropTypes","clsx","injectIntl","intlShape","Typography","Grid","messages","styles","Question","Section","intl","name","questions","responses","context","version","classes","renderQuestions","map","q","idx","value","displayRuleValue","condition","displayRuleCondition","sectionHeaderBg","sectionHeader","text","uppercase","caption","length","formatMessage","question","propTypes","isRequired","string","array","oneOf","IntlSection"],"mappings":"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","sourcesContent":["/**\n *\n * Section\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { injectIntl, intlShape } from 'react-intl';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport messages from './messages';\nimport { styles } from './styles';\nimport Question from './question';\n\nexport function Section({\n  intl,\n  name,\n  questions,\n  responses,\n  context,\n  version,\n}) {\n  const classes = styles();\n\n  const renderQuestions = questions.map((q, idx) => (\n    <Question\n      key={idx}\n      responses={responses}\n      version={version}\n      question={q}\n      context={context}\n      number={idx + 1}\n      lastQuestion={!questions[idx + 1]}\n      rules={{ value: q.displayRuleValue, condition: q.displayRuleCondition }}\n    />\n  ));\n\n  return (\n    <Grid container justify=\"flex-start\" alignItems=\"center\">\n      {version !== 2 && (\n        <Grid\n          container\n          item\n          alignItems=\"center\"\n          direction=\"row\"\n          className={classes.sectionHeaderBg}\n        >\n          <Typography\n            className={clsx(\n              classes.sectionHeader,\n              classes.text,\n              classes.uppercase\n            )}\n          >\n            {name}\n          </Typography>\n          <Typography className={clsx(classes.caption, classes.text)}>\n            {`${questions.length} ${\n              questions.length > 1\n                ? intl.formatMessage(messages.questions)\n                : intl.formatMessage(messages.question)\n            }`}\n          </Typography>\n        </Grid>\n      )}\n\n      {renderQuestions}\n    </Grid>\n  );\n}\n\nSection.propTypes = {\n  intl: intlShape.isRequired,\n  name: PropTypes.string.isRequired,\n  questions: PropTypes.array.isRequired,\n  responses: PropTypes.array.isRequired,\n  context: PropTypes.string.isRequired,\n  version: PropTypes.oneOf([1, 2]),\n};\n\nconst IntlSection = injectIntl(Section);\n\nexport default IntlSection;\n"]},"metadata":{},"sourceType":"module"}